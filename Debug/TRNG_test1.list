
TRNG_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080045d8  080045d8  000055d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000008  08004754  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b0  20000068  080047b4  00006068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000318  080047b4  00006318  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eef0  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020fe  00000000  00000000  00014f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d8  00000000  00000000  00017088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d8c  00000000  00000000  00018260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021425  00000000  00000000  00018fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ece3  00000000  00000000  0003a411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5f08  00000000  00000000  000490f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011effc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f30  00000000  00000000  0011f040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000048  00000000  00000000  00123f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080045c0 	.word	0x080045c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080045c0 	.word	0x080045c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <now_ms>:
static void force_set_mode(uint8_t m);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
static inline uint32_t now_ms(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000592:	f000 fd01 	bl	8000f98 <HAL_GetTick>
 8000596:	4603      	mov	r3, r0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}

0800059c <button_pressed_event>:

static bool button_pressed_event(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 80005a2:	f7ff fff4 	bl	800058e <now_ms>
 80005a6:	6078      	str	r0, [r7, #4]
    uint8_t reading = (uint8_t)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <button_pressed_event+0x64>)
 80005ac:	f000 ff84 	bl	80014b8 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	70fb      	strb	r3, [r7, #3]

    if(reading != lastButtonReading)
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <button_pressed_event+0x68>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	78fa      	ldrb	r2, [r7, #3]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d005      	beq.n	80005ca <button_pressed_event+0x2e>
    {
        lastButtonReading = reading;
 80005be:	4a11      	ldr	r2, [pc, #68]	@ (8000604 <button_pressed_event+0x68>)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	7013      	strb	r3, [r2, #0]
        lastButtonChangeTime = t;
 80005c4:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <button_pressed_event+0x6c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
    }

    if((t - lastButtonChangeTime) > BUTTON_DEBOUNCE_MS)
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <button_pressed_event+0x6c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b32      	cmp	r3, #50	@ 0x32
 80005d4:	d90f      	bls.n	80005f6 <button_pressed_event+0x5a>
    {
        if(lastButtonStable != lastButtonReading)
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <button_pressed_event+0x70>)
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <button_pressed_event+0x68>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d009      	beq.n	80005f6 <button_pressed_event+0x5a>
        {
            lastButtonStable = lastButtonReading;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <button_pressed_event+0x68>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <button_pressed_event+0x70>)
 80005e8:	701a      	strb	r2, [r3, #0]
            if(lastButtonStable == GPIO_PIN_RESET)
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <button_pressed_event+0x70>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <button_pressed_event+0x5a>
                return true;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <button_pressed_event+0x5c>
        }
    }
    return false;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000c00 	.word	0x48000c00
 8000604:	20000009 	.word	0x20000009
 8000608:	20000130 	.word	0x20000130
 800060c:	2000000a 	.word	0x2000000a

08000610 <mode2_reset_state>:

static void mode2_reset_state(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    m2_state = M2_IDLE;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <mode2_reset_state+0x2c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
    m2_nextAction = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <mode2_reset_state+0x30>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
    m2_blinksRemain = 0;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <mode2_reset_state+0x34>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
    m2_ledOn = 0;
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <mode2_reset_state+0x38>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN | LED1_PIN | LED3_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2123      	movs	r1, #35	@ 0x23
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <mode2_reset_state+0x3c>)
 8000632:	f000 ff59 	bl	80014e8 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000139 	.word	0x20000139
 8000640:	2000013c 	.word	0x2000013c
 8000644:	20000140 	.word	0x20000140
 8000648:	20000144 	.word	0x20000144
 800064c:	48000400 	.word	0x48000400

08000650 <toggle_mode>:

static void toggle_mode(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
    mode ^= 1u; // Toggle 0 <-> 1
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <toggle_mode+0x64>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <toggle_mode+0x64>)
 8000664:	701a      	strb	r2, [r3, #0]
    mode2_reset_state();
 8000666:	f7ff ffd3 	bl	8000610 <mode2_reset_state>
    m0_lastToggle = now_ms();
 800066a:	f7ff ff90 	bl	800058e <now_ms>
 800066e:	4603      	mov	r3, r0
 8000670:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <toggle_mode+0x68>)
 8000672:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <toggle_mode+0x6c>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <toggle_mode+0x70>)
 8000680:	f000 ff32 	bl	80014e8 <HAL_GPIO_WritePin>

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode toggled -> %u\r\n", (unsigned)mode);
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <toggle_mode+0x64>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <toggle_mode+0x74>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <toggle_mode+0x78>)
 8000690:	f003 fae2 	bl	8003c58 <sniprintf>
 8000694:	6078      	str	r0, [r7, #4]
    if(len>0) HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, (uint16_t)len, HAL_MAX_DELAY);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dd07      	ble.n	80006ac <toggle_mode+0x5c>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	4908      	ldr	r1, [pc, #32]	@ (80006c8 <toggle_mode+0x78>)
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <toggle_mode+0x7c>)
 80006a8:	f002 fdff 	bl	80032aa <HAL_UART_Transmit>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000012c 	.word	0x2000012c
 80006b8:	20000134 	.word	0x20000134
 80006bc:	20000138 	.word	0x20000138
 80006c0:	48000400 	.word	0x48000400
 80006c4:	080045d8 	.word	0x080045d8
 80006c8:	20000148 	.word	0x20000148
 80006cc:	20000098 	.word	0x20000098

080006d0 <force_set_mode>:

static void force_set_mode(uint8_t m)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    if(m > 1) return;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d826      	bhi.n	800072e <force_set_mode+0x5e>
    mode = m;
 80006e0:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <force_set_mode+0x68>)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	7013      	strb	r3, [r2, #0]
    mode2_reset_state();
 80006e6:	f7ff ff93 	bl	8000610 <mode2_reset_state>
    m0_lastToggle = now_ms();
 80006ea:	f7ff ff50 	bl	800058e <now_ms>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a12      	ldr	r2, [pc, #72]	@ (800073c <force_set_mode+0x6c>)
 80006f2:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <force_set_mode+0x70>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	4811      	ldr	r0, [pc, #68]	@ (8000744 <force_set_mode+0x74>)
 8000700:	f000 fef2 	bl	80014e8 <HAL_GPIO_WritePin>

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode forced -> %u\r\n", (unsigned)mode);
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <force_set_mode+0x68>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <force_set_mode+0x78>)
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	480f      	ldr	r0, [pc, #60]	@ (800074c <force_set_mode+0x7c>)
 8000710:	f003 faa2 	bl	8003c58 <sniprintf>
 8000714:	60f8      	str	r0, [r7, #12]
    if(len>0) HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, (uint16_t)len, HAL_MAX_DELAY);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dd09      	ble.n	8000730 <force_set_mode+0x60>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	b29a      	uxth	r2, r3
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	4909      	ldr	r1, [pc, #36]	@ (800074c <force_set_mode+0x7c>)
 8000726:	480a      	ldr	r0, [pc, #40]	@ (8000750 <force_set_mode+0x80>)
 8000728:	f002 fdbf 	bl	80032aa <HAL_UART_Transmit>
 800072c:	e000      	b.n	8000730 <force_set_mode+0x60>
    if(m > 1) return;
 800072e:	bf00      	nop
}
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000012c 	.word	0x2000012c
 800073c:	20000134 	.word	0x20000134
 8000740:	20000138 	.word	0x20000138
 8000744:	48000400 	.word	0x48000400
 8000748:	080045f0 	.word	0x080045f0
 800074c:	20000148 	.word	0x20000148
 8000750:	20000098 	.word	0x20000098

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af02      	add	r7, sp, #8
    HAL_Init();
 800075a:	f000 fbaf 	bl	8000ebc <HAL_Init>
    SystemClock_Config();
 800075e:	f000 f999 	bl	8000a94 <SystemClock_Config>

    MX_GPIO_Init();
 8000762:	f000 f917 	bl	8000994 <MX_GPIO_Init>
    MX_RNG_Init();
 8000766:	f000 f955 	bl	8000a14 <MX_RNG_Init>
    MX_USART1_UART_Init();
 800076a:	f000 f969 	bl	8000a40 <MX_USART1_UART_Init>

    while(1)
    {
        if(button_pressed_event() || debugToggle)
 800076e:	f7ff ff15 	bl	800059c <button_pressed_event>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d104      	bne.n	8000782 <main+0x2e>
 8000778:	4b77      	ldr	r3, [pc, #476]	@ (8000958 <main+0x204>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <main+0x38>
        {
            toggle_mode();
 8000782:	f7ff ff65 	bl	8000650 <toggle_mode>
            debugToggle = 0;
 8000786:	4b74      	ldr	r3, [pc, #464]	@ (8000958 <main+0x204>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
        }

        if(debugForceMode != -1)
 800078c:	4b73      	ldr	r3, [pc, #460]	@ (800095c <main+0x208>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000796:	d009      	beq.n	80007ac <main+0x58>
        {
            force_set_mode((uint8_t)debugForceMode);
 8000798:	4b70      	ldr	r3, [pc, #448]	@ (800095c <main+0x208>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff95 	bl	80006d0 <force_set_mode>
            debugForceMode = -1;
 80007a6:	4b6d      	ldr	r3, [pc, #436]	@ (800095c <main+0x208>)
 80007a8:	22ff      	movs	r2, #255	@ 0xff
 80007aa:	701a      	strb	r2, [r3, #0]
        }

        uint32_t t = now_ms();
 80007ac:	f7ff feef 	bl	800058e <now_ms>
 80007b0:	6078      	str	r0, [r7, #4]

        if(mode == 0) // Mode 0: LED2 yanıp söner
 80007b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000960 <main+0x20c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d11d      	bne.n	80007f8 <main+0xa4>
        {
            if(t - m0_lastToggle >= MODE0_BLINK_MS)
 80007bc:	4b69      	ldr	r3, [pc, #420]	@ (8000964 <main+0x210>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007c8:	d3d1      	bcc.n	800076e <main+0x1a>
            {
                m0_lastToggle = t;
 80007ca:	4a66      	ldr	r2, [pc, #408]	@ (8000964 <main+0x210>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6013      	str	r3, [r2, #0]
                m0_ledState ^= 1;
 80007d0:	4b65      	ldr	r3, [pc, #404]	@ (8000968 <main+0x214>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b63      	ldr	r3, [pc, #396]	@ (8000968 <main+0x214>)
 80007dc:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m0_ledState?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007de:	4b62      	ldr	r3, [pc, #392]	@ (8000968 <main+0x214>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	2101      	movs	r1, #1
 80007f0:	485e      	ldr	r0, [pc, #376]	@ (800096c <main+0x218>)
 80007f2:	f000 fe79 	bl	80014e8 <HAL_GPIO_WritePin>
 80007f6:	e7ba      	b.n	800076e <main+0x1a>
            }
        }
        else // Mode 1: RNG blink
        {
            switch(m2_state)
 80007f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <main+0x21c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d8b6      	bhi.n	800076e <main+0x1a>
 8000800:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <main+0xb4>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000819 	.word	0x08000819
 800080c:	0800089f 	.word	0x0800089f
 8000810:	08000911 	.word	0x08000911
 8000814:	08000937 	.word	0x08000937
            {
                case M2_IDLE:
                {
                    uint32_t rnd;
                    if(HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4855      	ldr	r0, [pc, #340]	@ (8000974 <main+0x220>)
 800081e:	f002 fc7e 	bl	800311e <HAL_RNG_GenerateRandomNumber>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <main+0xf2>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	484f      	ldr	r0, [pc, #316]	@ (800096c <main+0x218>)
 800082e:	f000 fe5b 	bl	80014e8 <HAL_GPIO_WritePin>
                        HAL_Delay(LED3_ON_MS);
 8000832:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000836:	f000 fbc7 	bl	8000fc8 <HAL_Delay>
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	484b      	ldr	r0, [pc, #300]	@ (800096c <main+0x218>)
 8000840:	f000 fe52 	bl	80014e8 <HAL_GPIO_WritePin>
 8000844:	e793      	b.n	800076e <main+0x1a>
                        break;
                    }
                    m2_blinksRemain = (rnd % 10) + 1;
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4b4b      	ldr	r3, [pc, #300]	@ (8000978 <main+0x224>)
 800084a:	fba3 2301 	umull	r2, r3, r3, r1
 800084e:	08da      	lsrs	r2, r3, #3
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	1aca      	subs	r2, r1, r3
 800085a:	1c53      	adds	r3, r2, #1
 800085c:	4a47      	ldr	r2, [pc, #284]	@ (800097c <main+0x228>)
 800085e:	6013      	str	r3, [r2, #0]
                    m2_state = M2_BLINKING;
 8000860:	4b43      	ldr	r3, [pc, #268]	@ (8000970 <main+0x21c>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
                    m2_ledOn = 0;
 8000866:	4b46      	ldr	r3, [pc, #280]	@ (8000980 <main+0x22c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
                    m2_nextAction = t;
 800086c:	4a45      	ldr	r2, [pc, #276]	@ (8000984 <main+0x230>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]

                    snprintf(uartMsg, sizeof(uartMsg), "Random Number: %lu, LED2 blinks: %lu\r\n",
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4b41      	ldr	r3, [pc, #260]	@ (800097c <main+0x228>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	4613      	mov	r3, r2
 800087c:	4a42      	ldr	r2, [pc, #264]	@ (8000988 <main+0x234>)
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	4842      	ldr	r0, [pc, #264]	@ (800098c <main+0x238>)
 8000882:	f003 f9e9 	bl	8003c58 <sniprintf>
                             rnd, m2_blinksRemain);
                    HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8000886:	4841      	ldr	r0, [pc, #260]	@ (800098c <main+0x238>)
 8000888:	f7ff fc7a 	bl	8000180 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	493d      	ldr	r1, [pc, #244]	@ (800098c <main+0x238>)
 8000896:	483e      	ldr	r0, [pc, #248]	@ (8000990 <main+0x23c>)
 8000898:	f002 fd07 	bl	80032aa <HAL_UART_Transmit>
                }
                break;
 800089c:	e05a      	b.n	8000954 <main+0x200>

                case M2_BLINKING:
                    if(t >= m2_nextAction)
 800089e:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <main+0x230>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d34f      	bcc.n	8000948 <main+0x1f4>
                    {
                        m2_ledOn ^= 1;
 80008a8:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <main+0x22c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f083 0301 	eor.w	r3, r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <main+0x22c>)
 80008b4:	701a      	strb	r2, [r3, #0]
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m2_ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <main+0x22c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	2101      	movs	r1, #1
 80008c8:	4828      	ldr	r0, [pc, #160]	@ (800096c <main+0x218>)
 80008ca:	f000 fe0d 	bl	80014e8 <HAL_GPIO_WritePin>
                        if(!m2_ledOn)
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <main+0x22c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d116      	bne.n	8000904 <main+0x1b0>
                        {
                            m2_blinksRemain--;
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <main+0x228>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	4a27      	ldr	r2, [pc, #156]	@ (800097c <main+0x228>)
 80008de:	6013      	str	r3, [r2, #0]
                            if(m2_blinksRemain == 0)
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <main+0x228>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10d      	bne.n	8000904 <main+0x1b0>
                            {
                                m2_state = M2_LED1_ON;
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <main+0x21c>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	701a      	strb	r2, [r3, #0]
                                m2_nextAction = t + LED3_ON_MS;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80008f4:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <main+0x230>)
 80008f6:	6013      	str	r3, [r2, #0]
                                HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	481b      	ldr	r0, [pc, #108]	@ (800096c <main+0x218>)
 80008fe:	f000 fdf3 	bl	80014e8 <HAL_GPIO_WritePin>
                                break;
 8000902:	e027      	b.n	8000954 <main+0x200>
                            }
                        }
                        m2_nextAction = t + (m2_ledOn?RNG_LED_ON_MS:RNG_LED_OFF_MS);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800090a:	4a1e      	ldr	r2, [pc, #120]	@ (8000984 <main+0x230>)
 800090c:	6013      	str	r3, [r2, #0]
                    }
                    break;
 800090e:	e01b      	b.n	8000948 <main+0x1f4>

                case M2_LED1_ON:
                    if(t >= m2_nextAction)
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <main+0x230>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	429a      	cmp	r2, r3
 8000918:	d318      	bcc.n	800094c <main+0x1f8>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4813      	ldr	r0, [pc, #76]	@ (800096c <main+0x218>)
 8000920:	f000 fde2 	bl	80014e8 <HAL_GPIO_WritePin>
                        m2_state = M2_WAIT;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <main+0x21c>)
 8000926:	2203      	movs	r2, #3
 8000928:	701a      	strb	r2, [r3, #0]
                        m2_nextAction = t + RNG_POST_WAIT_MS;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000930:	4a14      	ldr	r2, [pc, #80]	@ (8000984 <main+0x230>)
 8000932:	6013      	str	r3, [r2, #0]
                    }
                    break;
 8000934:	e00a      	b.n	800094c <main+0x1f8>

                case M2_WAIT:
                    if(t >= m2_nextAction)
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <main+0x230>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d307      	bcc.n	8000950 <main+0x1fc>
                        m2_state = M2_IDLE;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <main+0x21c>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
                    break;
 8000946:	e003      	b.n	8000950 <main+0x1fc>
                    break;
 8000948:	bf00      	nop
 800094a:	e710      	b.n	800076e <main+0x1a>
                    break;
 800094c:	bf00      	nop
 800094e:	e70e      	b.n	800076e <main+0x1a>
                    break;
 8000950:	bf00      	nop
 8000952:	e70c      	b.n	800076e <main+0x1a>
    {
 8000954:	e70b      	b.n	800076e <main+0x1a>
 8000956:	bf00      	nop
 8000958:	2000012d 	.word	0x2000012d
 800095c:	20000008 	.word	0x20000008
 8000960:	2000012c 	.word	0x2000012c
 8000964:	20000134 	.word	0x20000134
 8000968:	20000138 	.word	0x20000138
 800096c:	48000400 	.word	0x48000400
 8000970:	20000139 	.word	0x20000139
 8000974:	20000084 	.word	0x20000084
 8000978:	cccccccd 	.word	0xcccccccd
 800097c:	20000140 	.word	0x20000140
 8000980:	20000144 	.word	0x20000144
 8000984:	2000013c 	.word	0x2000013c
 8000988:	08004604 	.word	0x08004604
 800098c:	20000148 	.word	0x20000148
 8000990:	20000098 	.word	0x20000098

08000994 <MX_GPIO_Init>:
    }
}

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

    /* GPIO port clock enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fdd7 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2008      	movs	r0, #8
 80009b0:	f7ff fdd4 	bl	800055c <LL_AHB2_GRP1_EnableClock>

    /* LED pins */
    GPIO_InitStruct.Pin = LED1_PIN|LED2_PIN|LED3_PIN;
 80009b4:	2323      	movs	r3, #35	@ 0x23
 80009b6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0x78>)
 80009ca:	f000 fc05 	bl	80011d8 <HAL_GPIO_Init>

    /* Button pin */
    GPIO_InitStruct.Pin = BUTTON_PIN;
 80009ce:	2301      	movs	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_GPIO_Init+0x7c>)
 80009e0:	f000 fbfa 	bl	80011d8 <HAL_GPIO_Init>

    /* UART1 pins PB6/PB7 alternate function setup */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e4:	23c0      	movs	r3, #192	@ 0xc0
 80009e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f4:	2307      	movs	r3, #7
 80009f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <MX_GPIO_Init+0x78>)
 80009fe:	f000 fbeb 	bl	80011d8 <HAL_GPIO_Init>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	48000400 	.word	0x48000400
 8000a10:	48000c00 	.word	0x48000c00

08000a14 <MX_RNG_Init>:

/* RNG Initialization Function */
static void MX_RNG_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    hrng.Instance = RNG;
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <MX_RNG_Init+0x24>)
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <MX_RNG_Init+0x28>)
 8000a1c:	601a      	str	r2, [r3, #0]
    hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_RNG_Init+0x24>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
    if(HAL_RNG_Init(&hrng) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_RNG_Init+0x24>)
 8000a26:	f002 fb45 	bl	80030b4 <HAL_RNG_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_RNG_Init+0x20>
    {
        Error_Handler();
 8000a30:	f000 f88a 	bl	8000b48 <Error_Handler>
    }
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000084 	.word	0x20000084
 8000a3c:	58001000 	.word	0x58001000

08000a40 <MX_USART1_UART_Init>:

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f002 fbc7 	bl	800320a <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000a82:	f000 f861 	bl	8000b48 <Error_Handler>
    }
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	40013800 	.word	0x40013800

08000a94 <SystemClock_Config>:

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09a      	sub	sp, #104	@ 0x68
 8000a98:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2248      	movs	r2, #72	@ 0x48
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f90e 	bl	8003cc4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <SystemClock_Config+0xb0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ac2:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <SystemClock_Config+0xb0>)
 8000ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <SystemClock_Config+0xb0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_MSI;
 8000ad6:	232a      	movs	r3, #42	@ 0x2a
 8000ad8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aec:	2360      	movs	r3, #96	@ 0x60
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af0:	2305      	movs	r3, #5
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f89f 	bl	8001c40 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x78>
 8000b08:	f000 f81e 	bl	8000b48 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b0c:	236f      	movs	r3, #111	@ 0x6f
 8000b0e:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fbfb 	bl	8002328 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xa8>
 8000b38:	f000 f806 	bl	8000b48 <Error_Handler>
}
 8000b3c:	bf00      	nop
 8000b3e:	3768      	adds	r7, #104	@ 0x68
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400

08000b48 <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
    __disable_irq();
    while(1) {}
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <LL_AHB2_GRP1_EnableClock>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	@ 0x58
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2250      	movs	r2, #80	@ 0x50
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f85b 	bl	8003cc4 <memset>
  if(hrng->Instance==RNG)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <HAL_RNG_MspInit+0x50>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d113      	bne.n	8000c40 <HAL_RNG_MspInit+0x48>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c22:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 ffbc 	bl	8002ba6 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000c34:	f7ff ff88 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c38:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000c3c:	f7ff ffa3 	bl	8000b86 <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000c40:	bf00      	nop
 8000c42:	3758      	adds	r7, #88	@ 0x58
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58001000 	.word	0x58001000

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09c      	sub	sp, #112	@ 0x70
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2250      	movs	r2, #80	@ 0x50
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 f829 	bl	8003cc4 <memset>
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d124      	bne.n	8000cc6 <HAL_UART_MspInit+0x7a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 ff8c 	bl	8002ba6 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c94:	f7ff ff58 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c9c:	f7ff ff8c 	bl	8000bb8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff ff57 	bl	8000b54 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca6:	23c0      	movs	r3, #192	@ 0xc0
 8000ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <HAL_UART_MspInit+0x88>)
 8000cc2:	f000 fa89 	bl	80011d8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	@ 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f91f 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f002 ffb4 	bl	8003cd4 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20030000 	.word	0x20030000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200001c8 	.word	0x200001c8
 8000da0:	20000318 	.word	0x20000318

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <SystemInit+0x98>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a23      	ldr	r2, [pc, #140]	@ (8000e3c <SystemInit+0x98>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dcc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <SystemInit+0x9c>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dee:	f023 0305 	bic.w	r3, r3, #5
 8000df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <SystemInit+0xa0>)
 8000e10:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e16:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <SystemInit+0xa0>)
 8000e18:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	faf6fefb 	.word	0xfaf6fefb
 8000e44:	22041000 	.word	0x22041000

08000e48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4c:	3304      	adds	r3, #4

08000e4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e52:	d3f9      	bcc.n	8000e48 <CopyDataInit>
  bx lr
 8000e54:	4770      	bx	lr

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e58:	3004      	adds	r0, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
  bx lr
 8000e5e:	4770      	bx	lr

08000e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff ff9e 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <LoopForever+0x6>)
 8000e6a:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <LoopForever+0xa>)
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <LoopForever+0xe>)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f7ff ffed 	bl	8000e4e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e74:	480b      	ldr	r0, [pc, #44]	@ (8000ea4 <LoopForever+0x12>)
 8000e76:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <LoopForever+0x16>)
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <LoopForever+0x1a>)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f7ff ffe7 	bl	8000e4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e80:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <LoopForever+0x1e>)
 8000e82:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <LoopForever+0x22>)
 8000e84:	2300      	movs	r3, #0
 8000e86:	f7ff ffe8 	bl	8000e5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e8a:	f002 ff29 	bl	8003ce0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e8e:	f7ff fc61 	bl	8000754 <main>

08000e92 <LoopForever>:

LoopForever:
  b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000068 	.word	0x20000068
 8000ea0:	08004754 	.word	0x08004754
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ea4:	20030000 	.word	0x20030000
 8000ea8:	20030000 	.word	0x20030000
 8000eac:	080047b4 	.word	0x080047b4
  INIT_BSS _sbss, _ebss
 8000eb0:	20000068 	.word	0x20000068
 8000eb4:	20000318 	.word	0x20000318

08000eb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_Init+0x3c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_Init+0x3c>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f94e 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed8:	200f      	movs	r0, #15
 8000eda:	f000 f80f 	bl	8000efc <HAL_InitTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	e001      	b.n	8000eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eea:	f7ff fe7e 	bl	8000bea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58004000 	.word	0x58004000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d024      	beq.n	8000f5a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f10:	f001 fbb8 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8000f14:	4602      	mov	r2, r0
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_InitTick+0x6c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f948 	bl	80011be <HAL_SYSTICK_Config>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10f      	bne.n	8000f54 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d809      	bhi.n	8000f4e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	f000 f922 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f46:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <HAL_InitTick+0x70>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e007      	b.n	8000f5e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e004      	b.n	8000f5e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e001      	b.n	8000f5e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000014 	.word	0x20000014
 8000f6c:	20000010 	.word	0x20000010

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000014 	.word	0x20000014
 8000f94:	200001cc 	.word	0x200001cc

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200001cc 	.word	0x200001cc

08000fb0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTickPrio+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000010 	.word	0x20000010

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffe2 	bl	8000f98 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffd2 	bl	8000f98 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000014 	.word	0x20000014

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff5e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffb2 	bl	8001130 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e14c      	b.n	8001482 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 813e 	beq.w	800147c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_GPIO_Init+0x40>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 0201 	and.w	r2, r3, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b03      	cmp	r3, #3
 8001284:	d017      	beq.n	80012b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d123      	bne.n	800130a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	6939      	ldr	r1, [r7, #16]
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0203 	and.w	r2, r3, #3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8098 	beq.w	800147c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800134c:	4a54      	ldr	r2, [pc, #336]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001376:	d019      	beq.n	80013ac <HAL_GPIO_Init+0x1d4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a4a      	ldr	r2, [pc, #296]	@ (80014a4 <HAL_GPIO_Init+0x2cc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d013      	beq.n	80013a8 <HAL_GPIO_Init+0x1d0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a49      	ldr	r2, [pc, #292]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1cc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a48      	ldr	r2, [pc, #288]	@ (80014ac <HAL_GPIO_Init+0x2d4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1c8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <HAL_GPIO_Init+0x2d8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1c4>
 8001398:	2304      	movs	r3, #4
 800139a:	e008      	b.n	80013ae <HAL_GPIO_Init+0x1d6>
 800139c:	2307      	movs	r3, #7
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x1d6>
 80013a0:	2303      	movs	r3, #3
 80013a2:	e004      	b.n	80013ae <HAL_GPIO_Init+0x1d6>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x1d6>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_GPIO_Init+0x1d6>
 80013ac:	2300      	movs	r3, #0
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	f002 0203 	and.w	r2, r2, #3
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	4093      	lsls	r3, r2
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013be:	4938      	ldr	r1, [pc, #224]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f0:	4a30      	ldr	r2, [pc, #192]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141a:	4a26      	ldr	r2, [pc, #152]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001446:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f aeab 	bne.w	80011e8 <HAL_GPIO_Init+0x10>
  }
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	58000800 	.word	0x58000800

080014b8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001504:	e002      	b.n	800150c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	58000400 	.word	0x58000400

08001538 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <HAL_PWREx_GetVoltageRange+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58000400 	.word	0x58000400

08001554 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001566:	d101      	bne.n	800156c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015c6:	d101      	bne.n	80015cc <LL_RCC_HSE_IsReady+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_RCC_HSE_IsReady+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001626:	d101      	bne.n	800162c <LL_RCC_HSI_IsReady+0x18>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <LL_RCC_HSI_IsReady+0x1a>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800166e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d101      	bne.n	80016be <LL_RCC_HSI48_IsReady+0x18>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <LL_RCC_HSI48_IsReady+0x1a>
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d101      	bne.n	800176a <LL_RCC_LSE_IsReady+0x18>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_RCC_LSE_IsReady+0x1a>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d101      	bne.n	80017d2 <LL_RCC_LSI1_IsReady+0x18>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_RCC_LSI1_IsReady+0x1a>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b08      	cmp	r3, #8
 8001834:	d101      	bne.n	800183a <LL_RCC_LSI2_IsReady+0x18>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_RCC_LSI2_IsReady+0x1a>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001856:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001862:	4313      	orrs	r3, r2
 8001864:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d101      	bne.n	80018c6 <LL_RCC_MSI_IsReady+0x16>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_RCC_MSI_IsReady+0x18>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800190a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001910:	d901      	bls.n	8001916 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001912:	23b0      	movs	r3, #176	@ 0xb0
 8001914:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 0203 	bic.w	r2, r3, #3
 8001960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019f2:	f023 020f 	bic.w	r2, r3, #15
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b12:	d101      	bne.n	8001b18 <LL_RCC_PLL_IsReady+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_RCC_PLL_IsReady+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b98:	d101      	bne.n	8001b9e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bbe:	d101      	bne.n	8001bc4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be4:	d101      	bne.n	8001bea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c08:	d101      	bne.n	8001c0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c2c:	d101      	bne.n	8001c32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b08d      	sub	sp, #52	@ 0x34
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e363      	b.n	800231a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 808d 	beq.w	8001d7a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c60:	f7ff fe89 	bl	8001976 <LL_RCC_GetSysClkSource>
 8001c64:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c66:	f7ff ff82 	bl	8001b6e <LL_RCC_PLL_GetMainSource>
 8001c6a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3e>
 8001c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d147      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d144      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e347      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001c8e:	f7ff fe34 	bl	80018fa <LL_RCC_MSI_GetRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	429c      	cmp	r4, r3
 8001c96:	d914      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fd31 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e336      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe0e 	bl	80018d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe32 	bl	8001924 <LL_RCC_MSI_SetCalibTrimming>
 8001cc0:	e013      	b.n	8001cea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe03 	bl	80018d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe27 	bl	8001924 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fd12 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e317      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cea:	f000 fccb 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4aa4      	ldr	r2, [pc, #656]	@ (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001cf2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cf4:	4ba4      	ldr	r3, [pc, #656]	@ (8001f88 <HAL_RCC_OscConfig+0x348>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f8ff 	bl	8000efc <HAL_InitTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d039      	beq.n	8001d78 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e308      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01e      	beq.n	8001d4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d10:	f7ff fdb0 	bl	8001874 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f940 	bl	8000f98 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f93c 	bl	8000f98 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e2f5      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d2e:	f7ff fdbf 	bl	80018b0 <LL_RCC_MSI_IsReady>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f1      	beq.n	8001d1c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fdc8 	bl	80018d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fdec 	bl	8001924 <LL_RCC_MSI_SetCalibTrimming>
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4e:	f7ff fda0 	bl	8001892 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d52:	f7ff f921 	bl	8000f98 <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f91d 	bl	8000f98 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e2d6      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d6c:	f7ff fda0 	bl	80018b0 <LL_RCC_MSI_IsReady>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f1      	bne.n	8001d5a <HAL_RCC_OscConfig+0x11a>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d78:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d047      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d86:	f7ff fdf6 	bl	8001976 <LL_RCC_GetSysClkSource>
 8001d8a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d8c:	f7ff feef 	bl	8001b6e <LL_RCC_PLL_GetMainSource>
 8001d90:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x164>
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d134      	bne.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e2b4      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x180>
 8001dba:	f7ff fbdd 	bl	8001578 <LL_RCC_HSE_Enable>
 8001dbe:	e001      	b.n	8001dc4 <HAL_RCC_OscConfig+0x184>
 8001dc0:	f7ff fbe9 	bl	8001596 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8e4 	bl	8000f98 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f8e0 	bl	8000f98 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e299      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001de6:	f7ff fbe5 	bl	80015b4 <LL_RCC_HSE_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f1      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x194>
 8001df0:	e011      	b.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff f8d1 	bl	8000f98 <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfa:	f7ff f8cd 	bl	8000f98 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	@ 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e286      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e0c:	f7ff fbd2 	bl	80015b4 <LL_RCC_HSE_IsReady>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f1      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d04c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	f7ff fda8 	bl	8001976 <LL_RCC_GetSysClkSource>
 8001e26:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e28:	f7ff fea1 	bl	8001b6e <LL_RCC_PLL_GetMainSource>
 8001e2c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x200>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d10e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e266      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbf1 	bl	8001638 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e56:	e031      	b.n	8001ebc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d019      	beq.n	8001e94 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	f7ff fbba 	bl	80015d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f898 	bl	8000f98 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff f894 	bl	8000f98 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e24d      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e7e:	f7ff fbc9 	bl	8001614 <LL_RCC_HSI_IsReady>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f1      	beq.n	8001e6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbd3 	bl	8001638 <LL_RCC_HSI_SetCalibTrimming>
 8001e92:	e013      	b.n	8001ebc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e94:	f7ff fbaf 	bl	80015f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f87e 	bl	8000f98 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f87a 	bl	8000f98 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e233      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eb2:	f7ff fbaf 	bl	8001614 <LL_RCC_HSI_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f1      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a3 	beq.w	800201c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d076      	beq.n	8001fcc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d046      	beq.n	8001f78 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001eea:	f7ff fc66 	bl	80017ba <LL_RCC_LSI1_IsReady>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d113      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001ef4:	f7ff fc3f 	bl	8001776 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef8:	f7ff f84e 	bl	8000f98 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f00:	f7ff f84a 	bl	8000f98 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e203      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f12:	f7ff fc52 	bl	80017ba <LL_RCC_LSI1_IsReady>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f1      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f1c:	f7ff fc5f 	bl	80017de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f83a 	bl	8000f98 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f28:	f7ff f836 	bl	8000f98 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1ef      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f3a:	f7ff fc72 	bl	8001822 <LL_RCC_LSI2_IsReady>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc7c 	bl	8001846 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f4e:	f7ff fc23 	bl	8001798 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7ff f821 	bl	8000f98 <HAL_GetTick>
 8001f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f5a:	f7ff f81d 	bl	8000f98 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1d6      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f6c:	f7ff fc25 	bl	80017ba <LL_RCC_LSI1_IsReady>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f1      	bne.n	8001f5a <HAL_RCC_OscConfig+0x31a>
 8001f76:	e051      	b.n	800201c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f78:	f7ff fbfd 	bl	8001776 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f80c 	bl	8000f98 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f82:	e00c      	b.n	8001f9e <HAL_RCC_OscConfig+0x35e>
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f8c:	f7ff f804 	bl	8000f98 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1bd      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f9e:	f7ff fc0c 	bl	80017ba <LL_RCC_LSI1_IsReady>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f1      	beq.n	8001f8c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fa8:	f7ff fc2a 	bl	8001800 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fae:	f7fe fff3 	bl	8000f98 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1ac      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fc0:	f7ff fc2f 	bl	8001822 <LL_RCC_LSI2_IsReady>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f1      	bne.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001fca:	e027      	b.n	800201c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fcc:	f7ff fc18 	bl	8001800 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe ffe2 	bl	8000f98 <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fd8:	f7fe ffde 	bl	8000f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e197      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fea:	f7ff fc1a 	bl	8001822 <LL_RCC_LSI2_IsReady>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f1      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001ff4:	f7ff fbd0 	bl	8001798 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe ffce 	bl	8000f98 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002000:	f7fe ffca 	bl	8000f98 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e183      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002012:	f7ff fbd2 	bl	80017ba <LL_RCC_LSI1_IsReady>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f1      	bne.n	8002000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d05b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4ba7      	ldr	r3, [pc, #668]	@ (80022c8 <HAL_RCC_OscConfig+0x688>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d114      	bne.n	800205e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002034:	f7ff fa70 	bl	8001518 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002038:	f7fe ffae 	bl	8000f98 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe ffaa 	bl	8000f98 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e163      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002052:	4b9d      	ldr	r3, [pc, #628]	@ (80022c8 <HAL_RCC_OscConfig+0x688>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_RCC_OscConfig+0x42c>
 8002066:	f7ff fb30 	bl	80016ca <LL_RCC_LSE_Enable>
 800206a:	e00c      	b.n	8002086 <HAL_RCC_OscConfig+0x446>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d104      	bne.n	800207e <HAL_RCC_OscConfig+0x43e>
 8002074:	f7ff fb4b 	bl	800170e <LL_RCC_LSE_EnableBypass>
 8002078:	f7ff fb27 	bl	80016ca <LL_RCC_LSE_Enable>
 800207c:	e003      	b.n	8002086 <HAL_RCC_OscConfig+0x446>
 800207e:	f7ff fb35 	bl	80016ec <LL_RCC_LSE_Disable>
 8002082:	f7ff fb55 	bl	8001730 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d014      	beq.n	80020b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe ff83 	bl	8000f98 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe ff7f 	bl	8000f98 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e136      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020ac:	f7ff fb51 	bl	8001752 <LL_RCC_LSE_IsReady>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCC_OscConfig+0x456>
 80020b6:	e013      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe ff6e 	bl	8000f98 <HAL_GetTick>
 80020bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe ff6a 	bl	8000f98 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e121      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020d6:	f7ff fb3c 	bl	8001752 <LL_RCC_LSE_IsReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ef      	bne.n	80020c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02c      	beq.n	8002146 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020f4:	f7ff fab5 	bl	8001662 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff4e 	bl	8000f98 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002100:	f7fe ff4a 	bl	8000f98 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e103      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002112:	f7ff fac8 	bl	80016a6 <LL_RCC_HSI48_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f1      	beq.n	8002100 <HAL_RCC_OscConfig+0x4c0>
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800211e:	f7ff fab1 	bl	8001684 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe ff39 	bl	8000f98 <HAL_GetTick>
 8002126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212a:	f7fe ff35 	bl	8000f98 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0ee      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800213c:	f7ff fab3 	bl	80016a6 <LL_RCC_HSI48_IsReady>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f1      	bne.n	800212a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80e4 	beq.w	8002318 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002150:	f7ff fc11 	bl	8001976 <LL_RCC_GetSysClkSource>
 8002154:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	2b02      	cmp	r3, #2
 8002164:	f040 80b4 	bne.w	80022d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0203 	and.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	429a      	cmp	r2, r3
 8002174:	d123      	bne.n	80021be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d11c      	bne.n	80021be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d114      	bne.n	80021be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d10d      	bne.n	80021be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d05d      	beq.n	800227a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d058      	beq.n	8002276 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0a1      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d6:	f7ff fc84 	bl	8001ae2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021da:	f7fe fedd 	bl	8000f98 <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe fed9 	bl	8000f98 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e092      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <HAL_RCC_OscConfig+0x68c>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800222e:	430a      	orrs	r2, r1
 8002230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002238:	f7ff fc44 	bl	8001ac4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800224a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7fe fea4 	bl	8000f98 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fea0 	bl	8000f98 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e059      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002274:	e050      	b.n	8002318 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e04f      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d147      	bne.n	8002318 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002288:	f7ff fc1c 	bl	8001ac4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229c:	f7fe fe7c 	bl	8000f98 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fe78 	bl	8000f98 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e031      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x664>
 80022c4:	e028      	b.n	8002318 <HAL_RCC_OscConfig+0x6d8>
 80022c6:	bf00      	nop
 80022c8:	58000400 	.word	0x58000400
 80022cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d01e      	beq.n	8002314 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	f7ff fc04 	bl	8001ae2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fe5d 	bl	8000f98 <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fe59 	bl	8000f98 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e012      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ef      	bne.n	80022e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_OscConfig+0x6e4>)
 800230e:	4013      	ands	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
 8002312:	e001      	b.n	8002318 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3734      	adds	r7, #52	@ 0x34
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	eefefffc 	.word	0xeefefffc

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e12d      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b98      	ldr	r3, [pc, #608]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d91b      	bls.n	8002382 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b95      	ldr	r3, [pc, #596]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4993      	ldr	r1, [pc, #588]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235a:	f7fe fe1d 	bl	8000f98 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	e008      	b.n	8002374 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002362:	f7fe fe19 	bl	8000f98 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e111      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002374:	4b8a      	ldr	r3, [pc, #552]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d1ef      	bne.n	8002362 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fafb 	bl	800198e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002398:	f7fe fdfe 	bl	8000f98 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023a0:	f7fe fdfa 	bl	8000f98 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0f2      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023b2:	f7ff fbe8 	bl	8001b86 <LL_RCC_IsActiveFlag_HPRE>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f1      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d016      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff faf2 	bl	80019b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fde1 	bl	8000f98 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023da:	f7fe fddd 	bl	8000f98 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0d5      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023ec:	f7ff fbdd 	bl	8001baa <LL_RCC_IsActiveFlag_C2HPRE>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f1      	beq.n	80023da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff faeb 	bl	80019e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800240c:	f7fe fdc4 	bl	8000f98 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002414:	f7fe fdc0 	bl	8000f98 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0b8      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002426:	f7ff fbd3 	bl	8001bd0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f1      	beq.n	8002414 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fae5 	bl	8001a10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002446:	f7fe fda7 	bl	8000f98 <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800244e:	f7fe fda3 	bl	8000f98 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09b      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002460:	f7ff fbc9 	bl	8001bf6 <LL_RCC_IsActiveFlag_PPRE1>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f1      	beq.n	800244e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d017      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fadb 	bl	8001a38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002482:	f7fe fd89 	bl	8000f98 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800248a:	f7fe fd85 	bl	8000f98 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e07d      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800249c:	f7ff fbbd 	bl	8001c1a <LL_RCC_IsActiveFlag_PPRE2>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d043      	beq.n	800253a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024ba:	f7ff f87b 	bl	80015b4 <LL_RCC_HSE_IsReady>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11e      	bne.n	8002502 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e067      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d106      	bne.n	80024de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024d0:	f7ff fb16 	bl	8001b00 <LL_RCC_PLL_IsReady>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e05c      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024e6:	f7ff f9e3 	bl	80018b0 <LL_RCC_MSI_IsReady>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e051      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024f4:	f7ff f88e 	bl	8001614 <LL_RCC_HSI_IsReady>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04a      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fa21 	bl	800194e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250c:	f7fe fd44 	bl	8000f98 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7fe fd40 	bl	8000f98 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e036      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	f7ff fa24 	bl	8001976 <LL_RCC_GetSysClkSource>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	429a      	cmp	r2, r3
 8002538:	d1ec      	bne.n	8002514 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d21b      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002548:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 0207 	bic.w	r2, r3, #7
 8002550:	4913      	ldr	r1, [pc, #76]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002558:	f7fe fd1e 	bl	8000f98 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	e008      	b.n	8002572 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002560:	f7fe fd1a 	bl	8000f98 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e012      	b.n	8002598 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d1ef      	bne.n	8002560 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002580:	f000 f880 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8002584:	4603      	mov	r3, r0
 8002586:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_RCC_ClockConfig+0x27c>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800258a:	f7fe fd11 	bl	8000fb0 <HAL_GetTickPrio>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fcb3 	bl	8000efc <HAL_InitTick>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58004000 	.word	0x58004000
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ae:	f7ff f9e2 	bl	8001976 <LL_RCC_GetSysClkSource>
 80025b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025ba:	f7ff f99e 	bl	80018fa <LL_RCC_MSI_GetRange>
 80025be:	4603      	mov	r3, r0
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e04b      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e045      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d10a      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025e2:	f7fe ffb7 	bl	8001554 <LL_RCC_HSE_IsEnabledDiv2>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_RCC_GetSysClockFreq+0xd4>)
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e03a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_RCC_GetSysClockFreq+0xd8>)
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e037      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025f8:	f7ff fab9 	bl	8001b6e <LL_RCC_PLL_GetMainSource>
 80025fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d003      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x64>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x6a>
 800260a:	e00d      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xd0>)
 800260e:	60bb      	str	r3, [r7, #8]
        break;
 8002610:	e015      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002612:	f7fe ff9f 	bl	8001554 <LL_RCC_HSE_IsEnabledDiv2>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_RCC_GetSysClockFreq+0xd4>)
 800261e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002620:	e00d      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002622:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002624:	60bb      	str	r3, [r7, #8]
        break;
 8002626:	e00a      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002628:	f7ff f967 	bl	80018fa <LL_RCC_MSI_GetRange>
 800262c:	4603      	mov	r3, r0
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	60bb      	str	r3, [r7, #8]
        break;
 800263c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800263e:	f7ff fa71 	bl	8001b24 <LL_RCC_PLL_GetN>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	fb03 f402 	mul.w	r4, r3, r2
 800264a:	f7ff fa84 	bl	8001b56 <LL_RCC_PLL_GetDivider>
 800264e:	4603      	mov	r3, r0
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	3301      	adds	r3, #1
 8002654:	fbb4 f4f3 	udiv	r4, r4, r3
 8002658:	f7ff fa71 	bl	8001b3e <LL_RCC_PLL_GetR>
 800265c:	4603      	mov	r3, r0
 800265e:	0f5b      	lsrs	r3, r3, #29
 8002660:	3301      	adds	r3, #1
 8002662:	fbb4 f3f3 	udiv	r3, r4, r3
 8002666:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}
 8002672:	bf00      	nop
 8002674:	080046b8 	.word	0x080046b8
 8002678:	00f42400 	.word	0x00f42400
 800267c:	003d0900 	.word	0x003d0900
 8002680:	007a1200 	.word	0x007a1200

08002684 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002684:	b598      	push	{r3, r4, r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002688:	f7ff ff8e 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800268c:	4604      	mov	r4, r0
 800268e:	f7ff f9e7 	bl	8001a60 <LL_RCC_GetAHBPrescaler>
 8002692:	4603      	mov	r3, r0
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a03      	ldr	r2, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd98      	pop	{r3, r4, r7, pc}
 80026a8:	08004658 	.word	0x08004658

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b598      	push	{r3, r4, r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b0:	f7ff ffe8 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f7ff f9ed 	bl	8001a94 <LL_RCC_GetAPB1Prescaler>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd98      	pop	{r3, r4, r7, pc}
 80026d4:	08004698 	.word	0x08004698

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b598      	push	{r3, r4, r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026dc:	f7ff ffd2 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026e0:	4604      	mov	r4, r0
 80026e2:	f7ff f9e3 	bl	8001aac <LL_RCC_GetAPB2Prescaler>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0adb      	lsrs	r3, r3, #11
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd98      	pop	{r3, r4, r7, pc}
 8002700:	08004698 	.word	0x08004698

08002704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002710:	d903      	bls.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e007      	b.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800272a:	f7ff f9a5 	bl	8001a78 <LL_RCC_GetAHB4Prescaler>
 800272e:	4603      	mov	r3, r0
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9c      	lsrs	r4, r3, #18
 800274e:	f7fe fef3 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002752:	4603      	mov	r3, r0
 8002754:	4619      	mov	r1, r3
 8002756:	4620      	mov	r0, r4
 8002758:	f000 f80c 	bl	8002774 <RCC_SetFlashLatency>
 800275c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop
 8002768:	080046b8 	.word	0x080046b8
 800276c:	08004658 	.word	0x08004658
 8002770:	431bde83 	.word	0x431bde83

08002774 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b093      	sub	sp, #76	@ 0x4c
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800277e:	4b37      	ldr	r3, [pc, #220]	@ (800285c <RCC_SetFlashLatency+0xe8>)
 8002780:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800278a:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <RCC_SetFlashLatency+0xec>)
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	ca07      	ldmia	r2, {r0, r1, r2}
 8002792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <RCC_SetFlashLatency+0xf0>)
 8002798:	f107 040c 	add.w	r4, r7, #12
 800279c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027a2:	2300      	movs	r3, #0
 80027a4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ac:	d11a      	bne.n	80027e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80027b2:	e013      	b.n	80027dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3348      	adds	r3, #72	@ 0x48
 80027ba:	443b      	add	r3, r7
 80027bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d807      	bhi.n	80027d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	3348      	adds	r3, #72	@ 0x48
 80027cc:	443b      	add	r3, r7
 80027ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027d2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80027d4:	e020      	b.n	8002818 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d8:	3301      	adds	r3, #1
 80027da:	643b      	str	r3, [r7, #64]	@ 0x40
 80027dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d9e8      	bls.n	80027b4 <RCC_SetFlashLatency+0x40>
 80027e2:	e019      	b.n	8002818 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e8:	e013      	b.n	8002812 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	3348      	adds	r3, #72	@ 0x48
 80027f0:	443b      	add	r3, r7
 80027f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d807      	bhi.n	800280c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	3348      	adds	r3, #72	@ 0x48
 8002802:	443b      	add	r3, r7
 8002804:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800280a:	e005      	b.n	8002818 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800280c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280e:	3301      	adds	r3, #1
 8002810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002814:	2b02      	cmp	r3, #2
 8002816:	d9e8      	bls.n	80027ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <RCC_SetFlashLatency+0xf4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 0207 	bic.w	r2, r3, #7
 8002820:	4911      	ldr	r1, [pc, #68]	@ (8002868 <RCC_SetFlashLatency+0xf4>)
 8002822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002828:	f7fe fbb6 	bl	8000f98 <HAL_GetTick>
 800282c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800282e:	e008      	b.n	8002842 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002830:	f7fe fbb2 	bl	8000f98 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e007      	b.n	8002852 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <RCC_SetFlashLatency+0xf4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800284c:	429a      	cmp	r2, r3
 800284e:	d1ef      	bne.n	8002830 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	374c      	adds	r7, #76	@ 0x4c
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	0800462c 	.word	0x0800462c
 8002860:	0800463c 	.word	0x0800463c
 8002864:	08004648 	.word	0x08004648
 8002868:	58004000 	.word	0x58004000

0800286c <LL_RCC_LSE_IsEnabled>:
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <LL_RCC_LSE_IsEnabled+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_RCC_LSE_IsEnabled+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_RCC_LSE_IsReady>:
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d101      	bne.n	80028a8 <LL_RCC_LSE_IsReady+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_RCC_LSE_IsReady+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_SetRFWKPClockSource>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_SetSMPSClockSource>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_RCC_SetSMPSPrescaler>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800291a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_SetUSARTClockSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_SetLPUARTClockSource>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_RCC_SetI2CClockSource>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_SetLPTIMClockSource>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_SetSAIClockSource>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_SetRNGClockSource>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_SetCLK48ClockSource>:
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_SetUSBClockSource>:
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffe3 	bl	8002a4e <LL_RCC_SetCLK48ClockSource>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <LL_RCC_SetADCClockSource>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_SetRTCClockSource>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_GetRTCClockSource>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_ForceBackupDomainReset>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_PLLSAI1_Enable>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b58:	6013      	str	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_PLLSAI1_Disable>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_PLLSAI1_IsReady>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d101      	bne.n	8002b9a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b088      	sub	sp, #32
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bae:	2300      	movs	r3, #0
 8002bb0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d034      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bca:	d021      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002bcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bd0:	d81b      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bd6:	d01d      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002bd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bdc:	d815      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d110      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bf8:	e00d      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f947 	bl	8002e92 <RCCEx_PLLSAI1_ConfigNP>
 8002c04:	4603      	mov	r3, r0
 8002c06:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c08:	e005      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77fb      	strb	r3, [r7, #31]
        break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fee8 	bl	80029f6 <LL_RCC_SetSAIClockSource>
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d046      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c38:	f7ff ff56 	bl	8002ae8 <LL_RCC_GetRTCClockSource>
 8002c3c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d03c      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c48:	f7fe fc66 	bl	8001518 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff30 	bl	8002abc <LL_RCC_SetRTCClockSource>
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c68:	f7ff ff4b 	bl	8002b02 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c6c:	f7ff ff5a 	bl	8002b24 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c88:	f7ff fdf0 	bl	800286c <LL_RCC_LSE_IsEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d114      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c92:	f7fe f981 	bl	8000f98 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe f97d 	bl	8000f98 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d902      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	77fb      	strb	r3, [r7, #31]
              break;
 8002cb0:	e004      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cb2:	f7ff fded 	bl	8002890 <LL_RCC_LSE_IsReady>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
 8002cbe:	77bb      	strb	r3, [r7, #30]
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fe2a 	bl	8002930 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe35 	bl	800295c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe5d 	bl	80029c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe52 	bl	80029c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fe2a 	bl	8002988 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe1f 	bl	8002988 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d022      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fe8d 	bl	8002a7a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d68:	d107      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d78:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d82:	d10b      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f8dd 	bl	8002f48 <RCCEx_PLLSAI1_ConfigNQ>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002d98:	7ffb      	ldrb	r3, [r7, #31]
 8002d9a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fe2a 	bl	8002a22 <LL_RCC_SetRNGClockSource>
 8002dce:	e00a      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff fe21 	bl	8002a22 <LL_RCC_SetRNGClockSource>
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fe34 	bl	8002a4e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002dee:	d107      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d022      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe3d 	bl	8002a90 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f8dd 	bl	8002ffe <RCCEx_PLLSAI1_ConfigNR>
 8002e44:	4603      	mov	r3, r0
 8002e46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fd26 	bl	80028b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fd45 	bl	8002908 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fd2c 	bl	80028e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002e88:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e9e:	f7ff fe61 	bl	8002b64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ea2:	f7fe f879 	bl	8000f98 <HAL_GetTick>
 8002ea6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ea8:	e009      	b.n	8002ebe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eaa:	f7fe f875 	bl	8000f98 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d902      	bls.n	8002ebe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e004      	b.n	8002ec8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ebe:	f7ff fe60 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d137      	bne.n	8002f3e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002efc:	f7ff fe23 	bl	8002b46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fe f84a 	bl	8000f98 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f06:	e009      	b.n	8002f1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f08:	f7fe f846 	bl	8000f98 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1a:	e004      	b.n	8002f26 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f1c:	f7ff fe31 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d1f0      	bne.n	8002f08 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f54:	f7ff fe06 	bl	8002b64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f58:	f7fe f81e 	bl	8000f98 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f5e:	e009      	b.n	8002f74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f60:	f7fe f81a 	bl	8000f98 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	73fb      	strb	r3, [r7, #15]
      break;
 8002f72:	e004      	b.n	8002f7e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f74:	f7ff fe05 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d137      	bne.n	8002ff4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fb2:	f7ff fdc8 	bl	8002b46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb6:	f7fd ffef 	bl	8000f98 <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fbc:	e009      	b.n	8002fd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fbe:	f7fd ffeb 	bl	8000f98 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d902      	bls.n	8002fd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	73fb      	strb	r3, [r7, #15]
        break;
 8002fd0:	e004      	b.n	8002fdc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fd2:	f7ff fdd6 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d1f0      	bne.n	8002fbe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800300a:	f7ff fdab 	bl	8002b64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800300e:	f7fd ffc3 	bl	8000f98 <HAL_GetTick>
 8003012:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003014:	e009      	b.n	800302a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003016:	f7fd ffbf 	bl	8000f98 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d902      	bls.n	800302a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800302a:	f7ff fdaa 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d137      	bne.n	80030aa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003068:	f7ff fd6d 	bl	8002b46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fd ff94 	bl	8000f98 <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003074:	f7fd ff90 	bl	8000f98 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
        break;
 8003086:	e004      	b.n	8003092 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003088:	f7ff fd7b 	bl	8002b82 <LL_RCC_PLLSAI1_IsReady>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1f0      	bne.n	8003074 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d108      	bne.n	80030aa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a6:	4313      	orrs	r3, r2
 80030a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e027      	b.n	8003116 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a5b      	ldrb	r3, [r3, #9]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fd8e 	bl	8000bf8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0120 	bic.w	r1, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0204 	orr.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7a1b      	ldrb	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003134:	2302      	movs	r3, #2
 8003136:	e044      	b.n	80031c2 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d133      	bne.n	80031b0 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800314e:	f7fd ff23 	bl	8000f98 <HAL_GetTick>
 8003152:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003154:	e018      	b.n	8003188 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003156:	f7fd ff1f 	bl	8000f98 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d911      	bls.n	8003188 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d00a      	beq.n	8003188 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01c      	b.n	80031c2 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d1df      	bne.n	8003156 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	725a      	strb	r2, [r3, #9]
 80031ae:	e004      	b.n	80031ba <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	721a      	strb	r2, [r3, #8]

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LL_RCC_GetUSARTClockSource>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4013      	ands	r3, r2
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_GetLPUARTClockSource>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4013      	ands	r3, r2
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e042      	b.n	80032a2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd0c 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fadf 	bl	8003818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8b4 	bl	80033c8 <UART_SetConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e01b      	b.n	80032a2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003278:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003288:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb5e 	bl	800395c <UART_CheckIdleState>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08a      	sub	sp, #40	@ 0x28
 80032ae:	af02      	add	r7, sp, #8
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d17b      	bne.n	80033bc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Transmit+0x26>
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e074      	b.n	80033be <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2221      	movs	r2, #33	@ 0x21
 80032e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e4:	f7fd fe58 	bl	8000f98 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003302:	d108      	bne.n	8003316 <HAL_UART_Transmit+0x6c>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e003      	b.n	800331e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800331e:	e030      	b.n	8003382 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2200      	movs	r2, #0
 8003328:	2180      	movs	r1, #128	@ 0x80
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fbc0 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e03d      	b.n	80033be <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	3302      	adds	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e007      	b.n	8003370 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3301      	adds	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1c8      	bne.n	8003320 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2140      	movs	r1, #64	@ 0x40
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fb89 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e006      	b.n	80033be <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b08c      	sub	sp, #48	@ 0x30
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4baf      	ldr	r3, [pc, #700]	@ (80036b4 <UART_SetConfig+0x2ec>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003400:	430b      	orrs	r3, r1
 8003402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4aa4      	ldr	r2, [pc, #656]	@ (80036b8 <UART_SetConfig+0x2f0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003430:	4313      	orrs	r3, r2
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800343e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	f023 010f 	bic.w	r1, r3, #15
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a95      	ldr	r2, [pc, #596]	@ (80036bc <UART_SetConfig+0x2f4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d125      	bne.n	80034b8 <UART_SetConfig+0xf0>
 800346c:	2003      	movs	r0, #3
 800346e:	f7ff feac 	bl	80031ca <LL_RCC_GetUSARTClockSource>
 8003472:	4603      	mov	r3, r0
 8003474:	2b03      	cmp	r3, #3
 8003476:	d81b      	bhi.n	80034b0 <UART_SetConfig+0xe8>
 8003478:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <UART_SetConfig+0xb8>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	08003491 	.word	0x08003491
 8003484:	080034a1 	.word	0x080034a1
 8003488:	08003499 	.word	0x08003499
 800348c:	080034a9 	.word	0x080034a9
 8003490:	2301      	movs	r3, #1
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003496:	e042      	b.n	800351e <UART_SetConfig+0x156>
 8003498:	2302      	movs	r3, #2
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800349e:	e03e      	b.n	800351e <UART_SetConfig+0x156>
 80034a0:	2304      	movs	r3, #4
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034a6:	e03a      	b.n	800351e <UART_SetConfig+0x156>
 80034a8:	2308      	movs	r3, #8
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ae:	e036      	b.n	800351e <UART_SetConfig+0x156>
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034b6:	e032      	b.n	800351e <UART_SetConfig+0x156>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7e      	ldr	r2, [pc, #504]	@ (80036b8 <UART_SetConfig+0x2f0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d12a      	bne.n	8003518 <UART_SetConfig+0x150>
 80034c2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80034c6:	f7ff fe90 	bl	80031ea <LL_RCC_GetLPUARTClockSource>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034d0:	d01a      	beq.n	8003508 <UART_SetConfig+0x140>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034d6:	d81b      	bhi.n	8003510 <UART_SetConfig+0x148>
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034dc:	d00c      	beq.n	80034f8 <UART_SetConfig+0x130>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e2:	d815      	bhi.n	8003510 <UART_SetConfig+0x148>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <UART_SetConfig+0x128>
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ec:	d008      	beq.n	8003500 <UART_SetConfig+0x138>
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x148>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f6:	e012      	b.n	800351e <UART_SetConfig+0x156>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034fe:	e00e      	b.n	800351e <UART_SetConfig+0x156>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003506:	e00a      	b.n	800351e <UART_SetConfig+0x156>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e006      	b.n	800351e <UART_SetConfig+0x156>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e002      	b.n	800351e <UART_SetConfig+0x156>
 8003518:	2310      	movs	r3, #16
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <UART_SetConfig+0x2f0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	f040 8097 	bne.w	8003658 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800352a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800352e:	2b08      	cmp	r3, #8
 8003530:	d823      	bhi.n	800357a <UART_SetConfig+0x1b2>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <UART_SetConfig+0x170>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800357b 	.word	0x0800357b
 8003540:	08003565 	.word	0x08003565
 8003544:	0800357b 	.word	0x0800357b
 8003548:	0800356b 	.word	0x0800356b
 800354c:	0800357b 	.word	0x0800357b
 8003550:	0800357b 	.word	0x0800357b
 8003554:	0800357b 	.word	0x0800357b
 8003558:	08003573 	.word	0x08003573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800355c:	f7ff f8a6 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003560:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003562:	e010      	b.n	8003586 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003564:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <UART_SetConfig+0x2f8>)
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356a:	f7ff f81d 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800356e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003570:	e009      	b.n	8003586 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003578:	e005      	b.n	8003586 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003584:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 812b 	beq.w	80037e4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	4a4c      	ldr	r2, [pc, #304]	@ (80036c4 <UART_SetConfig+0x2fc>)
 8003594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003598:	461a      	mov	r2, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d305      	bcc.n	80035be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d903      	bls.n	80035c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035c4:	e10e      	b.n	80037e4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	2200      	movs	r2, #0
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	60fa      	str	r2, [r7, #12]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	4a3c      	ldr	r2, [pc, #240]	@ (80036c4 <UART_SetConfig+0x2fc>)
 80035d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e8:	f7fc fe22 	bl	8000230 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	020b      	lsls	r3, r1, #8
 80035fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003602:	0202      	lsls	r2, r0, #8
 8003604:	6979      	ldr	r1, [r7, #20]
 8003606:	6849      	ldr	r1, [r1, #4]
 8003608:	0849      	lsrs	r1, r1, #1
 800360a:	2000      	movs	r0, #0
 800360c:	460c      	mov	r4, r1
 800360e:	4605      	mov	r5, r0
 8003610:	eb12 0804 	adds.w	r8, r2, r4
 8003614:	eb43 0905 	adc.w	r9, r3, r5
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	469a      	mov	sl, r3
 8003620:	4693      	mov	fp, r2
 8003622:	4652      	mov	r2, sl
 8003624:	465b      	mov	r3, fp
 8003626:	4640      	mov	r0, r8
 8003628:	4649      	mov	r1, r9
 800362a:	f7fc fe01 	bl	8000230 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4613      	mov	r3, r2
 8003634:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363c:	d308      	bcc.n	8003650 <UART_SetConfig+0x288>
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003644:	d204      	bcs.n	8003650 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	e0c9      	b.n	80037e4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003656:	e0c5      	b.n	80037e4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003660:	d16d      	bne.n	800373e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003662:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003666:	3b01      	subs	r3, #1
 8003668:	2b07      	cmp	r3, #7
 800366a:	d82d      	bhi.n	80036c8 <UART_SetConfig+0x300>
 800366c:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0x2ac>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003695 	.word	0x08003695
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036c9 	.word	0x080036c9
 8003680:	080036a3 	.word	0x080036a3
 8003684:	080036c9 	.word	0x080036c9
 8003688:	080036c9 	.word	0x080036c9
 800368c:	080036c9 	.word	0x080036c9
 8003690:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003694:	f7ff f820 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800369a:	e01b      	b.n	80036d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <UART_SetConfig+0x2f8>)
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036a0:	e018      	b.n	80036d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe ff81 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80036a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036a8:	e014      	b.n	80036d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036b0:	e010      	b.n	80036d4 <UART_SetConfig+0x30c>
 80036b2:	bf00      	nop
 80036b4:	cfff69f3 	.word	0xcfff69f3
 80036b8:	40008000 	.word	0x40008000
 80036bc:	40013800 	.word	0x40013800
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	080046f8 	.word	0x080046f8
      default:
        pclk = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8084 	beq.w	80037e4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003810 <UART_SetConfig+0x448>)
 80036e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ee:	005a      	lsls	r2, r3, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	441a      	add	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d916      	bls.n	8003736 <UART_SetConfig+0x36e>
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370e:	d212      	bcs.n	8003736 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	b29a      	uxth	r2, r3
 8003726:	8bfb      	ldrh	r3, [r7, #30]
 8003728:	4313      	orrs	r3, r2
 800372a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	8bfa      	ldrh	r2, [r7, #30]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e056      	b.n	80037e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800373c:	e052      	b.n	80037e4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003742:	3b01      	subs	r3, #1
 8003744:	2b07      	cmp	r3, #7
 8003746:	d822      	bhi.n	800378e <UART_SetConfig+0x3c6>
 8003748:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <UART_SetConfig+0x388>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003771 	.word	0x08003771
 8003754:	08003779 	.word	0x08003779
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800377f 	.word	0x0800377f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	0800378f 	.word	0x0800378f
 8003768:	0800378f 	.word	0x0800378f
 800376c:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe ffb2 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b26      	ldr	r3, [pc, #152]	@ (8003814 <UART_SetConfig+0x44c>)
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe ff13 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003782:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003798:	bf00      	nop
    }

    if (pclk != 0U)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003810 <UART_SetConfig+0x448>)
 80037a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037aa:	461a      	mov	r2, r3
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	441a      	add	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d909      	bls.n	80037de <UART_SetConfig+0x416>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d205      	bcs.n	80037de <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e002      	b.n	80037e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2200      	movs	r2, #0
 80037f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003800:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	@ 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380e:	bf00      	nop
 8003810:	080046f8 	.word	0x080046f8
 8003814:	00f42400 	.word	0x00f42400

08003818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003916:	d10a      	bne.n	800392e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b098      	sub	sp, #96	@ 0x60
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800396c:	f7fd fb14 	bl	8000f98 <HAL_GetTick>
 8003970:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d12f      	bne.n	80039e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f88e 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d022      	beq.n	80039e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e063      	b.n	8003aa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d149      	bne.n	8003a82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f857 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03c      	beq.n	8003a82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	623b      	str	r3, [r7, #32]
   return(result);
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e6      	bne.n	8003a08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a5a:	61fa      	str	r2, [r7, #28]
 8003a5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	617b      	str	r3, [r7, #20]
   return(result);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e012      	b.n	8003aa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3758      	adds	r7, #88	@ 0x58
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac0:	e04f      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d04b      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fd fa65 	bl	8000f98 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e04e      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d037      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d034      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d031      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d110      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f838 	bl	8003b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e029      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b3c:	d111      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f81e 	bl	8003b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d0a0      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b095      	sub	sp, #84	@ 0x54
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e6      	bne.n	8003b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d118      	bne.n	8003c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0310 	bic.w	r3, r3, #16
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6979      	ldr	r1, [r7, #20]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e6      	bne.n	8003c04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c4a:	bf00      	nop
 8003c4c:	3754      	adds	r7, #84	@ 0x54
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <sniprintf>:
 8003c58:	b40c      	push	{r2, r3}
 8003c5a:	b530      	push	{r4, r5, lr}
 8003c5c:	4b18      	ldr	r3, [pc, #96]	@ (8003cc0 <sniprintf+0x68>)
 8003c5e:	1e0c      	subs	r4, r1, #0
 8003c60:	681d      	ldr	r5, [r3, #0]
 8003c62:	b09d      	sub	sp, #116	@ 0x74
 8003c64:	da08      	bge.n	8003c78 <sniprintf+0x20>
 8003c66:	238b      	movs	r3, #139	@ 0x8b
 8003c68:	602b      	str	r3, [r5, #0]
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6e:	b01d      	add	sp, #116	@ 0x74
 8003c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c74:	b002      	add	sp, #8
 8003c76:	4770      	bx	lr
 8003c78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003c86:	bf14      	ite	ne
 8003c88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c8c:	4623      	moveq	r3, r4
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	9307      	str	r3, [sp, #28]
 8003c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c96:	9002      	str	r0, [sp, #8]
 8003c98:	9006      	str	r0, [sp, #24]
 8003c9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ca0:	ab21      	add	r3, sp, #132	@ 0x84
 8003ca2:	a902      	add	r1, sp, #8
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	f000 f994 	bl	8003fd4 <_svfiprintf_r>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	bfbc      	itt	lt
 8003cb0:	238b      	movlt	r3, #139	@ 0x8b
 8003cb2:	602b      	strlt	r3, [r5, #0]
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d0da      	beq.n	8003c6e <sniprintf+0x16>
 8003cb8:	9b02      	ldr	r3, [sp, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e7d6      	b.n	8003c6e <sniprintf+0x16>
 8003cc0:	20000018 	.word	0x20000018

08003cc4 <memset>:
 8003cc4:	4402      	add	r2, r0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d100      	bne.n	8003cce <memset+0xa>
 8003ccc:	4770      	bx	lr
 8003cce:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd2:	e7f9      	b.n	8003cc8 <memset+0x4>

08003cd4 <__errno>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	@ (8003cdc <__errno+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d18 <__libc_init_array+0x38>)
 8003ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d1c <__libc_init_array+0x3c>)
 8003ce6:	1b64      	subs	r4, r4, r5
 8003ce8:	10a4      	asrs	r4, r4, #2
 8003cea:	2600      	movs	r6, #0
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003d20 <__libc_init_array+0x40>)
 8003cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003d24 <__libc_init_array+0x44>)
 8003cf4:	f000 fc64 	bl	80045c0 <_init>
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	4798      	blx	r3
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	4798      	blx	r3
 8003d14:	3601      	adds	r6, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	0800474c 	.word	0x0800474c
 8003d1c:	0800474c 	.word	0x0800474c
 8003d20:	0800474c 	.word	0x0800474c
 8003d24:	08004750 	.word	0x08004750

08003d28 <__retarget_lock_acquire_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_release_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <_free_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4605      	mov	r5, r0
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d041      	beq.n	8003db8 <_free_r+0x8c>
 8003d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d38:	1f0c      	subs	r4, r1, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bfb8      	it	lt
 8003d3e:	18e4      	addlt	r4, r4, r3
 8003d40:	f000 f8e0 	bl	8003f04 <__malloc_lock>
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <_free_r+0x90>)
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	b933      	cbnz	r3, 8003d58 <_free_r+0x2c>
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	6014      	str	r4, [r2, #0]
 8003d4e:	4628      	mov	r0, r5
 8003d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d54:	f000 b8dc 	b.w	8003f10 <__malloc_unlock>
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	d908      	bls.n	8003d6e <_free_r+0x42>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	1821      	adds	r1, r4, r0
 8003d60:	428b      	cmp	r3, r1
 8003d62:	bf01      	itttt	eq
 8003d64:	6819      	ldreq	r1, [r3, #0]
 8003d66:	685b      	ldreq	r3, [r3, #4]
 8003d68:	1809      	addeq	r1, r1, r0
 8003d6a:	6021      	streq	r1, [r4, #0]
 8003d6c:	e7ed      	b.n	8003d4a <_free_r+0x1e>
 8003d6e:	461a      	mov	r2, r3
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b10b      	cbz	r3, 8003d78 <_free_r+0x4c>
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	d9fa      	bls.n	8003d6e <_free_r+0x42>
 8003d78:	6811      	ldr	r1, [r2, #0]
 8003d7a:	1850      	adds	r0, r2, r1
 8003d7c:	42a0      	cmp	r0, r4
 8003d7e:	d10b      	bne.n	8003d98 <_free_r+0x6c>
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	4401      	add	r1, r0
 8003d84:	1850      	adds	r0, r2, r1
 8003d86:	4283      	cmp	r3, r0
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	d1e0      	bne.n	8003d4e <_free_r+0x22>
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	6053      	str	r3, [r2, #4]
 8003d92:	4408      	add	r0, r1
 8003d94:	6010      	str	r0, [r2, #0]
 8003d96:	e7da      	b.n	8003d4e <_free_r+0x22>
 8003d98:	d902      	bls.n	8003da0 <_free_r+0x74>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	e7d6      	b.n	8003d4e <_free_r+0x22>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	1821      	adds	r1, r4, r0
 8003da4:	428b      	cmp	r3, r1
 8003da6:	bf04      	itt	eq
 8003da8:	6819      	ldreq	r1, [r3, #0]
 8003daa:	685b      	ldreq	r3, [r3, #4]
 8003dac:	6063      	str	r3, [r4, #4]
 8003dae:	bf04      	itt	eq
 8003db0:	1809      	addeq	r1, r1, r0
 8003db2:	6021      	streq	r1, [r4, #0]
 8003db4:	6054      	str	r4, [r2, #4]
 8003db6:	e7ca      	b.n	8003d4e <_free_r+0x22>
 8003db8:	bd38      	pop	{r3, r4, r5, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000314 	.word	0x20000314

08003dc0 <sbrk_aligned>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e00 <sbrk_aligned+0x40>)
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	6831      	ldr	r1, [r6, #0]
 8003dc8:	4605      	mov	r5, r0
 8003dca:	b911      	cbnz	r1, 8003dd2 <sbrk_aligned+0x12>
 8003dcc:	f000 fba4 	bl	8004518 <_sbrk_r>
 8003dd0:	6030      	str	r0, [r6, #0]
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 fb9f 	bl	8004518 <_sbrk_r>
 8003dda:	1c43      	adds	r3, r0, #1
 8003ddc:	d103      	bne.n	8003de6 <sbrk_aligned+0x26>
 8003dde:	f04f 34ff 	mov.w	r4, #4294967295
 8003de2:	4620      	mov	r0, r4
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	1cc4      	adds	r4, r0, #3
 8003de8:	f024 0403 	bic.w	r4, r4, #3
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d0f8      	beq.n	8003de2 <sbrk_aligned+0x22>
 8003df0:	1a21      	subs	r1, r4, r0
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 fb90 	bl	8004518 <_sbrk_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1f2      	bne.n	8003de2 <sbrk_aligned+0x22>
 8003dfc:	e7ef      	b.n	8003dde <sbrk_aligned+0x1e>
 8003dfe:	bf00      	nop
 8003e00:	20000310 	.word	0x20000310

08003e04 <_malloc_r>:
 8003e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e08:	1ccd      	adds	r5, r1, #3
 8003e0a:	f025 0503 	bic.w	r5, r5, #3
 8003e0e:	3508      	adds	r5, #8
 8003e10:	2d0c      	cmp	r5, #12
 8003e12:	bf38      	it	cc
 8003e14:	250c      	movcc	r5, #12
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	4606      	mov	r6, r0
 8003e1a:	db01      	blt.n	8003e20 <_malloc_r+0x1c>
 8003e1c:	42a9      	cmp	r1, r5
 8003e1e:	d904      	bls.n	8003e2a <_malloc_r+0x26>
 8003e20:	230c      	movs	r3, #12
 8003e22:	6033      	str	r3, [r6, #0]
 8003e24:	2000      	movs	r0, #0
 8003e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f00 <_malloc_r+0xfc>
 8003e2e:	f000 f869 	bl	8003f04 <__malloc_lock>
 8003e32:	f8d8 3000 	ldr.w	r3, [r8]
 8003e36:	461c      	mov	r4, r3
 8003e38:	bb44      	cbnz	r4, 8003e8c <_malloc_r+0x88>
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff ffbf 	bl	8003dc0 <sbrk_aligned>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	4604      	mov	r4, r0
 8003e46:	d158      	bne.n	8003efa <_malloc_r+0xf6>
 8003e48:	f8d8 4000 	ldr.w	r4, [r8]
 8003e4c:	4627      	mov	r7, r4
 8003e4e:	2f00      	cmp	r7, #0
 8003e50:	d143      	bne.n	8003eda <_malloc_r+0xd6>
 8003e52:	2c00      	cmp	r4, #0
 8003e54:	d04b      	beq.n	8003eee <_malloc_r+0xea>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	eb04 0903 	add.w	r9, r4, r3
 8003e60:	f000 fb5a 	bl	8004518 <_sbrk_r>
 8003e64:	4581      	cmp	r9, r0
 8003e66:	d142      	bne.n	8003eee <_malloc_r+0xea>
 8003e68:	6821      	ldr	r1, [r4, #0]
 8003e6a:	1a6d      	subs	r5, r5, r1
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f7ff ffa6 	bl	8003dc0 <sbrk_aligned>
 8003e74:	3001      	adds	r0, #1
 8003e76:	d03a      	beq.n	8003eee <_malloc_r+0xea>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	442b      	add	r3, r5
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	bb62      	cbnz	r2, 8003ee0 <_malloc_r+0xdc>
 8003e86:	f8c8 7000 	str.w	r7, [r8]
 8003e8a:	e00f      	b.n	8003eac <_malloc_r+0xa8>
 8003e8c:	6822      	ldr	r2, [r4, #0]
 8003e8e:	1b52      	subs	r2, r2, r5
 8003e90:	d420      	bmi.n	8003ed4 <_malloc_r+0xd0>
 8003e92:	2a0b      	cmp	r2, #11
 8003e94:	d917      	bls.n	8003ec6 <_malloc_r+0xc2>
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	6025      	str	r5, [r4, #0]
 8003e9c:	bf18      	it	ne
 8003e9e:	6059      	strne	r1, [r3, #4]
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	bf08      	it	eq
 8003ea4:	f8c8 1000 	streq.w	r1, [r8]
 8003ea8:	5162      	str	r2, [r4, r5]
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f82f 	bl	8003f10 <__malloc_unlock>
 8003eb2:	f104 000b 	add.w	r0, r4, #11
 8003eb6:	1d23      	adds	r3, r4, #4
 8003eb8:	f020 0007 	bic.w	r0, r0, #7
 8003ebc:	1ac2      	subs	r2, r0, r3
 8003ebe:	bf1c      	itt	ne
 8003ec0:	1a1b      	subne	r3, r3, r0
 8003ec2:	50a3      	strne	r3, [r4, r2]
 8003ec4:	e7af      	b.n	8003e26 <_malloc_r+0x22>
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	bf0c      	ite	eq
 8003ecc:	f8c8 2000 	streq.w	r2, [r8]
 8003ed0:	605a      	strne	r2, [r3, #4]
 8003ed2:	e7eb      	b.n	8003eac <_malloc_r+0xa8>
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	6864      	ldr	r4, [r4, #4]
 8003ed8:	e7ae      	b.n	8003e38 <_malloc_r+0x34>
 8003eda:	463c      	mov	r4, r7
 8003edc:	687f      	ldr	r7, [r7, #4]
 8003ede:	e7b6      	b.n	8003e4e <_malloc_r+0x4a>
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d1fb      	bne.n	8003ee0 <_malloc_r+0xdc>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6053      	str	r3, [r2, #4]
 8003eec:	e7de      	b.n	8003eac <_malloc_r+0xa8>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 f80c 	bl	8003f10 <__malloc_unlock>
 8003ef8:	e794      	b.n	8003e24 <_malloc_r+0x20>
 8003efa:	6005      	str	r5, [r0, #0]
 8003efc:	e7d6      	b.n	8003eac <_malloc_r+0xa8>
 8003efe:	bf00      	nop
 8003f00:	20000314 	.word	0x20000314

08003f04 <__malloc_lock>:
 8003f04:	4801      	ldr	r0, [pc, #4]	@ (8003f0c <__malloc_lock+0x8>)
 8003f06:	f7ff bf0f 	b.w	8003d28 <__retarget_lock_acquire_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	2000030c 	.word	0x2000030c

08003f10 <__malloc_unlock>:
 8003f10:	4801      	ldr	r0, [pc, #4]	@ (8003f18 <__malloc_unlock+0x8>)
 8003f12:	f7ff bf0a 	b.w	8003d2a <__retarget_lock_release_recursive>
 8003f16:	bf00      	nop
 8003f18:	2000030c 	.word	0x2000030c

08003f1c <__ssputs_r>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	688e      	ldr	r6, [r1, #8]
 8003f22:	461f      	mov	r7, r3
 8003f24:	42be      	cmp	r6, r7
 8003f26:	680b      	ldr	r3, [r1, #0]
 8003f28:	4682      	mov	sl, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4690      	mov	r8, r2
 8003f2e:	d82d      	bhi.n	8003f8c <__ssputs_r+0x70>
 8003f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f38:	d026      	beq.n	8003f88 <__ssputs_r+0x6c>
 8003f3a:	6965      	ldr	r5, [r4, #20]
 8003f3c:	6909      	ldr	r1, [r1, #16]
 8003f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f42:	eba3 0901 	sub.w	r9, r3, r1
 8003f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f4a:	1c7b      	adds	r3, r7, #1
 8003f4c:	444b      	add	r3, r9
 8003f4e:	106d      	asrs	r5, r5, #1
 8003f50:	429d      	cmp	r5, r3
 8003f52:	bf38      	it	cc
 8003f54:	461d      	movcc	r5, r3
 8003f56:	0553      	lsls	r3, r2, #21
 8003f58:	d527      	bpl.n	8003faa <__ssputs_r+0x8e>
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7ff ff52 	bl	8003e04 <_malloc_r>
 8003f60:	4606      	mov	r6, r0
 8003f62:	b360      	cbz	r0, 8003fbe <__ssputs_r+0xa2>
 8003f64:	6921      	ldr	r1, [r4, #16]
 8003f66:	464a      	mov	r2, r9
 8003f68:	f000 fae6 	bl	8004538 <memcpy>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	6126      	str	r6, [r4, #16]
 8003f7a:	6165      	str	r5, [r4, #20]
 8003f7c:	444e      	add	r6, r9
 8003f7e:	eba5 0509 	sub.w	r5, r5, r9
 8003f82:	6026      	str	r6, [r4, #0]
 8003f84:	60a5      	str	r5, [r4, #8]
 8003f86:	463e      	mov	r6, r7
 8003f88:	42be      	cmp	r6, r7
 8003f8a:	d900      	bls.n	8003f8e <__ssputs_r+0x72>
 8003f8c:	463e      	mov	r6, r7
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	4632      	mov	r2, r6
 8003f92:	4641      	mov	r1, r8
 8003f94:	f000 faa6 	bl	80044e4 <memmove>
 8003f98:	68a3      	ldr	r3, [r4, #8]
 8003f9a:	1b9b      	subs	r3, r3, r6
 8003f9c:	60a3      	str	r3, [r4, #8]
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	4433      	add	r3, r6
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003faa:	462a      	mov	r2, r5
 8003fac:	f000 fad2 	bl	8004554 <_realloc_r>
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d1e0      	bne.n	8003f78 <__ssputs_r+0x5c>
 8003fb6:	6921      	ldr	r1, [r4, #16]
 8003fb8:	4650      	mov	r0, sl
 8003fba:	f7ff feb7 	bl	8003d2c <_free_r>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	f8ca 3000 	str.w	r3, [sl]
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	e7e9      	b.n	8003fa6 <__ssputs_r+0x8a>
	...

08003fd4 <_svfiprintf_r>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	4698      	mov	r8, r3
 8003fda:	898b      	ldrh	r3, [r1, #12]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	b09d      	sub	sp, #116	@ 0x74
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	d510      	bpl.n	800400a <_svfiprintf_r+0x36>
 8003fe8:	690b      	ldr	r3, [r1, #16]
 8003fea:	b973      	cbnz	r3, 800400a <_svfiprintf_r+0x36>
 8003fec:	2140      	movs	r1, #64	@ 0x40
 8003fee:	f7ff ff09 	bl	8003e04 <_malloc_r>
 8003ff2:	6028      	str	r0, [r5, #0]
 8003ff4:	6128      	str	r0, [r5, #16]
 8003ff6:	b930      	cbnz	r0, 8004006 <_svfiprintf_r+0x32>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	b01d      	add	sp, #116	@ 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	2340      	movs	r3, #64	@ 0x40
 8004008:	616b      	str	r3, [r5, #20]
 800400a:	2300      	movs	r3, #0
 800400c:	9309      	str	r3, [sp, #36]	@ 0x24
 800400e:	2320      	movs	r3, #32
 8004010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004014:	f8cd 800c 	str.w	r8, [sp, #12]
 8004018:	2330      	movs	r3, #48	@ 0x30
 800401a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041b8 <_svfiprintf_r+0x1e4>
 800401e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004022:	f04f 0901 	mov.w	r9, #1
 8004026:	4623      	mov	r3, r4
 8004028:	469a      	mov	sl, r3
 800402a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402e:	b10a      	cbz	r2, 8004034 <_svfiprintf_r+0x60>
 8004030:	2a25      	cmp	r2, #37	@ 0x25
 8004032:	d1f9      	bne.n	8004028 <_svfiprintf_r+0x54>
 8004034:	ebba 0b04 	subs.w	fp, sl, r4
 8004038:	d00b      	beq.n	8004052 <_svfiprintf_r+0x7e>
 800403a:	465b      	mov	r3, fp
 800403c:	4622      	mov	r2, r4
 800403e:	4629      	mov	r1, r5
 8004040:	4638      	mov	r0, r7
 8004042:	f7ff ff6b 	bl	8003f1c <__ssputs_r>
 8004046:	3001      	adds	r0, #1
 8004048:	f000 80a7 	beq.w	800419a <_svfiprintf_r+0x1c6>
 800404c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800404e:	445a      	add	r2, fp
 8004050:	9209      	str	r2, [sp, #36]	@ 0x24
 8004052:	f89a 3000 	ldrb.w	r3, [sl]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 809f 	beq.w	800419a <_svfiprintf_r+0x1c6>
 800405c:	2300      	movs	r3, #0
 800405e:	f04f 32ff 	mov.w	r2, #4294967295
 8004062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004066:	f10a 0a01 	add.w	sl, sl, #1
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	9307      	str	r3, [sp, #28]
 800406e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004072:	931a      	str	r3, [sp, #104]	@ 0x68
 8004074:	4654      	mov	r4, sl
 8004076:	2205      	movs	r2, #5
 8004078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407c:	484e      	ldr	r0, [pc, #312]	@ (80041b8 <_svfiprintf_r+0x1e4>)
 800407e:	f7fc f887 	bl	8000190 <memchr>
 8004082:	9a04      	ldr	r2, [sp, #16]
 8004084:	b9d8      	cbnz	r0, 80040be <_svfiprintf_r+0xea>
 8004086:	06d0      	lsls	r0, r2, #27
 8004088:	bf44      	itt	mi
 800408a:	2320      	movmi	r3, #32
 800408c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004090:	0711      	lsls	r1, r2, #28
 8004092:	bf44      	itt	mi
 8004094:	232b      	movmi	r3, #43	@ 0x2b
 8004096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b2a      	cmp	r3, #42	@ 0x2a
 80040a0:	d015      	beq.n	80040ce <_svfiprintf_r+0xfa>
 80040a2:	9a07      	ldr	r2, [sp, #28]
 80040a4:	4654      	mov	r4, sl
 80040a6:	2000      	movs	r0, #0
 80040a8:	f04f 0c0a 	mov.w	ip, #10
 80040ac:	4621      	mov	r1, r4
 80040ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b2:	3b30      	subs	r3, #48	@ 0x30
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d94b      	bls.n	8004150 <_svfiprintf_r+0x17c>
 80040b8:	b1b0      	cbz	r0, 80040e8 <_svfiprintf_r+0x114>
 80040ba:	9207      	str	r2, [sp, #28]
 80040bc:	e014      	b.n	80040e8 <_svfiprintf_r+0x114>
 80040be:	eba0 0308 	sub.w	r3, r0, r8
 80040c2:	fa09 f303 	lsl.w	r3, r9, r3
 80040c6:	4313      	orrs	r3, r2
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	46a2      	mov	sl, r4
 80040cc:	e7d2      	b.n	8004074 <_svfiprintf_r+0xa0>
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	1d19      	adds	r1, r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	9103      	str	r1, [sp, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bfbb      	ittet	lt
 80040da:	425b      	neglt	r3, r3
 80040dc:	f042 0202 	orrlt.w	r2, r2, #2
 80040e0:	9307      	strge	r3, [sp, #28]
 80040e2:	9307      	strlt	r3, [sp, #28]
 80040e4:	bfb8      	it	lt
 80040e6:	9204      	strlt	r2, [sp, #16]
 80040e8:	7823      	ldrb	r3, [r4, #0]
 80040ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80040ec:	d10a      	bne.n	8004104 <_svfiprintf_r+0x130>
 80040ee:	7863      	ldrb	r3, [r4, #1]
 80040f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f2:	d132      	bne.n	800415a <_svfiprintf_r+0x186>
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	9203      	str	r2, [sp, #12]
 80040fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004100:	3402      	adds	r4, #2
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041c8 <_svfiprintf_r+0x1f4>
 8004108:	7821      	ldrb	r1, [r4, #0]
 800410a:	2203      	movs	r2, #3
 800410c:	4650      	mov	r0, sl
 800410e:	f7fc f83f 	bl	8000190 <memchr>
 8004112:	b138      	cbz	r0, 8004124 <_svfiprintf_r+0x150>
 8004114:	9b04      	ldr	r3, [sp, #16]
 8004116:	eba0 000a 	sub.w	r0, r0, sl
 800411a:	2240      	movs	r2, #64	@ 0x40
 800411c:	4082      	lsls	r2, r0
 800411e:	4313      	orrs	r3, r2
 8004120:	3401      	adds	r4, #1
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004128:	4824      	ldr	r0, [pc, #144]	@ (80041bc <_svfiprintf_r+0x1e8>)
 800412a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800412e:	2206      	movs	r2, #6
 8004130:	f7fc f82e 	bl	8000190 <memchr>
 8004134:	2800      	cmp	r0, #0
 8004136:	d036      	beq.n	80041a6 <_svfiprintf_r+0x1d2>
 8004138:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <_svfiprintf_r+0x1ec>)
 800413a:	bb1b      	cbnz	r3, 8004184 <_svfiprintf_r+0x1b0>
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	3307      	adds	r3, #7
 8004140:	f023 0307 	bic.w	r3, r3, #7
 8004144:	3308      	adds	r3, #8
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800414a:	4433      	add	r3, r6
 800414c:	9309      	str	r3, [sp, #36]	@ 0x24
 800414e:	e76a      	b.n	8004026 <_svfiprintf_r+0x52>
 8004150:	fb0c 3202 	mla	r2, ip, r2, r3
 8004154:	460c      	mov	r4, r1
 8004156:	2001      	movs	r0, #1
 8004158:	e7a8      	b.n	80040ac <_svfiprintf_r+0xd8>
 800415a:	2300      	movs	r3, #0
 800415c:	3401      	adds	r4, #1
 800415e:	9305      	str	r3, [sp, #20]
 8004160:	4619      	mov	r1, r3
 8004162:	f04f 0c0a 	mov.w	ip, #10
 8004166:	4620      	mov	r0, r4
 8004168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800416c:	3a30      	subs	r2, #48	@ 0x30
 800416e:	2a09      	cmp	r2, #9
 8004170:	d903      	bls.n	800417a <_svfiprintf_r+0x1a6>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0c6      	beq.n	8004104 <_svfiprintf_r+0x130>
 8004176:	9105      	str	r1, [sp, #20]
 8004178:	e7c4      	b.n	8004104 <_svfiprintf_r+0x130>
 800417a:	fb0c 2101 	mla	r1, ip, r1, r2
 800417e:	4604      	mov	r4, r0
 8004180:	2301      	movs	r3, #1
 8004182:	e7f0      	b.n	8004166 <_svfiprintf_r+0x192>
 8004184:	ab03      	add	r3, sp, #12
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	462a      	mov	r2, r5
 800418a:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <_svfiprintf_r+0x1f0>)
 800418c:	a904      	add	r1, sp, #16
 800418e:	4638      	mov	r0, r7
 8004190:	f3af 8000 	nop.w
 8004194:	1c42      	adds	r2, r0, #1
 8004196:	4606      	mov	r6, r0
 8004198:	d1d6      	bne.n	8004148 <_svfiprintf_r+0x174>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	065b      	lsls	r3, r3, #25
 800419e:	f53f af2d 	bmi.w	8003ffc <_svfiprintf_r+0x28>
 80041a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041a4:	e72c      	b.n	8004000 <_svfiprintf_r+0x2c>
 80041a6:	ab03      	add	r3, sp, #12
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	462a      	mov	r2, r5
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <_svfiprintf_r+0x1f0>)
 80041ae:	a904      	add	r1, sp, #16
 80041b0:	4638      	mov	r0, r7
 80041b2:	f000 f879 	bl	80042a8 <_printf_i>
 80041b6:	e7ed      	b.n	8004194 <_svfiprintf_r+0x1c0>
 80041b8:	08004710 	.word	0x08004710
 80041bc:	0800471a 	.word	0x0800471a
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f1d 	.word	0x08003f1d
 80041c8:	08004716 	.word	0x08004716

080041cc <_printf_common>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	4616      	mov	r6, r2
 80041d2:	4698      	mov	r8, r3
 80041d4:	688a      	ldr	r2, [r1, #8]
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041dc:	4293      	cmp	r3, r2
 80041de:	bfb8      	it	lt
 80041e0:	4613      	movlt	r3, r2
 80041e2:	6033      	str	r3, [r6, #0]
 80041e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041e8:	4607      	mov	r7, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	b10a      	cbz	r2, 80041f2 <_printf_common+0x26>
 80041ee:	3301      	adds	r3, #1
 80041f0:	6033      	str	r3, [r6, #0]
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	0699      	lsls	r1, r3, #26
 80041f6:	bf42      	ittt	mi
 80041f8:	6833      	ldrmi	r3, [r6, #0]
 80041fa:	3302      	addmi	r3, #2
 80041fc:	6033      	strmi	r3, [r6, #0]
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	f015 0506 	ands.w	r5, r5, #6
 8004204:	d106      	bne.n	8004214 <_printf_common+0x48>
 8004206:	f104 0a19 	add.w	sl, r4, #25
 800420a:	68e3      	ldr	r3, [r4, #12]
 800420c:	6832      	ldr	r2, [r6, #0]
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	42ab      	cmp	r3, r5
 8004212:	dc26      	bgt.n	8004262 <_printf_common+0x96>
 8004214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	3b00      	subs	r3, #0
 800421c:	bf18      	it	ne
 800421e:	2301      	movne	r3, #1
 8004220:	0692      	lsls	r2, r2, #26
 8004222:	d42b      	bmi.n	800427c <_printf_common+0xb0>
 8004224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004228:	4641      	mov	r1, r8
 800422a:	4638      	mov	r0, r7
 800422c:	47c8      	blx	r9
 800422e:	3001      	adds	r0, #1
 8004230:	d01e      	beq.n	8004270 <_printf_common+0xa4>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	6922      	ldr	r2, [r4, #16]
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	2b04      	cmp	r3, #4
 800423c:	bf02      	ittt	eq
 800423e:	68e5      	ldreq	r5, [r4, #12]
 8004240:	6833      	ldreq	r3, [r6, #0]
 8004242:	1aed      	subeq	r5, r5, r3
 8004244:	68a3      	ldr	r3, [r4, #8]
 8004246:	bf0c      	ite	eq
 8004248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800424c:	2500      	movne	r5, #0
 800424e:	4293      	cmp	r3, r2
 8004250:	bfc4      	itt	gt
 8004252:	1a9b      	subgt	r3, r3, r2
 8004254:	18ed      	addgt	r5, r5, r3
 8004256:	2600      	movs	r6, #0
 8004258:	341a      	adds	r4, #26
 800425a:	42b5      	cmp	r5, r6
 800425c:	d11a      	bne.n	8004294 <_printf_common+0xc8>
 800425e:	2000      	movs	r0, #0
 8004260:	e008      	b.n	8004274 <_printf_common+0xa8>
 8004262:	2301      	movs	r3, #1
 8004264:	4652      	mov	r2, sl
 8004266:	4641      	mov	r1, r8
 8004268:	4638      	mov	r0, r7
 800426a:	47c8      	blx	r9
 800426c:	3001      	adds	r0, #1
 800426e:	d103      	bne.n	8004278 <_printf_common+0xac>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004278:	3501      	adds	r5, #1
 800427a:	e7c6      	b.n	800420a <_printf_common+0x3e>
 800427c:	18e1      	adds	r1, r4, r3
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	2030      	movs	r0, #48	@ 0x30
 8004282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004286:	4422      	add	r2, r4
 8004288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800428c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004290:	3302      	adds	r3, #2
 8004292:	e7c7      	b.n	8004224 <_printf_common+0x58>
 8004294:	2301      	movs	r3, #1
 8004296:	4622      	mov	r2, r4
 8004298:	4641      	mov	r1, r8
 800429a:	4638      	mov	r0, r7
 800429c:	47c8      	blx	r9
 800429e:	3001      	adds	r0, #1
 80042a0:	d0e6      	beq.n	8004270 <_printf_common+0xa4>
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7d9      	b.n	800425a <_printf_common+0x8e>
	...

080042a8 <_printf_i>:
 80042a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	7e0f      	ldrb	r7, [r1, #24]
 80042ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042b0:	2f78      	cmp	r7, #120	@ 0x78
 80042b2:	4691      	mov	r9, r2
 80042b4:	4680      	mov	r8, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	469a      	mov	sl, r3
 80042ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042be:	d807      	bhi.n	80042d0 <_printf_i+0x28>
 80042c0:	2f62      	cmp	r7, #98	@ 0x62
 80042c2:	d80a      	bhi.n	80042da <_printf_i+0x32>
 80042c4:	2f00      	cmp	r7, #0
 80042c6:	f000 80d1 	beq.w	800446c <_printf_i+0x1c4>
 80042ca:	2f58      	cmp	r7, #88	@ 0x58
 80042cc:	f000 80b8 	beq.w	8004440 <_printf_i+0x198>
 80042d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042d8:	e03a      	b.n	8004350 <_printf_i+0xa8>
 80042da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042de:	2b15      	cmp	r3, #21
 80042e0:	d8f6      	bhi.n	80042d0 <_printf_i+0x28>
 80042e2:	a101      	add	r1, pc, #4	@ (adr r1, 80042e8 <_printf_i+0x40>)
 80042e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042e8:	08004341 	.word	0x08004341
 80042ec:	08004355 	.word	0x08004355
 80042f0:	080042d1 	.word	0x080042d1
 80042f4:	080042d1 	.word	0x080042d1
 80042f8:	080042d1 	.word	0x080042d1
 80042fc:	080042d1 	.word	0x080042d1
 8004300:	08004355 	.word	0x08004355
 8004304:	080042d1 	.word	0x080042d1
 8004308:	080042d1 	.word	0x080042d1
 800430c:	080042d1 	.word	0x080042d1
 8004310:	080042d1 	.word	0x080042d1
 8004314:	08004453 	.word	0x08004453
 8004318:	0800437f 	.word	0x0800437f
 800431c:	0800440d 	.word	0x0800440d
 8004320:	080042d1 	.word	0x080042d1
 8004324:	080042d1 	.word	0x080042d1
 8004328:	08004475 	.word	0x08004475
 800432c:	080042d1 	.word	0x080042d1
 8004330:	0800437f 	.word	0x0800437f
 8004334:	080042d1 	.word	0x080042d1
 8004338:	080042d1 	.word	0x080042d1
 800433c:	08004415 	.word	0x08004415
 8004340:	6833      	ldr	r3, [r6, #0]
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6032      	str	r2, [r6, #0]
 8004348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800434c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004350:	2301      	movs	r3, #1
 8004352:	e09c      	b.n	800448e <_printf_i+0x1e6>
 8004354:	6833      	ldr	r3, [r6, #0]
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	1d19      	adds	r1, r3, #4
 800435a:	6031      	str	r1, [r6, #0]
 800435c:	0606      	lsls	r6, r0, #24
 800435e:	d501      	bpl.n	8004364 <_printf_i+0xbc>
 8004360:	681d      	ldr	r5, [r3, #0]
 8004362:	e003      	b.n	800436c <_printf_i+0xc4>
 8004364:	0645      	lsls	r5, r0, #25
 8004366:	d5fb      	bpl.n	8004360 <_printf_i+0xb8>
 8004368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800436c:	2d00      	cmp	r5, #0
 800436e:	da03      	bge.n	8004378 <_printf_i+0xd0>
 8004370:	232d      	movs	r3, #45	@ 0x2d
 8004372:	426d      	negs	r5, r5
 8004374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004378:	4858      	ldr	r0, [pc, #352]	@ (80044dc <_printf_i+0x234>)
 800437a:	230a      	movs	r3, #10
 800437c:	e011      	b.n	80043a2 <_printf_i+0xfa>
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	0608      	lsls	r0, r1, #24
 8004384:	f853 5b04 	ldr.w	r5, [r3], #4
 8004388:	d402      	bmi.n	8004390 <_printf_i+0xe8>
 800438a:	0649      	lsls	r1, r1, #25
 800438c:	bf48      	it	mi
 800438e:	b2ad      	uxthmi	r5, r5
 8004390:	2f6f      	cmp	r7, #111	@ 0x6f
 8004392:	4852      	ldr	r0, [pc, #328]	@ (80044dc <_printf_i+0x234>)
 8004394:	6033      	str	r3, [r6, #0]
 8004396:	bf14      	ite	ne
 8004398:	230a      	movne	r3, #10
 800439a:	2308      	moveq	r3, #8
 800439c:	2100      	movs	r1, #0
 800439e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043a2:	6866      	ldr	r6, [r4, #4]
 80043a4:	60a6      	str	r6, [r4, #8]
 80043a6:	2e00      	cmp	r6, #0
 80043a8:	db05      	blt.n	80043b6 <_printf_i+0x10e>
 80043aa:	6821      	ldr	r1, [r4, #0]
 80043ac:	432e      	orrs	r6, r5
 80043ae:	f021 0104 	bic.w	r1, r1, #4
 80043b2:	6021      	str	r1, [r4, #0]
 80043b4:	d04b      	beq.n	800444e <_printf_i+0x1a6>
 80043b6:	4616      	mov	r6, r2
 80043b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043bc:	fb03 5711 	mls	r7, r3, r1, r5
 80043c0:	5dc7      	ldrb	r7, [r0, r7]
 80043c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c6:	462f      	mov	r7, r5
 80043c8:	42bb      	cmp	r3, r7
 80043ca:	460d      	mov	r5, r1
 80043cc:	d9f4      	bls.n	80043b8 <_printf_i+0x110>
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d10b      	bne.n	80043ea <_printf_i+0x142>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	07df      	lsls	r7, r3, #31
 80043d6:	d508      	bpl.n	80043ea <_printf_i+0x142>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	6861      	ldr	r1, [r4, #4]
 80043dc:	4299      	cmp	r1, r3
 80043de:	bfde      	ittt	le
 80043e0:	2330      	movle	r3, #48	@ 0x30
 80043e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043ea:	1b92      	subs	r2, r2, r6
 80043ec:	6122      	str	r2, [r4, #16]
 80043ee:	f8cd a000 	str.w	sl, [sp]
 80043f2:	464b      	mov	r3, r9
 80043f4:	aa03      	add	r2, sp, #12
 80043f6:	4621      	mov	r1, r4
 80043f8:	4640      	mov	r0, r8
 80043fa:	f7ff fee7 	bl	80041cc <_printf_common>
 80043fe:	3001      	adds	r0, #1
 8004400:	d14a      	bne.n	8004498 <_printf_i+0x1f0>
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	b004      	add	sp, #16
 8004408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	f043 0320 	orr.w	r3, r3, #32
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	4832      	ldr	r0, [pc, #200]	@ (80044e0 <_printf_i+0x238>)
 8004416:	2778      	movs	r7, #120	@ 0x78
 8004418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	6831      	ldr	r1, [r6, #0]
 8004420:	061f      	lsls	r7, r3, #24
 8004422:	f851 5b04 	ldr.w	r5, [r1], #4
 8004426:	d402      	bmi.n	800442e <_printf_i+0x186>
 8004428:	065f      	lsls	r7, r3, #25
 800442a:	bf48      	it	mi
 800442c:	b2ad      	uxthmi	r5, r5
 800442e:	6031      	str	r1, [r6, #0]
 8004430:	07d9      	lsls	r1, r3, #31
 8004432:	bf44      	itt	mi
 8004434:	f043 0320 	orrmi.w	r3, r3, #32
 8004438:	6023      	strmi	r3, [r4, #0]
 800443a:	b11d      	cbz	r5, 8004444 <_printf_i+0x19c>
 800443c:	2310      	movs	r3, #16
 800443e:	e7ad      	b.n	800439c <_printf_i+0xf4>
 8004440:	4826      	ldr	r0, [pc, #152]	@ (80044dc <_printf_i+0x234>)
 8004442:	e7e9      	b.n	8004418 <_printf_i+0x170>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	e7f6      	b.n	800443c <_printf_i+0x194>
 800444e:	4616      	mov	r6, r2
 8004450:	e7bd      	b.n	80043ce <_printf_i+0x126>
 8004452:	6833      	ldr	r3, [r6, #0]
 8004454:	6825      	ldr	r5, [r4, #0]
 8004456:	6961      	ldr	r1, [r4, #20]
 8004458:	1d18      	adds	r0, r3, #4
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	062e      	lsls	r6, r5, #24
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	d501      	bpl.n	8004466 <_printf_i+0x1be>
 8004462:	6019      	str	r1, [r3, #0]
 8004464:	e002      	b.n	800446c <_printf_i+0x1c4>
 8004466:	0668      	lsls	r0, r5, #25
 8004468:	d5fb      	bpl.n	8004462 <_printf_i+0x1ba>
 800446a:	8019      	strh	r1, [r3, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	4616      	mov	r6, r2
 8004472:	e7bc      	b.n	80043ee <_printf_i+0x146>
 8004474:	6833      	ldr	r3, [r6, #0]
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	6032      	str	r2, [r6, #0]
 800447a:	681e      	ldr	r6, [r3, #0]
 800447c:	6862      	ldr	r2, [r4, #4]
 800447e:	2100      	movs	r1, #0
 8004480:	4630      	mov	r0, r6
 8004482:	f7fb fe85 	bl	8000190 <memchr>
 8004486:	b108      	cbz	r0, 800448c <_printf_i+0x1e4>
 8004488:	1b80      	subs	r0, r0, r6
 800448a:	6060      	str	r0, [r4, #4]
 800448c:	6863      	ldr	r3, [r4, #4]
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	2300      	movs	r3, #0
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004496:	e7aa      	b.n	80043ee <_printf_i+0x146>
 8004498:	6923      	ldr	r3, [r4, #16]
 800449a:	4632      	mov	r2, r6
 800449c:	4649      	mov	r1, r9
 800449e:	4640      	mov	r0, r8
 80044a0:	47d0      	blx	sl
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0ad      	beq.n	8004402 <_printf_i+0x15a>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	079b      	lsls	r3, r3, #30
 80044aa:	d413      	bmi.n	80044d4 <_printf_i+0x22c>
 80044ac:	68e0      	ldr	r0, [r4, #12]
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	4298      	cmp	r0, r3
 80044b2:	bfb8      	it	lt
 80044b4:	4618      	movlt	r0, r3
 80044b6:	e7a6      	b.n	8004406 <_printf_i+0x15e>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4632      	mov	r2, r6
 80044bc:	4649      	mov	r1, r9
 80044be:	4640      	mov	r0, r8
 80044c0:	47d0      	blx	sl
 80044c2:	3001      	adds	r0, #1
 80044c4:	d09d      	beq.n	8004402 <_printf_i+0x15a>
 80044c6:	3501      	adds	r5, #1
 80044c8:	68e3      	ldr	r3, [r4, #12]
 80044ca:	9903      	ldr	r1, [sp, #12]
 80044cc:	1a5b      	subs	r3, r3, r1
 80044ce:	42ab      	cmp	r3, r5
 80044d0:	dcf2      	bgt.n	80044b8 <_printf_i+0x210>
 80044d2:	e7eb      	b.n	80044ac <_printf_i+0x204>
 80044d4:	2500      	movs	r5, #0
 80044d6:	f104 0619 	add.w	r6, r4, #25
 80044da:	e7f5      	b.n	80044c8 <_printf_i+0x220>
 80044dc:	08004721 	.word	0x08004721
 80044e0:	08004732 	.word	0x08004732

080044e4 <memmove>:
 80044e4:	4288      	cmp	r0, r1
 80044e6:	b510      	push	{r4, lr}
 80044e8:	eb01 0402 	add.w	r4, r1, r2
 80044ec:	d902      	bls.n	80044f4 <memmove+0x10>
 80044ee:	4284      	cmp	r4, r0
 80044f0:	4623      	mov	r3, r4
 80044f2:	d807      	bhi.n	8004504 <memmove+0x20>
 80044f4:	1e43      	subs	r3, r0, #1
 80044f6:	42a1      	cmp	r1, r4
 80044f8:	d008      	beq.n	800450c <memmove+0x28>
 80044fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004502:	e7f8      	b.n	80044f6 <memmove+0x12>
 8004504:	4402      	add	r2, r0
 8004506:	4601      	mov	r1, r0
 8004508:	428a      	cmp	r2, r1
 800450a:	d100      	bne.n	800450e <memmove+0x2a>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004516:	e7f7      	b.n	8004508 <memmove+0x24>

08004518 <_sbrk_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	@ (8004534 <_sbrk_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fc08 	bl	8000d38 <_sbrk>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_sbrk_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_sbrk_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000308 	.word	0x20000308

08004538 <memcpy>:
 8004538:	440a      	add	r2, r1
 800453a:	4291      	cmp	r1, r2
 800453c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004540:	d100      	bne.n	8004544 <memcpy+0xc>
 8004542:	4770      	bx	lr
 8004544:	b510      	push	{r4, lr}
 8004546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800454a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800454e:	4291      	cmp	r1, r2
 8004550:	d1f9      	bne.n	8004546 <memcpy+0xe>
 8004552:	bd10      	pop	{r4, pc}

08004554 <_realloc_r>:
 8004554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	4607      	mov	r7, r0
 800455a:	4614      	mov	r4, r2
 800455c:	460d      	mov	r5, r1
 800455e:	b921      	cbnz	r1, 800456a <_realloc_r+0x16>
 8004560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004564:	4611      	mov	r1, r2
 8004566:	f7ff bc4d 	b.w	8003e04 <_malloc_r>
 800456a:	b92a      	cbnz	r2, 8004578 <_realloc_r+0x24>
 800456c:	f7ff fbde 	bl	8003d2c <_free_r>
 8004570:	4625      	mov	r5, r4
 8004572:	4628      	mov	r0, r5
 8004574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004578:	f000 f81a 	bl	80045b0 <_malloc_usable_size_r>
 800457c:	4284      	cmp	r4, r0
 800457e:	4606      	mov	r6, r0
 8004580:	d802      	bhi.n	8004588 <_realloc_r+0x34>
 8004582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004586:	d8f4      	bhi.n	8004572 <_realloc_r+0x1e>
 8004588:	4621      	mov	r1, r4
 800458a:	4638      	mov	r0, r7
 800458c:	f7ff fc3a 	bl	8003e04 <_malloc_r>
 8004590:	4680      	mov	r8, r0
 8004592:	b908      	cbnz	r0, 8004598 <_realloc_r+0x44>
 8004594:	4645      	mov	r5, r8
 8004596:	e7ec      	b.n	8004572 <_realloc_r+0x1e>
 8004598:	42b4      	cmp	r4, r6
 800459a:	4622      	mov	r2, r4
 800459c:	4629      	mov	r1, r5
 800459e:	bf28      	it	cs
 80045a0:	4632      	movcs	r2, r6
 80045a2:	f7ff ffc9 	bl	8004538 <memcpy>
 80045a6:	4629      	mov	r1, r5
 80045a8:	4638      	mov	r0, r7
 80045aa:	f7ff fbbf 	bl	8003d2c <_free_r>
 80045ae:	e7f1      	b.n	8004594 <_realloc_r+0x40>

080045b0 <_malloc_usable_size_r>:
 80045b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b4:	1f18      	subs	r0, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfbc      	itt	lt
 80045ba:	580b      	ldrlt	r3, [r1, r0]
 80045bc:	18c0      	addlt	r0, r0, r3
 80045be:	4770      	bx	lr

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
