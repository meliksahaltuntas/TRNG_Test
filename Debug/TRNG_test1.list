
TRNG_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e40  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000008  080050fc  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000318  20000068  0800515c  00007068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000380  0800515c  00007380  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fa71  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002306  00000000  00000000  00016b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00018e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e1c  00000000  00000000  0001a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000216a9  00000000  00000000  0001aebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fd5f  00000000  00000000  0003c565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6288  00000000  00000000  0004c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012254c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005228  00000000  00000000  00122590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000048  00000000  00000000  001277b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08004f68 	.word	0x08004f68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08004f68 	.word	0x08004f68

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057e:	b480      	push	{r7}
 8000580:	b085      	sub	sp, #20
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4313      	orrs	r3, r2
 8000594:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800059a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <now_ms>:
static void force_set_mode(uint8_t m);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
static inline uint32_t now_ms(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80005b4:	f000 fdc2 	bl	800113c <HAL_GetTick>
 80005b8:	4603      	mov	r3, r0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <button_pressed_event>:

static bool button_pressed_event(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 80005c6:	f7ff fff3 	bl	80005b0 <now_ms>
 80005ca:	6078      	str	r0, [r7, #4]
    uint8_t reading = (uint8_t)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 80005cc:	2101      	movs	r1, #1
 80005ce:	4815      	ldr	r0, [pc, #84]	@ (8000624 <button_pressed_event+0x64>)
 80005d0:	f001 fac0 	bl	8001b54 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	70fb      	strb	r3, [r7, #3]

    if(reading != lastButtonReading)
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <button_pressed_event+0x68>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	78fa      	ldrb	r2, [r7, #3]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d005      	beq.n	80005ee <button_pressed_event+0x2e>
    {
        lastButtonReading = reading;
 80005e2:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <button_pressed_event+0x68>)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	7013      	strb	r3, [r2, #0]
        lastButtonChangeTime = t;
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <button_pressed_event+0x6c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
    }

    if((t - lastButtonChangeTime) > BUTTON_DEBOUNCE_MS)
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <button_pressed_event+0x6c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b32      	cmp	r3, #50	@ 0x32
 80005f8:	d90f      	bls.n	800061a <button_pressed_event+0x5a>
    {
        if(lastButtonStable != lastButtonReading)
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <button_pressed_event+0x70>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <button_pressed_event+0x68>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d009      	beq.n	800061a <button_pressed_event+0x5a>
        {
            lastButtonStable = lastButtonReading;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <button_pressed_event+0x68>)
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <button_pressed_event+0x70>)
 800060c:	701a      	strb	r2, [r3, #0]
            if(lastButtonStable == GPIO_PIN_RESET)
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <button_pressed_event+0x70>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <button_pressed_event+0x5a>
                return true;
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <button_pressed_event+0x5c>
        }
    }
    return false;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	48000c00 	.word	0x48000c00
 8000628:	20000009 	.word	0x20000009
 800062c:	20000190 	.word	0x20000190
 8000630:	2000000a 	.word	0x2000000a

08000634 <mode2_reset_state>:

static void mode2_reset_state(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    m2_state = M2_IDLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <mode2_reset_state+0x30>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
    m2_nextAction = 0;
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <mode2_reset_state+0x34>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
    m2_blinksRemain = 0;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <mode2_reset_state+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    m2_ledOn = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <mode2_reset_state+0x3c>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
    m2_led3EndTime = 0;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <mode2_reset_state+0x40>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN | LED1_PIN | LED3_PIN, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2123      	movs	r1, #35	@ 0x23
 800065a:	4807      	ldr	r0, [pc, #28]	@ (8000678 <mode2_reset_state+0x44>)
 800065c:	f001 fa92 	bl	8001b84 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000199 	.word	0x20000199
 8000668:	2000019c 	.word	0x2000019c
 800066c:	200001a0 	.word	0x200001a0
 8000670:	200001a4 	.word	0x200001a4
 8000674:	200001a8 	.word	0x200001a8
 8000678:	48000400 	.word	0x48000400

0800067c <uart_send_dma_safe>:

/* Helper: güvenli DMA ile gönder (eğer DMA meşgulse blocking fallback uygula) */
static void uart_send_dma_safe(const char *s, int len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
    if (len <= 0) return;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd1e      	ble.n	80006ca <uart_send_dma_safe+0x4e>
    uint16_t ulen = (uint16_t)len;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	81fb      	strh	r3, [r7, #14]
    /* Eğer UART hazırsa DMA ile gönder */
    if (HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY)
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <uart_send_dma_safe+0x58>)
 8000692:	f003 fa7b 	bl	8003b8c <HAL_UART_GetState>
 8000696:	4603      	mov	r3, r0
 8000698:	2b20      	cmp	r3, #32
 800069a:	d10f      	bne.n	80006bc <uart_send_dma_safe+0x40>
    {
        if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)s, ulen) != HAL_OK)
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	461a      	mov	r2, r3
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <uart_send_dma_safe+0x58>)
 80006a4:	f003 f9de 	bl	8003a64 <HAL_UART_Transmit_DMA>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00e      	beq.n	80006cc <uart_send_dma_safe+0x50>
        {
            /* Eğer DMA başlatılamadıysa kısa blocking fallback */
            HAL_UART_Transmit(&huart1, (uint8_t*)s, ulen, 100);
 80006ae:	89fa      	ldrh	r2, [r7, #14]
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <uart_send_dma_safe+0x58>)
 80006b6:	f003 f946 	bl	8003946 <HAL_UART_Transmit>
 80006ba:	e007      	b.n	80006cc <uart_send_dma_safe+0x50>
        }
    }
    else
    {
        /* DMA meşgulse küçük timeout ile blocking gönder */
        HAL_UART_Transmit(&huart1, (uint8_t*)s, ulen, 100);
 80006bc:	89fa      	ldrh	r2, [r7, #14]
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <uart_send_dma_safe+0x58>)
 80006c4:	f003 f93f 	bl	8003946 <HAL_UART_Transmit>
 80006c8:	e000      	b.n	80006cc <uart_send_dma_safe+0x50>
    if (len <= 0) return;
 80006ca:	bf00      	nop
    }
}
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000098 	.word	0x20000098

080006d8 <toggle_mode>:

static void toggle_mode(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
    mode ^= 1u; // Toggle 0 <-> 1
 80006de:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <toggle_mode+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f083 0301 	eor.w	r3, r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <toggle_mode+0x74>)
 80006ec:	701a      	strb	r2, [r3, #0]
    mode2_reset_state();
 80006ee:	f7ff ffa1 	bl	8000634 <mode2_reset_state>
    m0_lastToggle = now_ms();
 80006f2:	f7ff ff5d 	bl	80005b0 <now_ms>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <toggle_mode+0x78>)
 80006fa:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <toggle_mode+0x7c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	4814      	ldr	r0, [pc, #80]	@ (8000758 <toggle_mode+0x80>)
 8000708:	f001 fa3c 	bl	8001b84 <HAL_GPIO_WritePin>

    // LED3 mod değişiminde yanıp sönsün
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2102      	movs	r1, #2
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <toggle_mode+0x80>)
 8000712:	f001 fa37 	bl	8001b84 <HAL_GPIO_WritePin>
    m2_modeChangeEndTime = now_ms() + LED3_ON_MS;
 8000716:	f7ff ff4b 	bl	80005b0 <now_ms>
 800071a:	4603      	mov	r3, r0
 800071c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000720:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <toggle_mode+0x84>)
 8000722:	6013      	str	r3, [r2, #0]

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode toggled -> %u\r\n", (unsigned)mode);
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <toggle_mode+0x74>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <toggle_mode+0x88>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	480d      	ldr	r0, [pc, #52]	@ (8000764 <toggle_mode+0x8c>)
 8000730:	f003 ff66 	bl	8004600 <sniprintf>
 8000734:	6078      	str	r0, [r7, #4]
    if(len>0) uart_send_dma_safe(uartMsg, len); // <-- DEGİŞTİ: DMA güvenli gönderim kullan
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dd03      	ble.n	8000744 <toggle_mode+0x6c>
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <toggle_mode+0x8c>)
 8000740:	f7ff ff9c 	bl	800067c <uart_send_dma_safe>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000018c 	.word	0x2000018c
 8000750:	20000194 	.word	0x20000194
 8000754:	20000198 	.word	0x20000198
 8000758:	48000400 	.word	0x48000400
 800075c:	200001ac 	.word	0x200001ac
 8000760:	08004f80 	.word	0x08004f80
 8000764:	200001b0 	.word	0x200001b0

08000768 <force_set_mode>:

static void force_set_mode(uint8_t m)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    if(m > 1) return;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d82e      	bhi.n	80007d6 <force_set_mode+0x6e>
    mode = m;
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <force_set_mode+0x78>)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	7013      	strb	r3, [r2, #0]
    mode2_reset_state();
 800077e:	f7ff ff59 	bl	8000634 <mode2_reset_state>
    m0_lastToggle = now_ms();
 8000782:	f7ff ff15 	bl	80005b0 <now_ms>
 8000786:	4603      	mov	r3, r0
 8000788:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <force_set_mode+0x7c>)
 800078a:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <force_set_mode+0x80>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	4815      	ldr	r0, [pc, #84]	@ (80007ec <force_set_mode+0x84>)
 8000798:	f001 f9f4 	bl	8001b84 <HAL_GPIO_WritePin>

    // LED3 mod değişiminde yanıp sönsün
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2102      	movs	r1, #2
 80007a0:	4812      	ldr	r0, [pc, #72]	@ (80007ec <force_set_mode+0x84>)
 80007a2:	f001 f9ef 	bl	8001b84 <HAL_GPIO_WritePin>
    m2_modeChangeEndTime = now_ms() + LED3_ON_MS;
 80007a6:	f7ff ff03 	bl	80005b0 <now_ms>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80007b0:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <force_set_mode+0x88>)
 80007b2:	6013      	str	r3, [r2, #0]

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode forced -> %u\r\n", (unsigned)mode);
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <force_set_mode+0x78>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <force_set_mode+0x8c>)
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <force_set_mode+0x90>)
 80007c0:	f003 ff1e 	bl	8004600 <sniprintf>
 80007c4:	60f8      	str	r0, [r7, #12]
    if(len>0) uart_send_dma_safe(uartMsg, len); // <-- DEGİŞTİ
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dd05      	ble.n	80007d8 <force_set_mode+0x70>
 80007cc:	68f9      	ldr	r1, [r7, #12]
 80007ce:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <force_set_mode+0x90>)
 80007d0:	f7ff ff54 	bl	800067c <uart_send_dma_safe>
 80007d4:	e000      	b.n	80007d8 <force_set_mode+0x70>
    if(m > 1) return;
 80007d6:	bf00      	nop
}
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000018c 	.word	0x2000018c
 80007e4:	20000194 	.word	0x20000194
 80007e8:	20000198 	.word	0x20000198
 80007ec:	48000400 	.word	0x48000400
 80007f0:	200001ac 	.word	0x200001ac
 80007f4:	08004f98 	.word	0x08004f98
 80007f8:	200001b0 	.word	0x200001b0

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
    HAL_Init();
 8000802:	f000 fc2d 	bl	8001060 <HAL_Init>
    SystemClock_Config();
 8000806:	f000 fa17 	bl	8000c38 <SystemClock_Config>

    MX_GPIO_Init();
 800080a:	f000 f93f 	bl	8000a8c <MX_GPIO_Init>

    MX_DMA_Init();            // <-- EKLENDİ: DMA ilk başlatılıyor (UART init'den önce çağrılması tavsiye edilir)
 800080e:	f000 f993 	bl	8000b38 <MX_DMA_Init>
    MX_RNG_Init();
 8000812:	f000 f97b 	bl	8000b0c <MX_RNG_Init>
    MX_USART1_UART_Init();
 8000816:	f000 f9d1 	bl	8000bbc <MX_USART1_UART_Init>

    while(1)
    {
        if(button_pressed_event() || debugToggle)
 800081a:	f7ff fed1 	bl	80005c0 <button_pressed_event>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <main+0x32>
 8000824:	4b89      	ldr	r3, [pc, #548]	@ (8000a4c <main+0x250>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <main+0x3c>
        {
            toggle_mode();
 800082e:	f7ff ff53 	bl	80006d8 <toggle_mode>
            debugToggle = 0;
 8000832:	4b86      	ldr	r3, [pc, #536]	@ (8000a4c <main+0x250>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
        }

        if(debugForceMode != -1)
 8000838:	4b85      	ldr	r3, [pc, #532]	@ (8000a50 <main+0x254>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000842:	d009      	beq.n	8000858 <main+0x5c>
        {
            force_set_mode((uint8_t)debugForceMode);
 8000844:	4b82      	ldr	r3, [pc, #520]	@ (8000a50 <main+0x254>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff8b 	bl	8000768 <force_set_mode>
            debugForceMode = -1;
 8000852:	4b7f      	ldr	r3, [pc, #508]	@ (8000a50 <main+0x254>)
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	701a      	strb	r2, [r3, #0]
        }

        uint32_t t = now_ms();
 8000858:	f7ff feaa 	bl	80005b0 <now_ms>
 800085c:	60f8      	str	r0, [r7, #12]

        // Mod değişimi LED3 kontrolü
        if(m2_modeChangeEndTime && t >= m2_modeChangeEndTime)
 800085e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a54 <main+0x258>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00c      	beq.n	8000880 <main+0x84>
 8000866:	4b7b      	ldr	r3, [pc, #492]	@ (8000a54 <main+0x258>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d307      	bcc.n	8000880 <main+0x84>
        {
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	4878      	ldr	r0, [pc, #480]	@ (8000a58 <main+0x25c>)
 8000876:	f001 f985 	bl	8001b84 <HAL_GPIO_WritePin>
            m2_modeChangeEndTime = 0;
 800087a:	4b76      	ldr	r3, [pc, #472]	@ (8000a54 <main+0x258>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
        }

        if(mode == 0) // Mode 0: LED2 yanıp söner
 8000880:	4b76      	ldr	r3, [pc, #472]	@ (8000a5c <main+0x260>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d11d      	bne.n	80008c6 <main+0xca>
        {
            if(t - m0_lastToggle >= MODE0_BLINK_MS)
 800088a:	4b75      	ldr	r3, [pc, #468]	@ (8000a60 <main+0x264>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000896:	d3c0      	bcc.n	800081a <main+0x1e>
            {
                m0_lastToggle = t;
 8000898:	4a71      	ldr	r2, [pc, #452]	@ (8000a60 <main+0x264>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6013      	str	r3, [r2, #0]
                m0_ledState ^= 1;
 800089e:	4b71      	ldr	r3, [pc, #452]	@ (8000a64 <main+0x268>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f083 0301 	eor.w	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b6e      	ldr	r3, [pc, #440]	@ (8000a64 <main+0x268>)
 80008aa:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m0_ledState?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008ac:	4b6d      	ldr	r3, [pc, #436]	@ (8000a64 <main+0x268>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2101      	movs	r1, #1
 80008be:	4866      	ldr	r0, [pc, #408]	@ (8000a58 <main+0x25c>)
 80008c0:	f001 f960 	bl	8001b84 <HAL_GPIO_WritePin>
 80008c4:	e7a9      	b.n	800081a <main+0x1e>
            }
        }
        else // Mode 1: RNG blink
        {
            switch(m2_state)
 80008c6:	4b68      	ldr	r3, [pc, #416]	@ (8000a68 <main+0x26c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d8a5      	bhi.n	800081a <main+0x1e>
 80008ce:	a201      	add	r2, pc, #4	@ (adr r2, 80008d4 <main+0xd8>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080008e9 	.word	0x080008e9
 80008d8:	08000905 	.word	0x08000905
 80008dc:	08000993 	.word	0x08000993
 80008e0:	08000a03 	.word	0x08000a03
 80008e4:	08000a29 	.word	0x08000a29
            {
                case M2_IDLE:
                {
                    // LED3 Mode 1 başında yanacak
                    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	485a      	ldr	r0, [pc, #360]	@ (8000a58 <main+0x25c>)
 80008ee:	f001 f949 	bl	8001b84 <HAL_GPIO_WritePin>
                    m2_led3EndTime = t + LED3_ON_MS;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80008f8:	4a5c      	ldr	r2, [pc, #368]	@ (8000a6c <main+0x270>)
 80008fa:	6013      	str	r3, [r2, #0]
                    m2_state = M2_LED3_ON;
 80008fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <main+0x26c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000902:	e0a2      	b.n	8000a4a <main+0x24e>

                case M2_LED3_ON:
                    if(t >= m2_led3EndTime)
 8000904:	4b59      	ldr	r3, [pc, #356]	@ (8000a6c <main+0x270>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	429a      	cmp	r2, r3
 800090c:	f0c0 8095 	bcc.w	8000a3a <main+0x23e>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	4850      	ldr	r0, [pc, #320]	@ (8000a58 <main+0x25c>)
 8000916:	f001 f935 	bl	8001b84 <HAL_GPIO_WritePin>
                        uint32_t rnd;
                        if(HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4854      	ldr	r0, [pc, #336]	@ (8000a70 <main+0x274>)
 8000920:	f002 ff4b 	bl	80037ba <HAL_RNG_GenerateRandomNumber>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00a      	beq.n	8000940 <main+0x144>
                        {
                            HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2102      	movs	r1, #2
 800092e:	484a      	ldr	r0, [pc, #296]	@ (8000a58 <main+0x25c>)
 8000930:	f001 f928 	bl	8001b84 <HAL_GPIO_WritePin>
                            m2_led3EndTime = t + LED3_ON_MS;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800093a:	4a4c      	ldr	r2, [pc, #304]	@ (8000a6c <main+0x270>)
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e76c      	b.n	800081a <main+0x1e>
                            break;
                        }
                        m2_blinksRemain = (rnd % 10) + 1;
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4b4c      	ldr	r3, [pc, #304]	@ (8000a74 <main+0x278>)
 8000944:	fba3 2301 	umull	r2, r3, r3, r1
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	1aca      	subs	r2, r1, r3
 8000954:	1c53      	adds	r3, r2, #1
 8000956:	4a48      	ldr	r2, [pc, #288]	@ (8000a78 <main+0x27c>)
 8000958:	6013      	str	r3, [r2, #0]
                        m2_state = M2_BLINKING;
 800095a:	4b43      	ldr	r3, [pc, #268]	@ (8000a68 <main+0x26c>)
 800095c:	2202      	movs	r2, #2
 800095e:	701a      	strb	r2, [r3, #0]
                        m2_ledOn = 0;
 8000960:	4b46      	ldr	r3, [pc, #280]	@ (8000a7c <main+0x280>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
                        m2_nextAction = t;
 8000966:	4a46      	ldr	r2, [pc, #280]	@ (8000a80 <main+0x284>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6013      	str	r3, [r2, #0]

                        int len = snprintf(uartMsg, sizeof(uartMsg), "Random Number: %lu, LED2 blinks: %lu\r\n",
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4b42      	ldr	r3, [pc, #264]	@ (8000a78 <main+0x27c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	4a43      	ldr	r2, [pc, #268]	@ (8000a84 <main+0x288>)
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	4843      	ldr	r0, [pc, #268]	@ (8000a88 <main+0x28c>)
 800097c:	f003 fe40 	bl	8004600 <sniprintf>
 8000980:	60b8      	str	r0, [r7, #8]
                                 rnd, m2_blinksRemain);
                        if(len > 0) uart_send_dma_safe(uartMsg, len); // <-- DEGİŞTİ: DMA güvenli gönderim
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd58      	ble.n	8000a3a <main+0x23e>
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	483f      	ldr	r0, [pc, #252]	@ (8000a88 <main+0x28c>)
 800098c:	f7ff fe76 	bl	800067c <uart_send_dma_safe>
                    }
                    break;
 8000990:	e053      	b.n	8000a3a <main+0x23e>

                case M2_BLINKING:
                    if(t >= m2_nextAction)
 8000992:	4b3b      	ldr	r3, [pc, #236]	@ (8000a80 <main+0x284>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d350      	bcc.n	8000a3e <main+0x242>
                    {
                        m2_ledOn ^= 1;
 800099c:	4b37      	ldr	r3, [pc, #220]	@ (8000a7c <main+0x280>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f083 0301 	eor.w	r3, r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <main+0x280>)
 80009a8:	701a      	strb	r2, [r3, #0]
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m2_ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009aa:	4b34      	ldr	r3, [pc, #208]	@ (8000a7c <main+0x280>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	bf14      	ite	ne
 80009b2:	2301      	movne	r3, #1
 80009b4:	2300      	moveq	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2101      	movs	r1, #1
 80009bc:	4826      	ldr	r0, [pc, #152]	@ (8000a58 <main+0x25c>)
 80009be:	f001 f8e1 	bl	8001b84 <HAL_GPIO_WritePin>
                        if(!m2_ledOn)
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <main+0x280>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d116      	bne.n	80009f8 <main+0x1fc>
                        {
                            m2_blinksRemain--;
 80009ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <main+0x27c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <main+0x27c>)
 80009d2:	6013      	str	r3, [r2, #0]
                            if(m2_blinksRemain == 0)
 80009d4:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <main+0x27c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10d      	bne.n	80009f8 <main+0x1fc>
                            {
                                m2_state = M2_LED1_ON;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0x26c>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
                                m2_nextAction = t + RNG_POST_WAIT_MS;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009e8:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <main+0x284>)
 80009ea:	6013      	str	r3, [r2, #0]
                                HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4819      	ldr	r0, [pc, #100]	@ (8000a58 <main+0x25c>)
 80009f2:	f001 f8c7 	bl	8001b84 <HAL_GPIO_WritePin>
                                break;
 80009f6:	e028      	b.n	8000a4a <main+0x24e>
                            }
                        }
                        m2_nextAction = t + (m2_ledOn?RNG_LED_ON_MS:RNG_LED_OFF_MS);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3332      	adds	r3, #50	@ 0x32
 80009fc:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <main+0x284>)
 80009fe:	6013      	str	r3, [r2, #0]
                    }
                    break;
 8000a00:	e01d      	b.n	8000a3e <main+0x242>

                case M2_LED1_ON:
                    if(t >= m2_nextAction)
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <main+0x284>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d31a      	bcc.n	8000a42 <main+0x246>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <main+0x25c>)
 8000a12:	f001 f8b7 	bl	8001b84 <HAL_GPIO_WritePin>
                        m2_state = M2_WAIT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <main+0x26c>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	701a      	strb	r2, [r3, #0]
                        m2_nextAction = t + RNG_POST_WAIT_MS;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <main+0x284>)
 8000a24:	6013      	str	r3, [r2, #0]
                    }
                    break;
 8000a26:	e00c      	b.n	8000a42 <main+0x246>

                case M2_WAIT:
                    if(t >= m2_nextAction)
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <main+0x284>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d309      	bcc.n	8000a46 <main+0x24a>
                        m2_state = M2_IDLE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <main+0x26c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
                    break;
 8000a38:	e005      	b.n	8000a46 <main+0x24a>
                    break;
 8000a3a:	bf00      	nop
 8000a3c:	e6ed      	b.n	800081a <main+0x1e>
                    break;
 8000a3e:	bf00      	nop
 8000a40:	e6eb      	b.n	800081a <main+0x1e>
                    break;
 8000a42:	bf00      	nop
 8000a44:	e6e9      	b.n	800081a <main+0x1e>
                    break;
 8000a46:	bf00      	nop
 8000a48:	e6e7      	b.n	800081a <main+0x1e>
    {
 8000a4a:	e6e6      	b.n	800081a <main+0x1e>
 8000a4c:	2000018d 	.word	0x2000018d
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200001ac 	.word	0x200001ac
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	2000018c 	.word	0x2000018c
 8000a60:	20000194 	.word	0x20000194
 8000a64:	20000198 	.word	0x20000198
 8000a68:	20000199 	.word	0x20000199
 8000a6c:	200001a8 	.word	0x200001a8
 8000a70:	20000084 	.word	0x20000084
 8000a74:	cccccccd 	.word	0xcccccccd
 8000a78:	200001a0 	.word	0x200001a0
 8000a7c:	200001a4 	.word	0x200001a4
 8000a80:	2000019c 	.word	0x2000019c
 8000a84:	08004fac 	.word	0x08004fac
 8000a88:	200001b0 	.word	0x200001b0

08000a8c <MX_GPIO_Init>:
}


/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

    /* GPIO port clock enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fd6c 	bl	800057e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2008      	movs	r0, #8
 8000aa8:	f7ff fd69 	bl	800057e <LL_AHB2_GRP1_EnableClock>

    /* LED pins */
    GPIO_InitStruct.Pin = LED1_PIN|LED2_PIN|LED3_PIN;
 8000aac:	2323      	movs	r3, #35	@ 0x23
 8000aae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4810      	ldr	r0, [pc, #64]	@ (8000b04 <MX_GPIO_Init+0x78>)
 8000ac2:	f000 fed7 	bl	8001874 <HAL_GPIO_Init>

    /* Button pin */
    GPIO_InitStruct.Pin = BUTTON_PIN;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // <-- Pull-up ekledik
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <MX_GPIO_Init+0x7c>)
 8000ad8:	f000 fecc 	bl	8001874 <HAL_GPIO_Init>

    /* UART1 pins PB6/PB7 alternate function setup */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000adc:	23c0      	movs	r3, #192	@ 0xc0
 8000ade:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aec:	2307      	movs	r3, #7
 8000aee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <MX_GPIO_Init+0x78>)
 8000af6:	f000 febd 	bl	8001874 <HAL_GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000c00 	.word	0x48000c00

08000b0c <MX_RNG_Init>:

/* RNG Initialization Function */
static void MX_RNG_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    hrng.Instance = RNG;
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <MX_RNG_Init+0x24>)
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <MX_RNG_Init+0x28>)
 8000b14:	601a      	str	r2, [r3, #0]
    hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_RNG_Init+0x24>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
    if(HAL_RNG_Init(&hrng) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_RNG_Init+0x24>)
 8000b1e:	f002 fe17 	bl	8003750 <HAL_RNG_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_RNG_Init+0x20>
    {
        Error_Handler();
 8000b28:	f000 f8e0 	bl	8000cec <Error_Handler>
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000084 	.word	0x20000084
 8000b34:	58001000 	.word	0x58001000

08000b38 <MX_DMA_Init>:

/* DMA Initialization Function (USART1 TX) */
static void MX_DMA_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    /* Enable clocks for DMAMUX + DMA controller */
#ifdef __HAL_RCC_DMAMUX1_CLK_ENABLE
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f7ff fd05 	bl	800054c <LL_AHB1_GRP1_EnableClock>
#endif
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fd02 	bl	800054c <LL_AHB1_GRP1_EnableClock>

    /* Configure the DMA handle for USART1_TX */
    hdma_usart1_tx.Instance = DMA1_Channel4; // <-- yaygın seçim; MCU'na göre farklı olabilir
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb4 <MX_DMA_Init+0x7c>)
 8000b4c:	601a      	str	r2, [r3, #0]
#ifdef DMA_REQUEST_USART1_TX
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX; // DMAMUX request (bazı HAL'larda mevcut)
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b50:	220f      	movs	r2, #15
 8000b52:	605a      	str	r2, [r3, #4]
#endif
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b56:	2210      	movs	r2, #16
 8000b58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b7e:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b80:	f000 fc04 	bl	800138c <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_DMA_Init+0x56>
    {
        Error_Handler();
 8000b8a:	f000 f8af 	bl	8000cec <Error_Handler>
    }

    /* Link DMA handle to UART handle */
    __HAL_LINKDMA(&huart1, hdmatx, hdma_usart1_tx);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_DMA_Init+0x80>)
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b92:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_DMA_Init+0x78>)
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <MX_DMA_Init+0x80>)
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable and set DMA IRQ to a lower priority */
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	200e      	movs	r0, #14
 8000ba0:	f000 fbbf 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ba4:	200e      	movs	r0, #14
 8000ba6:	f000 fbd6 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000012c 	.word	0x2000012c
 8000bb4:	40020044 	.word	0x40020044
 8000bb8:	20000098 	.word	0x20000098

08000bbc <MX_USART1_UART_Init>:

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <MX_USART1_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 1200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000bcc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart1) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_USART1_UART_Init+0x4c>)
 8000bf4:	f002 fe57 	bl	80038a6 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000bfe:	f000 f875 	bl	8000cec <Error_Handler>
    }
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000098 	.word	0x20000098
 8000c0c:	40013800 	.word	0x40013800

08000c10 <DMA1_Channel4_IRQHandler>:

/* DMA IRQ Handler (örnek) */
void DMA1_Channel4_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <DMA1_Channel4_IRQHandler+0x10>)
 8000c16:	f000 fcdc 	bl	80015d2 <HAL_DMA_IRQHandler>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000012c 	.word	0x2000012c

08000c24 <HAL_UART_TxCpltCallback>:

/* UART TX tamamlandığında çağrılan callback (isteğe göre işaretleme yap) */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
        /* Burada istersen bir flag set edebilirsin; demo için boş bırakıyorum */
    }
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09a      	sub	sp, #104	@ 0x68
 8000c3c:	af00      	add	r7, sp, #0
    /* (Mevcut SystemClock_Config()'unu aynen kullan) */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2248      	movs	r2, #72	@ 0x48
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fd10 	bl	800466c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <SystemClock_Config+0xb0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c66:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <SystemClock_Config+0xb0>)
 8000c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <SystemClock_Config+0xb0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_MSI;
 8000c7a:	232a      	movs	r3, #42	@ 0x2a
 8000c7c:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c94:	2305      	movs	r3, #5
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fb1b 	bl	80022dc <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x78>
 8000cac:	f000 f81e 	bl	8000cec <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000cb0:	236f      	movs	r3, #111	@ 0x6f
 8000cb2:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fe77 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xa8>
 8000cdc:	f000 f806 	bl	8000cec <Error_Handler>
}
 8000ce0:	bf00      	nop
 8000ce2:	3768      	adds	r7, #104	@ 0x68
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58000400 	.word	0x58000400

08000cec <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
    __disable_irq();
    while(1) {}
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d80:	68fb      	ldr	r3, [r7, #12]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	@ 0x58
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2250      	movs	r2, #80	@ 0x50
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fc5d 	bl	800466c <memset>
  if(hrng->Instance==RNG)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_RNG_MspInit+0x50>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d113      	bne.n	8000de4 <HAL_RNG_MspInit+0x48>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000dc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fa38 	bl	8003242 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000dd8:	f7ff ff88 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ddc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000de0:	f7ff ffa3 	bl	8000d2a <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000de4:	bf00      	nop
 8000de6:	3758      	adds	r7, #88	@ 0x58
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58001000 	.word	0x58001000

08000df0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09c      	sub	sp, #112	@ 0x70
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2250      	movs	r2, #80	@ 0x50
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fc2b 	bl	800466c <memset>
  if(huart->Instance==USART1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a16      	ldr	r2, [pc, #88]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d124      	bne.n	8000e6a <HAL_UART_MspInit+0x7a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fa08 	bl	8003242 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e38:	f7ff ff58 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e40:	f7ff ff8c 	bl	8000d5c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff ff57 	bl	8000cf8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	@ 0xc0
 8000e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e66:	f000 fd05 	bl	8001874 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3770      	adds	r7, #112	@ 0x70
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40013800 	.word	0x40013800
 8000e78:	48000400 	.word	0x48000400

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f91f 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f003 fbb6 	bl	800467c <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20030000 	.word	0x20030000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	20000230 	.word	0x20000230
 8000f44:	20000380 	.word	0x20000380

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <SystemInit+0x98>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f52:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <SystemInit+0x98>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f70:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f74:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <SystemInit+0x9c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f92:	f023 0305 	bic.w	r3, r3, #5
 8000f96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <SystemInit+0xa0>)
 8000fb4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <SystemInit+0xa0>)
 8000fbc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	faf6fefb 	.word	0xfaf6fefb
 8000fe8:	22041000 	.word	0x22041000

08000fec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff0:	3304      	adds	r3, #4

08000ff2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ff6:	d3f9      	bcc.n	8000fec <CopyDataInit>
  bx lr
 8000ff8:	4770      	bx	lr

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ffa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ffc:	3004      	adds	r0, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ffe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
  bx lr
 8001002:	4770      	bx	lr

08001004 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001006:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001008:	f7ff ff9e 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <LoopForever+0x6>)
 800100e:	490c      	ldr	r1, [pc, #48]	@ (8001040 <LoopForever+0xa>)
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <LoopForever+0xe>)
 8001012:	2300      	movs	r3, #0
 8001014:	f7ff ffed 	bl	8000ff2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <LoopForever+0x12>)
 800101a:	490c      	ldr	r1, [pc, #48]	@ (800104c <LoopForever+0x16>)
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <LoopForever+0x1a>)
 800101e:	2300      	movs	r3, #0
 8001020:	f7ff ffe7 	bl	8000ff2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001024:	480b      	ldr	r0, [pc, #44]	@ (8001054 <LoopForever+0x1e>)
 8001026:	490c      	ldr	r1, [pc, #48]	@ (8001058 <LoopForever+0x22>)
 8001028:	2300      	movs	r3, #0
 800102a:	f7ff ffe8 	bl	8000ffe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102e:	f003 fb2b 	bl	8004688 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001032:	f7ff fbe3 	bl	80007fc <main>

08001036 <LoopForever>:

LoopForever:
  b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800103c:	20000008 	.word	0x20000008
 8001040:	20000068 	.word	0x20000068
 8001044:	080050fc 	.word	0x080050fc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001048:	20030000 	.word	0x20030000
 800104c:	20030000 	.word	0x20030000
 8001050:	0800515c 	.word	0x0800515c
  INIT_BSS _sbss, _ebss
 8001054:	20000068 	.word	0x20000068
 8001058:	20000380 	.word	0x20000380

0800105c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_Init+0x3c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <HAL_Init+0x3c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001074:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f948 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107c:	200f      	movs	r0, #15
 800107e:	f000 f80f 	bl	80010a0 <HAL_InitTick>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e001      	b.n	8001092 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108e:	f7ff fe7e 	bl	8000d8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58004000 	.word	0x58004000

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d024      	beq.n	80010fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b4:	f001 fe34 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_InitTick+0x6c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f950 	bl	8001372 <HAL_SYSTICK_Config>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10f      	bne.n	80010f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d809      	bhi.n	80010f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	f000 f91c 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <HAL_InitTick+0x70>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e007      	b.n	8001102 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e004      	b.n	8001102 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e001      	b.n	8001102 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000014 	.word	0x20000014
 8001110:	20000010 	.word	0x20000010

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000014 	.word	0x20000014
 8001138:	20000234 	.word	0x20000234

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000234 	.word	0x20000234

08001154 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTickPrio+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000010 	.word	0x20000010

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	@ (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff40 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff33 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa4 	bl	80012c8 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e08e      	b.n	80014bc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_DMA_Init+0x138>)
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d80f      	bhi.n	80013ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <HAL_DMA_Init+0x13c>)
 80013b2:	4413      	add	r3, r2
 80013b4:	4a45      	ldr	r2, [pc, #276]	@ (80014cc <HAL_DMA_Init+0x140>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a42      	ldr	r2, [pc, #264]	@ (80014d0 <HAL_DMA_Init+0x144>)
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c8:	e00e      	b.n	80013e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <HAL_DMA_Init+0x148>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <HAL_DMA_Init+0x140>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	009a      	lsls	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a3c      	ldr	r2, [pc, #240]	@ (80014d8 <HAL_DMA_Init+0x14c>)
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f9b6 	bl	80017ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001448:	d102      	bne.n	8001450 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001458:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800145c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001466:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d010      	beq.n	8001492 <HAL_DMA_Init+0x106>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d80c      	bhi.n	8001492 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9d5 	bl	8001828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	e008      	b.n	80014a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40020407 	.word	0x40020407
 80014c8:	bffdfff8 	.word	0xbffdfff8
 80014cc:	cccccccd 	.word	0xcccccccd
 80014d0:	40020000 	.word	0x40020000
 80014d4:	bffdfbf8 	.word	0xbffdfbf8
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_DMA_Start_IT+0x20>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e066      	b.n	80015ca <HAL_DMA_Start_IT+0xee>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d155      	bne.n	80015bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 f8fb 	bl	8001730 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 020e 	orr.w	r2, r2, #14
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e00f      	b.n	8001574 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0204 	bic.w	r2, r2, #4
 8001562:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 020a 	orr.w	r2, r2, #10
 8001572:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800158c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001590:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e005      	b.n	80015c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f003 031c 	and.w	r3, r3, #28
 80015f2:	2204      	movs	r2, #4
 80015f4:	409a      	lsls	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d026      	beq.n	800164c <HAL_DMA_IRQHandler+0x7a>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0204 	bic.w	r2, r2, #4
 8001624:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f003 021c 	and.w	r2, r3, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2104      	movs	r1, #4
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	2b00      	cmp	r3, #0
 8001640:	d071      	beq.n	8001726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800164a:	e06c      	b.n	8001726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001650:	f003 031c 	and.w	r3, r3, #28
 8001654:	2202      	movs	r2, #2
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d02e      	beq.n	80016be <HAL_DMA_IRQHandler+0xec>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d029      	beq.n	80016be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10b      	bne.n	8001690 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020a 	bic.w	r2, r2, #10
 8001686:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	f003 021c 	and.w	r2, r3, #28
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	2102      	movs	r1, #2
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d038      	beq.n	8001726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016bc:	e033      	b.n	8001726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f003 031c 	and.w	r3, r3, #28
 80016c6:	2208      	movs	r2, #8
 80016c8:	409a      	lsls	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d02a      	beq.n	8001728 <HAL_DMA_IRQHandler+0x156>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d025      	beq.n	8001728 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f003 021c 	and.w	r2, r3, #28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171a:	2b00      	cmp	r3, #0
 800171c:	d004      	beq.n	8001728 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001726:	bf00      	nop
 8001728:	bf00      	nop
}
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001746:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001758:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f003 021c 	and.w	r2, r3, #28
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d108      	bne.n	8001790 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800178e:	e007      	b.n	80017a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	60da      	str	r2, [r3, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017bc:	429a      	cmp	r2, r3
 80017be:	d80a      	bhi.n	80017d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80017cc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6493      	str	r3, [r2, #72]	@ 0x48
 80017d4:	e007      	b.n	80017e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	009a      	lsls	r2, r3, #2
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017e0:	4413      	add	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3b08      	subs	r3, #8
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017fc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2201      	movs	r2, #1
 8001806:	409a      	lsls	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40020407 	.word	0x40020407
 800181c:	4002081c 	.word	0x4002081c
 8001820:	cccccccd 	.word	0xcccccccd
 8001824:	40020880 	.word	0x40020880

08001828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001838:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800184c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	1000823f 	.word	0x1000823f
 8001870:	40020940 	.word	0x40020940

08001874 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e14c      	b.n	8001b1e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 813e 	beq.w	8001b18 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x40>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 0201 	and.w	r2, r3, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8098 	beq.w	8001b18 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019e8:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <HAL_GPIO_Init+0x2c8>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a12:	d019      	beq.n	8001a48 <HAL_GPIO_Init+0x1d4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4a      	ldr	r2, [pc, #296]	@ (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <HAL_GPIO_Init+0x1d0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a49      	ldr	r2, [pc, #292]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1cc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_GPIO_Init+0x2d4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1c8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a47      	ldr	r2, [pc, #284]	@ (8001b4c <HAL_GPIO_Init+0x2d8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1c4>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e008      	b.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a38:	2307      	movs	r3, #7
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5a:	4938      	ldr	r1, [pc, #224]	@ (8001b3c <HAL_GPIO_Init+0x2c8>)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	4b39      	ldr	r3, [pc, #228]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8c:	4a30      	ldr	r2, [pc, #192]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab6:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f aeab 	bne.w	8001884 <HAL_GPIO_Init+0x10>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	58000800 	.word	0x58000800

08001b54 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	58000400 	.word	0x58000400

08001bd4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <HAL_PWREx_GetVoltageRange+0x18>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	58000400 	.word	0x58000400

08001bf0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c02:	d101      	bne.n	8001c08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c62:	d101      	bne.n	8001c68 <LL_RCC_HSE_IsReady+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_RCC_HSE_IsReady+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc2:	d101      	bne.n	8001cc8 <LL_RCC_HSI_IsReady+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_RCC_HSI_IsReady+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d101      	bne.n	8001d5a <LL_RCC_HSI48_IsReady+0x18>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_RCC_HSI48_IsReady+0x1a>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d101      	bne.n	8001e06 <LL_RCC_LSE_IsReady+0x18>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_RCC_LSE_IsReady+0x1a>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d101      	bne.n	8001e6e <LL_RCC_LSI1_IsReady+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_RCC_LSI1_IsReady+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d101      	bne.n	8001ed6 <LL_RCC_LSI2_IsReady+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_RCC_LSI2_IsReady+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d101      	bne.n	8001f62 <LL_RCC_MSI_IsReady+0x16>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <LL_RCC_MSI_IsReady+0x18>
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2bb0      	cmp	r3, #176	@ 0xb0
 8001fac:	d901      	bls.n	8001fb2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001fae:	23b0      	movs	r3, #176	@ 0xb0
 8001fb0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 0203 	bic.w	r2, r3, #3
 8001ffc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800203c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800218c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002190:	6013      	str	r3, [r2, #0]
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ae:	d101      	bne.n	80021b4 <LL_RCC_PLL_IsReady+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_RCC_PLL_IsReady+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002234:	d101      	bne.n	800223a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800225a:	d101      	bne.n	8002260 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002274:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d101      	bne.n	8002286 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022a4:	d101      	bne.n	80022aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022c8:	d101      	bne.n	80022ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08d      	sub	sp, #52	@ 0x34
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e363      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 808d 	beq.w	8002416 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fc:	f7ff fe89 	bl	8002012 <LL_RCC_GetSysClkSource>
 8002300:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002302:	f7ff ff82 	bl	800220a <LL_RCC_PLL_GetMainSource>
 8002306:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x3e>
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d147      	bne.n	80023a4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002316:	2b01      	cmp	r3, #1
 8002318:	d144      	bne.n	80023a4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e347      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800232a:	f7ff fe34 	bl	8001f96 <LL_RCC_MSI_GetRange>
 800232e:	4603      	mov	r3, r0
 8002330:	429c      	cmp	r4, r3
 8002332:	d914      	bls.n	800235e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fd31 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e336      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe0e 	bl	8001f6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe32 	bl	8001fc0 <LL_RCC_MSI_SetCalibTrimming>
 800235c:	e013      	b.n	8002386 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe03 	bl	8001f6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe27 	bl	8001fc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fd12 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e317      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002386:	f000 fccb 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 800238a:	4603      	mov	r3, r0
 800238c:	4aa4      	ldr	r2, [pc, #656]	@ (8002620 <HAL_RCC_OscConfig+0x344>)
 800238e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002390:	4ba4      	ldr	r3, [pc, #656]	@ (8002624 <HAL_RCC_OscConfig+0x348>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fe83 	bl	80010a0 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d039      	beq.n	8002414 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e308      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01e      	beq.n	80023ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ac:	f7ff fdb0 	bl	8001f10 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fec4 	bl	800113c <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b8:	f7fe fec0 	bl	800113c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2f5      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ca:	f7ff fdbf 	bl	8001f4c <LL_RCC_MSI_IsReady>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f1      	beq.n	80023b8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fdc8 	bl	8001f6e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fdec 	bl	8001fc0 <LL_RCC_MSI_SetCalibTrimming>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ea:	f7ff fda0 	bl	8001f2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fea5 	bl	800113c <HAL_GetTick>
 80023f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f6:	f7fe fea1 	bl	800113c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e2d6      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002408:	f7ff fda0 	bl	8001f4c <LL_RCC_MSI_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f1      	bne.n	80023f6 <HAL_RCC_OscConfig+0x11a>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002414:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d047      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002422:	f7ff fdf6 	bl	8002012 <LL_RCC_GetSysClkSource>
 8002426:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002428:	f7ff feef 	bl	800220a <LL_RCC_PLL_GetMainSource>
 800242c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x164>
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d134      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e2b4      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x180>
 8002456:	f7ff fbdd 	bl	8001c14 <LL_RCC_HSE_Enable>
 800245a:	e001      	b.n	8002460 <HAL_RCC_OscConfig+0x184>
 800245c:	f7ff fbe9 	bl	8001c32 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d012      	beq.n	800248e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fe68 	bl	800113c <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fe64 	bl	800113c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e299      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002482:	f7ff fbe5 	bl	8001c50 <LL_RCC_HSE_IsReady>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f1      	beq.n	8002470 <HAL_RCC_OscConfig+0x194>
 800248c:	e011      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fe55 	bl	800113c <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002496:	f7fe fe51 	bl	800113c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	@ 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e286      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024a8:	f7ff fbd2 	bl	8001c50 <LL_RCC_HSE_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f1      	bne.n	8002496 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d04c      	beq.n	8002558 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	f7ff fda8 	bl	8002012 <LL_RCC_GetSysClkSource>
 80024c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c4:	f7ff fea1 	bl	800220a <LL_RCC_PLL_GetMainSource>
 80024c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x200>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d10e      	bne.n	80024f4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e266      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fbf1 	bl	8001cd4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024f2:	e031      	b.n	8002558 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d019      	beq.n	8002530 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	f7ff fbba 	bl	8001c74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe1c 	bl	800113c <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fe18 	bl	800113c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e24d      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800251a:	f7ff fbc9 	bl	8001cb0 <LL_RCC_HSI_IsReady>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f1      	beq.n	8002508 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fbd3 	bl	8001cd4 <LL_RCC_HSI_SetCalibTrimming>
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002530:	f7ff fbaf 	bl	8001c92 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fe02 	bl	800113c <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe fdfe 	bl	800113c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e233      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800254e:	f7ff fbaf 	bl	8001cb0 <LL_RCC_HSI_IsReady>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f1      	bne.n	800253c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a3 	beq.w	80026b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d076      	beq.n	8002668 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d046      	beq.n	8002614 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002586:	f7ff fc66 	bl	8001e56 <LL_RCC_LSI1_IsReady>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d113      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002590:	f7ff fc3f 	bl	8001e12 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002594:	f7fe fdd2 	bl	800113c <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800259c:	f7fe fdce 	bl	800113c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e203      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ae:	f7ff fc52 	bl	8001e56 <LL_RCC_LSI1_IsReady>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f1      	beq.n	800259c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025b8:	f7ff fc5f 	bl	8001e7a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fdbe 	bl	800113c <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025c4:	f7fe fdba 	bl	800113c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1ef      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025d6:	f7ff fc72 	bl	8001ebe <LL_RCC_LSI2_IsReady>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f1      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fc7c 	bl	8001ee2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025ea:	f7ff fc23 	bl	8001e34 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fda5 	bl	800113c <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025f6:	f7fe fda1 	bl	800113c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1d6      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002608:	f7ff fc25 	bl	8001e56 <LL_RCC_LSI1_IsReady>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f1      	bne.n	80025f6 <HAL_RCC_OscConfig+0x31a>
 8002612:	e051      	b.n	80026b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002614:	f7ff fbfd 	bl	8001e12 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fd90 	bl	800113c <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800261e:	e00c      	b.n	800263a <HAL_RCC_OscConfig+0x35e>
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002628:	f7fe fd88 	bl	800113c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1bd      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800263a:	f7ff fc0c 	bl	8001e56 <LL_RCC_LSI1_IsReady>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f1      	beq.n	8002628 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002644:	f7ff fc2a 	bl	8001e9c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800264a:	f7fe fd77 	bl	800113c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1ac      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800265c:	f7ff fc2f 	bl	8001ebe <LL_RCC_LSI2_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f1      	bne.n	800264a <HAL_RCC_OscConfig+0x36e>
 8002666:	e027      	b.n	80026b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002668:	f7ff fc18 	bl	8001e9c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe fd66 	bl	800113c <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002674:	f7fe fd62 	bl	800113c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e197      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002686:	f7ff fc1a 	bl	8001ebe <LL_RCC_LSI2_IsReady>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f1      	bne.n	8002674 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002690:	f7ff fbd0 	bl	8001e34 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fd52 	bl	800113c <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800269c:	f7fe fd4e 	bl	800113c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e183      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ae:	f7ff fbd2 	bl	8001e56 <LL_RCC_LSI1_IsReady>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f1      	bne.n	800269c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002964 <HAL_RCC_OscConfig+0x688>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d114      	bne.n	80026fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026d0:	f7ff fa70 	bl	8001bb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d4:	f7fe fd32 	bl	800113c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fd2e 	bl	800113c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e163      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4b9d      	ldr	r3, [pc, #628]	@ (8002964 <HAL_RCC_OscConfig+0x688>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d102      	bne.n	8002708 <HAL_RCC_OscConfig+0x42c>
 8002702:	f7ff fb30 	bl	8001d66 <LL_RCC_LSE_Enable>
 8002706:	e00c      	b.n	8002722 <HAL_RCC_OscConfig+0x446>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d104      	bne.n	800271a <HAL_RCC_OscConfig+0x43e>
 8002710:	f7ff fb4b 	bl	8001daa <LL_RCC_LSE_EnableBypass>
 8002714:	f7ff fb27 	bl	8001d66 <LL_RCC_LSE_Enable>
 8002718:	e003      	b.n	8002722 <HAL_RCC_OscConfig+0x446>
 800271a:	f7ff fb35 	bl	8001d88 <LL_RCC_LSE_Disable>
 800271e:	f7ff fb55 	bl	8001dcc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d014      	beq.n	8002754 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fd07 	bl	800113c <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fd03 	bl	800113c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e136      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002748:	f7ff fb51 	bl	8001dee <LL_RCC_LSE_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <HAL_RCC_OscConfig+0x456>
 8002752:	e013      	b.n	800277c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fcf2 	bl	800113c <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fcee 	bl	800113c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e121      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002772:	f7ff fb3c 	bl	8001dee <LL_RCC_LSE_IsReady>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ef      	bne.n	800275c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d014      	beq.n	80027ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002790:	f7ff fab5 	bl	8001cfe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fcd2 	bl	800113c <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279c:	f7fe fcce 	bl	800113c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e103      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ae:	f7ff fac8 	bl	8001d42 <LL_RCC_HSI48_IsReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f1      	beq.n	800279c <HAL_RCC_OscConfig+0x4c0>
 80027b8:	e013      	b.n	80027e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ba:	f7ff fab1 	bl	8001d20 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fcbd 	bl	800113c <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c6:	f7fe fcb9 	bl	800113c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0ee      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027d8:	f7ff fab3 	bl	8001d42 <LL_RCC_HSI48_IsReady>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f1      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80e4 	beq.w	80029b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	f7ff fc11 	bl	8002012 <LL_RCC_GetSysClkSource>
 80027f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f040 80b4 	bne.w	800296c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	429a      	cmp	r2, r3
 8002810:	d123      	bne.n	800285a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d11c      	bne.n	800285a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d114      	bne.n	800285a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d10d      	bne.n	800285a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d05d      	beq.n	8002916 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d058      	beq.n	8002912 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0a1      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002872:	f7ff fc84 	bl	800217e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002876:	f7fe fc61 	bl	800113c <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fc5d 	bl	800113c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e092      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ef      	bne.n	800287e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b30      	ldr	r3, [pc, #192]	@ (8002968 <HAL_RCC_OscConfig+0x68c>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028ca:	430a      	orrs	r2, r1
 80028cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d4:	f7ff fc44 	bl	8002160 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fc28 	bl	800113c <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fc24 	bl	800113c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e059      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	e050      	b.n	80029b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04f      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d147      	bne.n	80029b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002924:	f7ff fc1c 	bl	8002160 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe fc00 	bl	800113c <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fbfc 	bl	800113c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e031      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x664>
 8002960:	e028      	b.n	80029b4 <HAL_RCC_OscConfig+0x6d8>
 8002962:	bf00      	nop
 8002964:	58000400 	.word	0x58000400
 8002968:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d01e      	beq.n	80029b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	f7ff fc04 	bl	800217e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fbe1 	bl	800113c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe fbdd 	bl	800113c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e012      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ef      	bne.n	800297e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_OscConfig+0x6e4>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	60cb      	str	r3, [r1, #12]
 80029ae:	e001      	b.n	80029b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3734      	adds	r7, #52	@ 0x34
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	eefefffc 	.word	0xeefefffc

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e12d      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b98      	ldr	r3, [pc, #608]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d91b      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b95      	ldr	r3, [pc, #596]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4993      	ldr	r1, [pc, #588]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f6:	f7fe fba1 	bl	800113c <HAL_GetTick>
 80029fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029fe:	f7fe fb9d 	bl	800113c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e111      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	4b8a      	ldr	r3, [pc, #552]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d1ef      	bne.n	80029fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fafb 	bl	800202a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fb82 	bl	800113c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a3c:	f7fe fb7e 	bl	800113c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0f2      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a4e:	f7ff fbe8 	bl	8002222 <LL_RCC_IsActiveFlag_HPRE>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f1      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d016      	beq.n	8002a92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff faf2 	bl	8002052 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fb65 	bl	800113c <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a76:	f7fe fb61 	bl	800113c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0d5      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a88:	f7ff fbdd 	bl	8002246 <LL_RCC_IsActiveFlag_C2HPRE>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f1      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff faeb 	bl	800207e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fb48 	bl	800113c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ab0:	f7fe fb44 	bl	800113c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0b8      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ac2:	f7ff fbd3 	bl	800226c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f1      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fae5 	bl	80020ac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fb2b 	bl	800113c <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aea:	f7fe fb27 	bl	800113c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e09b      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002afc:	f7ff fbc9 	bl	8002292 <LL_RCC_IsActiveFlag_PPRE1>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f1      	beq.n	8002aea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d017      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fadb 	bl	80020d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe fb0d 	bl	800113c <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b26:	f7fe fb09 	bl	800113c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e07d      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b38:	f7ff fbbd 	bl	80022b6 <LL_RCC_IsActiveFlag_PPRE2>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f1      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d043      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b56:	f7ff f87b 	bl	8001c50 <LL_RCC_HSE_IsReady>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11e      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e067      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b6c:	f7ff fb16 	bl	800219c <LL_RCC_PLL_IsReady>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d113      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e05c      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b82:	f7ff f9e3 	bl	8001f4c <LL_RCC_MSI_IsReady>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e051      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b90:	f7ff f88e 	bl	8001cb0 <LL_RCC_HSI_IsReady>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e04a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fa21 	bl	8001fea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fac8 	bl	800113c <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe fac4 	bl	800113c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e036      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	f7ff fa24 	bl	8002012 <LL_RCC_GetSysClkSource>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d1ec      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd6:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d21b      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be4:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	4913      	ldr	r1, [pc, #76]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf4:	f7fe faa2 	bl	800113c <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bfc:	f7fe fa9e 	bl	800113c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e012      	b.n	8002c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCC_ClockConfig+0x278>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1ef      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c1c:	f000 f880 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <HAL_RCC_ClockConfig+0x27c>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c26:	f7fe fa95 	bl	8001154 <HAL_GetTickPrio>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fa37 	bl	80010a0 <HAL_InitTick>
 8002c32:	4603      	mov	r3, r0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	58004000 	.word	0x58004000
 8002c40:	2000000c 	.word	0x2000000c

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4a:	f7ff f9e2 	bl	8002012 <LL_RCC_GetSysClkSource>
 8002c4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c56:	f7ff f99e 	bl	8001f96 <LL_RCC_MSI_GetRange>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a2b      	ldr	r2, [pc, #172]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e04b      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c72:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e045      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d10a      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c7e:	f7fe ffb7 	bl	8001bf0 <LL_RCC_HSE_IsEnabledDiv2>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e03a      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c8e:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e037      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c94:	f7ff fab9 	bl	800220a <LL_RCC_PLL_GetMainSource>
 8002c98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x64>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x6a>
 8002ca6:	e00d      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002caa:	60bb      	str	r3, [r7, #8]
        break;
 8002cac:	e015      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cae:	f7fe ff9f 	bl	8001bf0 <LL_RCC_HSE_IsEnabledDiv2>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cbc:	e00d      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xd8>)
 8002cc0:	60bb      	str	r3, [r7, #8]
        break;
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cc4:	f7ff f967 	bl	8001f96 <LL_RCC_MSI_GetRange>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	60bb      	str	r3, [r7, #8]
        break;
 8002cd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002cda:	f7ff fa71 	bl	80021c0 <LL_RCC_PLL_GetN>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	fb03 f402 	mul.w	r4, r3, r2
 8002ce6:	f7ff fa84 	bl	80021f2 <LL_RCC_PLL_GetDivider>
 8002cea:	4603      	mov	r3, r0
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	3301      	adds	r3, #1
 8002cf0:	fbb4 f4f3 	udiv	r4, r4, r3
 8002cf4:	f7ff fa71 	bl	80021da <LL_RCC_PLL_GetR>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	0f5b      	lsrs	r3, r3, #29
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d04:	68fb      	ldr	r3, [r7, #12]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08005060 	.word	0x08005060
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b598      	push	{r3, r4, r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d24:	f7ff ff8e 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	f7ff f9e7 	bl	80020fc <LL_RCC_GetAHBPrescaler>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a03      	ldr	r2, [pc, #12]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd98      	pop	{r3, r4, r7, pc}
 8002d44:	08005000 	.word	0x08005000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d4c:	f7ff ffe8 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d50:	4604      	mov	r4, r0
 8002d52:	f7ff f9ed 	bl	8002130 <LL_RCC_GetAPB1Prescaler>
 8002d56:	4603      	mov	r3, r0
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd98      	pop	{r3, r4, r7, pc}
 8002d70:	08005040 	.word	0x08005040

08002d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d74:	b598      	push	{r3, r4, r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d78:	f7ff ffd2 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	f7ff f9e3 	bl	8002148 <LL_RCC_GetAPB2Prescaler>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0adb      	lsrs	r3, r3, #11
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd98      	pop	{r3, r4, r7, pc}
 8002d9c:	08005040 	.word	0x08005040

08002da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2bb0      	cmp	r3, #176	@ 0xb0
 8002dac:	d903      	bls.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e007      	b.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a11      	ldr	r2, [pc, #68]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002dc6:	f7ff f9a5 	bl	8002114 <LL_RCC_GetAHB4Prescaler>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9c      	lsrs	r4, r3, #18
 8002dea:	f7fe fef3 	bl	8001bd4 <HAL_PWREx_GetVoltageRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 f80c 	bl	8002e10 <RCC_SetFlashLatency>
 8002df8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	08005060 	.word	0x08005060
 8002e08:	08005000 	.word	0x08005000
 8002e0c:	431bde83 	.word	0x431bde83

08002e10 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b093      	sub	sp, #76	@ 0x4c
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <RCC_SetFlashLatency+0xe8>)
 8002e1c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e26:	4a35      	ldr	r2, [pc, #212]	@ (8002efc <RCC_SetFlashLatency+0xec>)
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e32:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <RCC_SetFlashLatency+0xf0>)
 8002e34:	f107 040c 	add.w	r4, r7, #12
 8002e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e3e:	2300      	movs	r3, #0
 8002e40:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e48:	d11a      	bne.n	8002e80 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e4e:	e013      	b.n	8002e78 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3348      	adds	r3, #72	@ 0x48
 8002e56:	443b      	add	r3, r7
 8002e58:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d807      	bhi.n	8002e72 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3348      	adds	r3, #72	@ 0x48
 8002e68:	443b      	add	r3, r7
 8002e6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e6e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e70:	e020      	b.n	8002eb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	3301      	adds	r3, #1
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d9e8      	bls.n	8002e50 <RCC_SetFlashLatency+0x40>
 8002e7e:	e019      	b.n	8002eb4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e84:	e013      	b.n	8002eae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3348      	adds	r3, #72	@ 0x48
 8002e8c:	443b      	add	r3, r7
 8002e8e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d807      	bhi.n	8002ea8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	3348      	adds	r3, #72	@ 0x48
 8002e9e:	443b      	add	r3, r7
 8002ea0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002ea6:	e005      	b.n	8002eb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d9e8      	bls.n	8002e86 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <RCC_SetFlashLatency+0xf4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 0207 	bic.w	r2, r3, #7
 8002ebc:	4911      	ldr	r1, [pc, #68]	@ (8002f04 <RCC_SetFlashLatency+0xf4>)
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ec4:	f7fe f93a 	bl	800113c <HAL_GetTick>
 8002ec8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eca:	e008      	b.n	8002ede <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ecc:	f7fe f936 	bl	800113c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e007      	b.n	8002eee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ede:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <RCC_SetFlashLatency+0xf4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1ef      	bne.n	8002ecc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	374c      	adds	r7, #76	@ 0x4c
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08004fd4 	.word	0x08004fd4
 8002efc:	08004fe4 	.word	0x08004fe4
 8002f00:	08004ff0 	.word	0x08004ff0
 8002f04:	58004000 	.word	0x58004000

08002f08 <LL_RCC_LSE_IsEnabled>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <LL_RCC_LSE_IsEnabled+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_LSE_IsReady>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d101      	bne.n	8002f44 <LL_RCC_LSE_IsReady+0x18>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <LL_RCC_LSE_IsReady+0x1a>
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_SetRFWKPClockSource>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_SetSMPSClockSource>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_RCC_SetSMPSPrescaler>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_SetUSARTClockSource>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f023 0203 	bic.w	r2, r3, #3
 8002fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_SetLPUARTClockSource>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003008:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_RCC_SetI2CClockSource>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003030:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_SetLPTIMClockSource>:
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_RCC_SetSAIClockSource>:
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_SetRNGClockSource>:
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_SetCLK48ClockSource>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_RCC_SetUSBClockSource>:
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffe3 	bl	80030ea <LL_RCC_SetCLK48ClockSource>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <LL_RCC_SetADCClockSource>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003140:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_RCC_SetRTCClockSource>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800316c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_RCC_GetRTCClockSource>:
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_RCC_ForceBackupDomainReset>:
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_PLLSAI1_Enable>:
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_PLLSAI1_Disable>:
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800320e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_RCC_PLLSAI1_IsReady>:
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003230:	d101      	bne.n	8003236 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800324a:	2300      	movs	r3, #0
 800324c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800324e:	2300      	movs	r3, #0
 8003250:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d034      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003266:	d021      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003268:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800326c:	d81b      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800326e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003272:	d01d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003278:	d815      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800327e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003282:	d110      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800328e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003292:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003294:	e00d      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f947 	bl	800352e <RCCEx_PLLSAI1_ConfigNP>
 80032a0:	4603      	mov	r3, r0
 80032a2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032a4:	e005      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	77fb      	strb	r3, [r7, #31]
        break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fee8 	bl	8003092 <LL_RCC_SetSAIClockSource>
 80032c2:	e001      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d046      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032d4:	f7ff ff56 	bl	8003184 <LL_RCC_GetRTCClockSource>
 80032d8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d03c      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032e4:	f7fe fc66 	bl	8001bb4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff30 	bl	8003158 <LL_RCC_SetRTCClockSource>
 80032f8:	e02e      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003304:	f7ff ff4b 	bl	800319e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003308:	f7ff ff5a 	bl	80031c0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800331a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003324:	f7ff fdf0 	bl	8002f08 <LL_RCC_LSE_IsEnabled>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d114      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800332e:	f7fd ff05 	bl	800113c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003334:	e00b      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fd ff01 	bl	800113c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d902      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	77fb      	strb	r3, [r7, #31]
              break;
 800334c:	e004      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800334e:	f7ff fded 	bl	8002f2c <LL_RCC_LSE_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d1ee      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	77bb      	strb	r3, [r7, #30]
 800335c:	e001      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe2a 	bl	8002fcc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe35 	bl	8002ff8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe5d 	bl	800305e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe52 	bl	800305e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe2a 	bl	8003024 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fe1f 	bl	8003024 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d022      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fe8d 	bl	8003116 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003404:	d107      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003414:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f8dd 	bl	80035e4 <RCCEx_PLLSAI1_ConfigNQ>
 800342a:	4603      	mov	r3, r0
 800342c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003434:	7ffb      	ldrb	r3, [r7, #31]
 8003436:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003456:	d003      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe2a 	bl	80030be <LL_RCC_SetRNGClockSource>
 800346a:	e00a      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff fe21 	bl	80030be <LL_RCC_SetRNGClockSource>
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fe34 	bl	80030ea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800348a:	d107      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d022      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fe3d 	bl	800312c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ba:	d107      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d4:	d10b      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f8dd 	bl	800369a <RCCEx_PLLSAI1_ConfigNR>
 80034e0:	4603      	mov	r3, r0
 80034e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fd26 	bl	8002f50 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fd45 	bl	8002fa4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fd2c 	bl	8002f7c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003524:	7fbb      	ldrb	r3, [r7, #30]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800353a:	f7ff fe61 	bl	8003200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800353e:	f7fd fdfd 	bl	800113c <HAL_GetTick>
 8003542:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003544:	e009      	b.n	800355a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003546:	f7fd fdf9 	bl	800113c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d902      	bls.n	800355a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	73fb      	strb	r3, [r7, #15]
      break;
 8003558:	e004      	b.n	8003564 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800355a:	f7ff fe60 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d137      	bne.n	80035da <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003598:	f7ff fe23 	bl	80031e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd fdce 	bl	800113c <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035a2:	e009      	b.n	80035b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a4:	f7fd fdca 	bl	800113c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	73fb      	strb	r3, [r7, #15]
        break;
 80035b6:	e004      	b.n	80035c2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035b8:	f7ff fe31 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d1f0      	bne.n	80035a4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d108      	bne.n	80035da <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035f0:	f7ff fe06 	bl	8003200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035f4:	f7fd fda2 	bl	800113c <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035fa:	e009      	b.n	8003610 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fc:	f7fd fd9e 	bl	800113c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	73fb      	strb	r3, [r7, #15]
      break;
 800360e:	e004      	b.n	800361a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003610:	f7ff fe05 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d137      	bne.n	8003690 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003634:	4313      	orrs	r3, r2
 8003636:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800364a:	4313      	orrs	r3, r2
 800364c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800364e:	f7ff fdc8 	bl	80031e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003652:	f7fd fd73 	bl	800113c <HAL_GetTick>
 8003656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003658:	e009      	b.n	800366e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800365a:	f7fd fd6f 	bl	800113c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	73fb      	strb	r3, [r7, #15]
        break;
 800366c:	e004      	b.n	8003678 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800366e:	f7ff fdd6 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d1f0      	bne.n	800365a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036a6:	f7ff fdab 	bl	8003200 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036aa:	f7fd fd47 	bl	800113c <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036b0:	e009      	b.n	80036c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036b2:	f7fd fd43 	bl	800113c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d902      	bls.n	80036c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e004      	b.n	80036d0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036c6:	f7ff fdaa 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d137      	bne.n	8003746 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ea:	4313      	orrs	r3, r2
 80036ec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003704:	f7ff fd6d 	bl	80031e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fd fd18 	bl	800113c <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800370e:	e009      	b.n	8003724 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003710:	f7fd fd14 	bl	800113c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	73fb      	strb	r3, [r7, #15]
        break;
 8003722:	e004      	b.n	800372e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003724:	f7ff fd7b 	bl	800321e <LL_RCC_PLLSAI1_IsReady>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d1f0      	bne.n	8003710 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e027      	b.n	80037b2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7a5b      	ldrb	r3, [r3, #9]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fb12 	bl	8000d9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0120 	bic.w	r1, r3, #32
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0204 	orr.w	r2, r2, #4
 80037a2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7a1b      	ldrb	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_RNG_GenerateRandomNumber+0x1a>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e044      	b.n	800385e <HAL_RNG_GenerateRandomNumber+0xa4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7a5b      	ldrb	r3, [r3, #9]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d133      	bne.n	800384c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ea:	f7fd fca7 	bl	800113c <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80037f0:	e018      	b.n	8003824 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80037f2:	f7fd fca3 	bl	800113c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d911      	bls.n	8003824 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d00a      	beq.n	8003824 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01c      	b.n	800385e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d1df      	bne.n	80037f2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	725a      	strb	r2, [r3, #9]
 800384a:	e004      	b.n	8003856 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	721a      	strb	r2, [r3, #8]

  return status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <LL_RCC_GetUSARTClockSource>:
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003872:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4013      	ands	r3, r2
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_GetLPUARTClockSource>:
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003892:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4013      	ands	r3, r2
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e042      	b.n	800393e <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fa90 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	@ 0x24
 80038d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb89 	bl	8004008 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f95e 	bl	8003bb8 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01b      	b.n	800393e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fc08 	bl	800414c <UART_CheckIdleState>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b08a      	sub	sp, #40	@ 0x28
 800394a:	af02      	add	r7, sp, #8
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	2b20      	cmp	r3, #32
 800395e:	d17b      	bne.n	8003a58 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_UART_Transmit+0x26>
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e074      	b.n	8003a5a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2221      	movs	r2, #33	@ 0x21
 800397c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003980:	f7fd fbdc 	bl	800113c <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399e:	d108      	bne.n	80039b2 <HAL_UART_Transmit+0x6c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e003      	b.n	80039ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039ba:	e030      	b.n	8003a1e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	@ 0x80
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fc6a 	bl	80042a0 <UART_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e03d      	b.n	8003a5a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	3302      	adds	r3, #2
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e007      	b.n	8003a0c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1c8      	bne.n	80039bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	@ 0x40
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fc33 	bl	80042a0 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e006      	b.n	8003a5a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	@ 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d167      	bne.n	8003b4c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Transmit_DMA+0x24>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e060      	b.n	8003b4e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2221      	movs	r2, #33	@ 0x21
 8003aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003abe:	4a26      	ldr	r2, [pc, #152]	@ (8003b58 <HAL_UART_Transmit_DMA+0xf4>)
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac6:	4a25      	ldr	r2, [pc, #148]	@ (8003b5c <HAL_UART_Transmit_DMA+0xf8>)
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ace:	4a24      	ldr	r2, [pc, #144]	@ (8003b60 <HAL_UART_Transmit_DMA+0xfc>)
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3328      	adds	r3, #40	@ 0x28
 8003aea:	461a      	mov	r2, r3
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	f7fd fcf5 	bl	80014dc <HAL_DMA_Start_IT>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2210      	movs	r2, #16
 8003afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e020      	b.n	8003b4e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2240      	movs	r2, #64	@ 0x40
 8003b12:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	613b      	str	r3, [r7, #16]
   return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	623a      	str	r2, [r7, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	@ 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	080044c9 	.word	0x080044c9
 8003b5c:	08004563 	.word	0x08004563
 8003b60:	0800457f 	.word	0x0800457f

08003b64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4313      	orrs	r3, r2
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b08c      	sub	sp, #48	@ 0x30
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4baf      	ldr	r3, [pc, #700]	@ (8003ea4 <UART_SetConfig+0x2ec>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4aa4      	ldr	r2, [pc, #656]	@ (8003ea8 <UART_SetConfig+0x2f0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f023 010f 	bic.w	r1, r3, #15
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a95      	ldr	r2, [pc, #596]	@ (8003eac <UART_SetConfig+0x2f4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d125      	bne.n	8003ca8 <UART_SetConfig+0xf0>
 8003c5c:	2003      	movs	r0, #3
 8003c5e:	f7ff fe02 	bl	8003866 <LL_RCC_GetUSARTClockSource>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d81b      	bhi.n	8003ca0 <UART_SetConfig+0xe8>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0xb8>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c86:	e042      	b.n	8003d0e <UART_SetConfig+0x156>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8e:	e03e      	b.n	8003d0e <UART_SetConfig+0x156>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c96:	e03a      	b.n	8003d0e <UART_SetConfig+0x156>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9e:	e036      	b.n	8003d0e <UART_SetConfig+0x156>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	e032      	b.n	8003d0e <UART_SetConfig+0x156>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7e      	ldr	r2, [pc, #504]	@ (8003ea8 <UART_SetConfig+0x2f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12a      	bne.n	8003d08 <UART_SetConfig+0x150>
 8003cb2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003cb6:	f7ff fde6 	bl	8003886 <LL_RCC_GetLPUARTClockSource>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cc0:	d01a      	beq.n	8003cf8 <UART_SetConfig+0x140>
 8003cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cc6:	d81b      	bhi.n	8003d00 <UART_SetConfig+0x148>
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ccc:	d00c      	beq.n	8003ce8 <UART_SetConfig+0x130>
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd2:	d815      	bhi.n	8003d00 <UART_SetConfig+0x148>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <UART_SetConfig+0x128>
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cdc:	d008      	beq.n	8003cf0 <UART_SetConfig+0x138>
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x148>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce6:	e012      	b.n	8003d0e <UART_SetConfig+0x156>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cee:	e00e      	b.n	8003d0e <UART_SetConfig+0x156>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf6:	e00a      	b.n	8003d0e <UART_SetConfig+0x156>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfe:	e006      	b.n	8003d0e <UART_SetConfig+0x156>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d06:	e002      	b.n	8003d0e <UART_SetConfig+0x156>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a65      	ldr	r2, [pc, #404]	@ (8003ea8 <UART_SetConfig+0x2f0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	f040 8097 	bne.w	8003e48 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d823      	bhi.n	8003d6a <UART_SetConfig+0x1b2>
 8003d22:	a201      	add	r2, pc, #4	@ (adr r2, 8003d28 <UART_SetConfig+0x170>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d6b 	.word	0x08003d6b
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d6b 	.word	0x08003d6b
 8003d38:	08003d5b 	.word	0x08003d5b
 8003d3c:	08003d6b 	.word	0x08003d6b
 8003d40:	08003d6b 	.word	0x08003d6b
 8003d44:	08003d6b 	.word	0x08003d6b
 8003d48:	08003d63 	.word	0x08003d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fffc 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8003d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d52:	e010      	b.n	8003d76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d54:	4b56      	ldr	r3, [pc, #344]	@ (8003eb0 <UART_SetConfig+0x2f8>)
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d58:	e00d      	b.n	8003d76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5a:	f7fe ff73 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d60:	e009      	b.n	8003d76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d68:	e005      	b.n	8003d76 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 812b 	beq.w	8003fd4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb4 <UART_SetConfig+0x2fc>)
 8003d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d305      	bcc.n	8003dae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d903      	bls.n	8003db6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003db4:	e10e      	b.n	8003fd4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	2200      	movs	r2, #0
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	60fa      	str	r2, [r7, #12]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb4 <UART_SetConfig+0x2fc>)
 8003dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2200      	movs	r2, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dd8:	f7fc fa22 	bl	8000220 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	020b      	lsls	r3, r1, #8
 8003dee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003df2:	0202      	lsls	r2, r0, #8
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	6849      	ldr	r1, [r1, #4]
 8003df8:	0849      	lsrs	r1, r1, #1
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	4605      	mov	r5, r0
 8003e00:	eb12 0804 	adds.w	r8, r2, r4
 8003e04:	eb43 0905 	adc.w	r9, r3, r5
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	469a      	mov	sl, r3
 8003e10:	4693      	mov	fp, r2
 8003e12:	4652      	mov	r2, sl
 8003e14:	465b      	mov	r3, fp
 8003e16:	4640      	mov	r0, r8
 8003e18:	4649      	mov	r1, r9
 8003e1a:	f7fc fa01 	bl	8000220 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4613      	mov	r3, r2
 8003e24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e2c:	d308      	bcc.n	8003e40 <UART_SetConfig+0x288>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e34:	d204      	bcs.n	8003e40 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	e0c9      	b.n	8003fd4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e46:	e0c5      	b.n	8003fd4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	d16d      	bne.n	8003f2e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	3b01      	subs	r3, #1
 8003e58:	2b07      	cmp	r3, #7
 8003e5a:	d82d      	bhi.n	8003eb8 <UART_SetConfig+0x300>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <UART_SetConfig+0x2ac>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e85 	.word	0x08003e85
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003e93 	.word	0x08003e93
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7fe ff76 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e8a:	e01b      	b.n	8003ec4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <UART_SetConfig+0x2f8>)
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e90:	e018      	b.n	8003ec4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe fed7 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e98:	e014      	b.n	8003ec4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ea0:	e010      	b.n	8003ec4 <UART_SetConfig+0x30c>
 8003ea2:	bf00      	nop
 8003ea4:	cfff69f3 	.word	0xcfff69f3
 8003ea8:	40008000 	.word	0x40008000
 8003eac:	40013800 	.word	0x40013800
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	080050a0 	.word	0x080050a0
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8084 	beq.w	8003fd4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8004000 <UART_SetConfig+0x448>)
 8003ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	441a      	add	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d916      	bls.n	8003f26 <UART_SetConfig+0x36e>
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efe:	d212      	bcs.n	8003f26 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f023 030f 	bic.w	r3, r3, #15
 8003f08:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	8bfb      	ldrh	r3, [r7, #30]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	8bfa      	ldrh	r2, [r7, #30]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e056      	b.n	8003fd4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f2c:	e052      	b.n	8003fd4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	3b01      	subs	r3, #1
 8003f34:	2b07      	cmp	r3, #7
 8003f36:	d822      	bhi.n	8003f7e <UART_SetConfig+0x3c6>
 8003f38:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <UART_SetConfig+0x388>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f61 	.word	0x08003f61
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f6f 	.word	0x08003f6f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f7f 	.word	0x08003f7f
 8003f58:	08003f7f 	.word	0x08003f7f
 8003f5c:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe ff08 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b26      	ldr	r3, [pc, #152]	@ (8004004 <UART_SetConfig+0x44c>)
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fe69 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f88:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d021      	beq.n	8003fd4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	4a1a      	ldr	r2, [pc, #104]	@ (8004000 <UART_SetConfig+0x448>)
 8003f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d909      	bls.n	8003fce <UART_SetConfig+0x416>
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d205      	bcs.n	8003fce <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e002      	b.n	8003fd4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3730      	adds	r7, #48	@ 0x30
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	080050a0 	.word	0x080050a0
 8004004:	00f42400 	.word	0x00f42400

08004008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01a      	beq.n	800411e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004106:	d10a      	bne.n	800411e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b098      	sub	sp, #96	@ 0x60
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800415c:	f7fc ffee 	bl	800113c <HAL_GetTick>
 8004160:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d12f      	bne.n	80041d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f88e 	bl	80042a0 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d022      	beq.n	80041d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419e:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e063      	b.n	8004298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d149      	bne.n	8004272 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	2200      	movs	r2, #0
 80041e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f857 	bl	80042a0 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03c      	beq.n	8004272 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	623b      	str	r3, [r7, #32]
   return(result);
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800420c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004216:	633b      	str	r3, [r7, #48]	@ 0x30
 8004218:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800421c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e6      	bne.n	80041f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	60fb      	str	r3, [r7, #12]
   return(result);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800424a:	61fa      	str	r2, [r7, #28]
 800424c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	617b      	str	r3, [r7, #20]
   return(result);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e012      	b.n	8004298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3758      	adds	r7, #88	@ 0x58
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b0:	e04f      	b.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d04b      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fc ff3f 	bl	800113c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e04e      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d037      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b80      	cmp	r3, #128	@ 0x80
 80042e6:	d034      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d031      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d110      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f879 	bl	80043fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2208      	movs	r2, #8
 800430e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e029      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432c:	d111      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f85f 	bl	80043fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00f      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	429a      	cmp	r2, r3
 800436e:	d0a0      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800437a:	b480      	push	{r7}
 800437c:	b08f      	sub	sp, #60	@ 0x3c
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e6      	bne.n	8004382 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d4:	61ba      	str	r2, [r7, #24]
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	613b      	str	r3, [r7, #16]
   return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80043f0:	bf00      	nop
 80043f2:	373c      	adds	r7, #60	@ 0x3c
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b095      	sub	sp, #84	@ 0x54
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004422:	643b      	str	r3, [r7, #64]	@ 0x40
 8004424:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004428:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	61fb      	str	r3, [r7, #28]
   return(result);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800445a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e3      	bne.n	8004436 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d118      	bne.n	80044a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60bb      	str	r3, [r7, #8]
   return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044bc:	bf00      	nop
 80044be:	3754      	adds	r7, #84	@ 0x54
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b090      	sub	sp, #64	@ 0x40
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d137      	bne.n	8004554 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80044e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	623b      	str	r3, [r7, #32]
   return(result);
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800450c:	633a      	str	r2, [r7, #48]	@ 0x30
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	60fb      	str	r3, [r7, #12]
   return(result);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
 8004536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	617b      	str	r3, [r7, #20]
   return(result);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e6      	bne.n	8004520 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004552:	e002      	b.n	800455a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004554:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004556:	f7fc fb65 	bl	8000c24 <HAL_UART_TxCpltCallback>
}
 800455a:	bf00      	nop
 800455c:	3740      	adds	r7, #64	@ 0x40
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff faf7 	bl	8003b64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a6:	2b80      	cmp	r3, #128	@ 0x80
 80045a8:	d109      	bne.n	80045be <UART_DMAError+0x40>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b21      	cmp	r3, #33	@ 0x21
 80045ae:	d106      	bne.n	80045be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7ff fede 	bl	800437a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d109      	bne.n	80045e0 <UART_DMAError+0x62>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b22      	cmp	r3, #34	@ 0x22
 80045d0:	d106      	bne.n	80045e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80045da:	6978      	ldr	r0, [r7, #20]
 80045dc:	f7ff ff0e 	bl	80043fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f0:	6978      	ldr	r0, [r7, #20]
 80045f2:	f7ff fac1 	bl	8003b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <sniprintf>:
 8004600:	b40c      	push	{r2, r3}
 8004602:	b530      	push	{r4, r5, lr}
 8004604:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <sniprintf+0x68>)
 8004606:	1e0c      	subs	r4, r1, #0
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	b09d      	sub	sp, #116	@ 0x74
 800460c:	da08      	bge.n	8004620 <sniprintf+0x20>
 800460e:	238b      	movs	r3, #139	@ 0x8b
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	b01d      	add	sp, #116	@ 0x74
 8004618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800461c:	b002      	add	sp, #8
 800461e:	4770      	bx	lr
 8004620:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004624:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800462e:	bf14      	ite	ne
 8004630:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004634:	4623      	moveq	r3, r4
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800463e:	9002      	str	r0, [sp, #8]
 8004640:	9006      	str	r0, [sp, #24]
 8004642:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004646:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004648:	ab21      	add	r3, sp, #132	@ 0x84
 800464a:	a902      	add	r1, sp, #8
 800464c:	4628      	mov	r0, r5
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	f000 f994 	bl	800497c <_svfiprintf_r>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	bfbc      	itt	lt
 8004658:	238b      	movlt	r3, #139	@ 0x8b
 800465a:	602b      	strlt	r3, [r5, #0]
 800465c:	2c00      	cmp	r4, #0
 800465e:	d0da      	beq.n	8004616 <sniprintf+0x16>
 8004660:	9b02      	ldr	r3, [sp, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e7d6      	b.n	8004616 <sniprintf+0x16>
 8004668:	20000018 	.word	0x20000018

0800466c <memset>:
 800466c:	4402      	add	r2, r0
 800466e:	4603      	mov	r3, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	@ (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000018 	.word	0x20000018

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	@ (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	@ (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	@ (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	@ (80046cc <__libc_init_array+0x44>)
 800469c:	f000 fc64 	bl	8004f68 <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	080050f4 	.word	0x080050f4
 80046c4:	080050f4 	.word	0x080050f4
 80046c8:	080050f4 	.word	0x080050f4
 80046cc:	080050f8 	.word	0x080050f8

080046d0 <__retarget_lock_acquire_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_release_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <_free_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	2900      	cmp	r1, #0
 80046da:	d041      	beq.n	8004760 <_free_r+0x8c>
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f0c      	subs	r4, r1, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfb8      	it	lt
 80046e6:	18e4      	addlt	r4, r4, r3
 80046e8:	f000 f8e0 	bl	80048ac <__malloc_lock>
 80046ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <_free_r+0x90>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	b933      	cbnz	r3, 8004700 <_free_r+0x2c>
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	6014      	str	r4, [r2, #0]
 80046f6:	4628      	mov	r0, r5
 80046f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fc:	f000 b8dc 	b.w	80048b8 <__malloc_unlock>
 8004700:	42a3      	cmp	r3, r4
 8004702:	d908      	bls.n	8004716 <_free_r+0x42>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428b      	cmp	r3, r1
 800470a:	bf01      	itttt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	e7ed      	b.n	80046f2 <_free_r+0x1e>
 8004716:	461a      	mov	r2, r3
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b10b      	cbz	r3, 8004720 <_free_r+0x4c>
 800471c:	42a3      	cmp	r3, r4
 800471e:	d9fa      	bls.n	8004716 <_free_r+0x42>
 8004720:	6811      	ldr	r1, [r2, #0]
 8004722:	1850      	adds	r0, r2, r1
 8004724:	42a0      	cmp	r0, r4
 8004726:	d10b      	bne.n	8004740 <_free_r+0x6c>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	4401      	add	r1, r0
 800472c:	1850      	adds	r0, r2, r1
 800472e:	4283      	cmp	r3, r0
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	d1e0      	bne.n	80046f6 <_free_r+0x22>
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	6053      	str	r3, [r2, #4]
 800473a:	4408      	add	r0, r1
 800473c:	6010      	str	r0, [r2, #0]
 800473e:	e7da      	b.n	80046f6 <_free_r+0x22>
 8004740:	d902      	bls.n	8004748 <_free_r+0x74>
 8004742:	230c      	movs	r3, #12
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	e7d6      	b.n	80046f6 <_free_r+0x22>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	1821      	adds	r1, r4, r0
 800474c:	428b      	cmp	r3, r1
 800474e:	bf04      	itt	eq
 8004750:	6819      	ldreq	r1, [r3, #0]
 8004752:	685b      	ldreq	r3, [r3, #4]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	bf04      	itt	eq
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	6054      	str	r4, [r2, #4]
 800475e:	e7ca      	b.n	80046f6 <_free_r+0x22>
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	2000037c 	.word	0x2000037c

08004768 <sbrk_aligned>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4e0f      	ldr	r6, [pc, #60]	@ (80047a8 <sbrk_aligned+0x40>)
 800476c:	460c      	mov	r4, r1
 800476e:	6831      	ldr	r1, [r6, #0]
 8004770:	4605      	mov	r5, r0
 8004772:	b911      	cbnz	r1, 800477a <sbrk_aligned+0x12>
 8004774:	f000 fba4 	bl	8004ec0 <_sbrk_r>
 8004778:	6030      	str	r0, [r6, #0]
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 fb9f 	bl	8004ec0 <_sbrk_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d103      	bne.n	800478e <sbrk_aligned+0x26>
 8004786:	f04f 34ff 	mov.w	r4, #4294967295
 800478a:	4620      	mov	r0, r4
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	1cc4      	adds	r4, r0, #3
 8004790:	f024 0403 	bic.w	r4, r4, #3
 8004794:	42a0      	cmp	r0, r4
 8004796:	d0f8      	beq.n	800478a <sbrk_aligned+0x22>
 8004798:	1a21      	subs	r1, r4, r0
 800479a:	4628      	mov	r0, r5
 800479c:	f000 fb90 	bl	8004ec0 <_sbrk_r>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d1f2      	bne.n	800478a <sbrk_aligned+0x22>
 80047a4:	e7ef      	b.n	8004786 <sbrk_aligned+0x1e>
 80047a6:	bf00      	nop
 80047a8:	20000378 	.word	0x20000378

080047ac <_malloc_r>:
 80047ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b0:	1ccd      	adds	r5, r1, #3
 80047b2:	f025 0503 	bic.w	r5, r5, #3
 80047b6:	3508      	adds	r5, #8
 80047b8:	2d0c      	cmp	r5, #12
 80047ba:	bf38      	it	cc
 80047bc:	250c      	movcc	r5, #12
 80047be:	2d00      	cmp	r5, #0
 80047c0:	4606      	mov	r6, r0
 80047c2:	db01      	blt.n	80047c8 <_malloc_r+0x1c>
 80047c4:	42a9      	cmp	r1, r5
 80047c6:	d904      	bls.n	80047d2 <_malloc_r+0x26>
 80047c8:	230c      	movs	r3, #12
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a8 <_malloc_r+0xfc>
 80047d6:	f000 f869 	bl	80048ac <__malloc_lock>
 80047da:	f8d8 3000 	ldr.w	r3, [r8]
 80047de:	461c      	mov	r4, r3
 80047e0:	bb44      	cbnz	r4, 8004834 <_malloc_r+0x88>
 80047e2:	4629      	mov	r1, r5
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7ff ffbf 	bl	8004768 <sbrk_aligned>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	4604      	mov	r4, r0
 80047ee:	d158      	bne.n	80048a2 <_malloc_r+0xf6>
 80047f0:	f8d8 4000 	ldr.w	r4, [r8]
 80047f4:	4627      	mov	r7, r4
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	d143      	bne.n	8004882 <_malloc_r+0xd6>
 80047fa:	2c00      	cmp	r4, #0
 80047fc:	d04b      	beq.n	8004896 <_malloc_r+0xea>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	4639      	mov	r1, r7
 8004802:	4630      	mov	r0, r6
 8004804:	eb04 0903 	add.w	r9, r4, r3
 8004808:	f000 fb5a 	bl	8004ec0 <_sbrk_r>
 800480c:	4581      	cmp	r9, r0
 800480e:	d142      	bne.n	8004896 <_malloc_r+0xea>
 8004810:	6821      	ldr	r1, [r4, #0]
 8004812:	1a6d      	subs	r5, r5, r1
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ffa6 	bl	8004768 <sbrk_aligned>
 800481c:	3001      	adds	r0, #1
 800481e:	d03a      	beq.n	8004896 <_malloc_r+0xea>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	442b      	add	r3, r5
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	f8d8 3000 	ldr.w	r3, [r8]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	bb62      	cbnz	r2, 8004888 <_malloc_r+0xdc>
 800482e:	f8c8 7000 	str.w	r7, [r8]
 8004832:	e00f      	b.n	8004854 <_malloc_r+0xa8>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	1b52      	subs	r2, r2, r5
 8004838:	d420      	bmi.n	800487c <_malloc_r+0xd0>
 800483a:	2a0b      	cmp	r2, #11
 800483c:	d917      	bls.n	800486e <_malloc_r+0xc2>
 800483e:	1961      	adds	r1, r4, r5
 8004840:	42a3      	cmp	r3, r4
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	6059      	strne	r1, [r3, #4]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	bf08      	it	eq
 800484c:	f8c8 1000 	streq.w	r1, [r8]
 8004850:	5162      	str	r2, [r4, r5]
 8004852:	604b      	str	r3, [r1, #4]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f82f 	bl	80048b8 <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac2      	subs	r2, r0, r3
 8004866:	bf1c      	itt	ne
 8004868:	1a1b      	subne	r3, r3, r0
 800486a:	50a3      	strne	r3, [r4, r2]
 800486c:	e7af      	b.n	80047ce <_malloc_r+0x22>
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	42a3      	cmp	r3, r4
 8004872:	bf0c      	ite	eq
 8004874:	f8c8 2000 	streq.w	r2, [r8]
 8004878:	605a      	strne	r2, [r3, #4]
 800487a:	e7eb      	b.n	8004854 <_malloc_r+0xa8>
 800487c:	4623      	mov	r3, r4
 800487e:	6864      	ldr	r4, [r4, #4]
 8004880:	e7ae      	b.n	80047e0 <_malloc_r+0x34>
 8004882:	463c      	mov	r4, r7
 8004884:	687f      	ldr	r7, [r7, #4]
 8004886:	e7b6      	b.n	80047f6 <_malloc_r+0x4a>
 8004888:	461a      	mov	r2, r3
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	d1fb      	bne.n	8004888 <_malloc_r+0xdc>
 8004890:	2300      	movs	r3, #0
 8004892:	6053      	str	r3, [r2, #4]
 8004894:	e7de      	b.n	8004854 <_malloc_r+0xa8>
 8004896:	230c      	movs	r3, #12
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f80c 	bl	80048b8 <__malloc_unlock>
 80048a0:	e794      	b.n	80047cc <_malloc_r+0x20>
 80048a2:	6005      	str	r5, [r0, #0]
 80048a4:	e7d6      	b.n	8004854 <_malloc_r+0xa8>
 80048a6:	bf00      	nop
 80048a8:	2000037c 	.word	0x2000037c

080048ac <__malloc_lock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	@ (80048b4 <__malloc_lock+0x8>)
 80048ae:	f7ff bf0f 	b.w	80046d0 <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	20000374 	.word	0x20000374

080048b8 <__malloc_unlock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	@ (80048c0 <__malloc_unlock+0x8>)
 80048ba:	f7ff bf0a 	b.w	80046d2 <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	20000374 	.word	0x20000374

080048c4 <__ssputs_r>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	688e      	ldr	r6, [r1, #8]
 80048ca:	461f      	mov	r7, r3
 80048cc:	42be      	cmp	r6, r7
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	4682      	mov	sl, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	4690      	mov	r8, r2
 80048d6:	d82d      	bhi.n	8004934 <__ssputs_r+0x70>
 80048d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048e0:	d026      	beq.n	8004930 <__ssputs_r+0x6c>
 80048e2:	6965      	ldr	r5, [r4, #20]
 80048e4:	6909      	ldr	r1, [r1, #16]
 80048e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ea:	eba3 0901 	sub.w	r9, r3, r1
 80048ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048f2:	1c7b      	adds	r3, r7, #1
 80048f4:	444b      	add	r3, r9
 80048f6:	106d      	asrs	r5, r5, #1
 80048f8:	429d      	cmp	r5, r3
 80048fa:	bf38      	it	cc
 80048fc:	461d      	movcc	r5, r3
 80048fe:	0553      	lsls	r3, r2, #21
 8004900:	d527      	bpl.n	8004952 <__ssputs_r+0x8e>
 8004902:	4629      	mov	r1, r5
 8004904:	f7ff ff52 	bl	80047ac <_malloc_r>
 8004908:	4606      	mov	r6, r0
 800490a:	b360      	cbz	r0, 8004966 <__ssputs_r+0xa2>
 800490c:	6921      	ldr	r1, [r4, #16]
 800490e:	464a      	mov	r2, r9
 8004910:	f000 fae6 	bl	8004ee0 <memcpy>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800491a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	6126      	str	r6, [r4, #16]
 8004922:	6165      	str	r5, [r4, #20]
 8004924:	444e      	add	r6, r9
 8004926:	eba5 0509 	sub.w	r5, r5, r9
 800492a:	6026      	str	r6, [r4, #0]
 800492c:	60a5      	str	r5, [r4, #8]
 800492e:	463e      	mov	r6, r7
 8004930:	42be      	cmp	r6, r7
 8004932:	d900      	bls.n	8004936 <__ssputs_r+0x72>
 8004934:	463e      	mov	r6, r7
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	4632      	mov	r2, r6
 800493a:	4641      	mov	r1, r8
 800493c:	f000 faa6 	bl	8004e8c <memmove>
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	1b9b      	subs	r3, r3, r6
 8004944:	60a3      	str	r3, [r4, #8]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	4433      	add	r3, r6
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2000      	movs	r0, #0
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	462a      	mov	r2, r5
 8004954:	f000 fad2 	bl	8004efc <_realloc_r>
 8004958:	4606      	mov	r6, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d1e0      	bne.n	8004920 <__ssputs_r+0x5c>
 800495e:	6921      	ldr	r1, [r4, #16]
 8004960:	4650      	mov	r0, sl
 8004962:	f7ff feb7 	bl	80046d4 <_free_r>
 8004966:	230c      	movs	r3, #12
 8004968:	f8ca 3000 	str.w	r3, [sl]
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e7e9      	b.n	800494e <__ssputs_r+0x8a>
	...

0800497c <_svfiprintf_r>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	4698      	mov	r8, r3
 8004982:	898b      	ldrh	r3, [r1, #12]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	b09d      	sub	sp, #116	@ 0x74
 8004988:	4607      	mov	r7, r0
 800498a:	460d      	mov	r5, r1
 800498c:	4614      	mov	r4, r2
 800498e:	d510      	bpl.n	80049b2 <_svfiprintf_r+0x36>
 8004990:	690b      	ldr	r3, [r1, #16]
 8004992:	b973      	cbnz	r3, 80049b2 <_svfiprintf_r+0x36>
 8004994:	2140      	movs	r1, #64	@ 0x40
 8004996:	f7ff ff09 	bl	80047ac <_malloc_r>
 800499a:	6028      	str	r0, [r5, #0]
 800499c:	6128      	str	r0, [r5, #16]
 800499e:	b930      	cbnz	r0, 80049ae <_svfiprintf_r+0x32>
 80049a0:	230c      	movs	r3, #12
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	b01d      	add	sp, #116	@ 0x74
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	2340      	movs	r3, #64	@ 0x40
 80049b0:	616b      	str	r3, [r5, #20]
 80049b2:	2300      	movs	r3, #0
 80049b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049b6:	2320      	movs	r3, #32
 80049b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c0:	2330      	movs	r3, #48	@ 0x30
 80049c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b60 <_svfiprintf_r+0x1e4>
 80049c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ca:	f04f 0901 	mov.w	r9, #1
 80049ce:	4623      	mov	r3, r4
 80049d0:	469a      	mov	sl, r3
 80049d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d6:	b10a      	cbz	r2, 80049dc <_svfiprintf_r+0x60>
 80049d8:	2a25      	cmp	r2, #37	@ 0x25
 80049da:	d1f9      	bne.n	80049d0 <_svfiprintf_r+0x54>
 80049dc:	ebba 0b04 	subs.w	fp, sl, r4
 80049e0:	d00b      	beq.n	80049fa <_svfiprintf_r+0x7e>
 80049e2:	465b      	mov	r3, fp
 80049e4:	4622      	mov	r2, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff ff6b 	bl	80048c4 <__ssputs_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	f000 80a7 	beq.w	8004b42 <_svfiprintf_r+0x1c6>
 80049f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f6:	445a      	add	r2, fp
 80049f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80049fa:	f89a 3000 	ldrb.w	r3, [sl]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 809f 	beq.w	8004b42 <_svfiprintf_r+0x1c6>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0e:	f10a 0a01 	add.w	sl, sl, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a1c:	4654      	mov	r4, sl
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	484e      	ldr	r0, [pc, #312]	@ (8004b60 <_svfiprintf_r+0x1e4>)
 8004a26:	f7fb fbab 	bl	8000180 <memchr>
 8004a2a:	9a04      	ldr	r2, [sp, #16]
 8004a2c:	b9d8      	cbnz	r0, 8004a66 <_svfiprintf_r+0xea>
 8004a2e:	06d0      	lsls	r0, r2, #27
 8004a30:	bf44      	itt	mi
 8004a32:	2320      	movmi	r3, #32
 8004a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a38:	0711      	lsls	r1, r2, #28
 8004a3a:	bf44      	itt	mi
 8004a3c:	232b      	movmi	r3, #43	@ 0x2b
 8004a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a48:	d015      	beq.n	8004a76 <_svfiprintf_r+0xfa>
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	4654      	mov	r4, sl
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4621      	mov	r1, r4
 8004a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5a:	3b30      	subs	r3, #48	@ 0x30
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d94b      	bls.n	8004af8 <_svfiprintf_r+0x17c>
 8004a60:	b1b0      	cbz	r0, 8004a90 <_svfiprintf_r+0x114>
 8004a62:	9207      	str	r2, [sp, #28]
 8004a64:	e014      	b.n	8004a90 <_svfiprintf_r+0x114>
 8004a66:	eba0 0308 	sub.w	r3, r0, r8
 8004a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	46a2      	mov	sl, r4
 8004a74:	e7d2      	b.n	8004a1c <_svfiprintf_r+0xa0>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	9103      	str	r1, [sp, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfbb      	ittet	lt
 8004a82:	425b      	neglt	r3, r3
 8004a84:	f042 0202 	orrlt.w	r2, r2, #2
 8004a88:	9307      	strge	r3, [sp, #28]
 8004a8a:	9307      	strlt	r3, [sp, #28]
 8004a8c:	bfb8      	it	lt
 8004a8e:	9204      	strlt	r2, [sp, #16]
 8004a90:	7823      	ldrb	r3, [r4, #0]
 8004a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a94:	d10a      	bne.n	8004aac <_svfiprintf_r+0x130>
 8004a96:	7863      	ldrb	r3, [r4, #1]
 8004a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a9a:	d132      	bne.n	8004b02 <_svfiprintf_r+0x186>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9203      	str	r2, [sp, #12]
 8004aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aa8:	3402      	adds	r4, #2
 8004aaa:	9305      	str	r3, [sp, #20]
 8004aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b70 <_svfiprintf_r+0x1f4>
 8004ab0:	7821      	ldrb	r1, [r4, #0]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	f7fb fb63 	bl	8000180 <memchr>
 8004aba:	b138      	cbz	r0, 8004acc <_svfiprintf_r+0x150>
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	eba0 000a 	sub.w	r0, r0, sl
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	4082      	lsls	r2, r0
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	3401      	adds	r4, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	4824      	ldr	r0, [pc, #144]	@ (8004b64 <_svfiprintf_r+0x1e8>)
 8004ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	f7fb fb52 	bl	8000180 <memchr>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d036      	beq.n	8004b4e <_svfiprintf_r+0x1d2>
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <_svfiprintf_r+0x1ec>)
 8004ae2:	bb1b      	cbnz	r3, 8004b2c <_svfiprintf_r+0x1b0>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	3308      	adds	r3, #8
 8004aee:	9303      	str	r3, [sp, #12]
 8004af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af2:	4433      	add	r3, r6
 8004af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af6:	e76a      	b.n	80049ce <_svfiprintf_r+0x52>
 8004af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afc:	460c      	mov	r4, r1
 8004afe:	2001      	movs	r0, #1
 8004b00:	e7a8      	b.n	8004a54 <_svfiprintf_r+0xd8>
 8004b02:	2300      	movs	r3, #0
 8004b04:	3401      	adds	r4, #1
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f04f 0c0a 	mov.w	ip, #10
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b14:	3a30      	subs	r2, #48	@ 0x30
 8004b16:	2a09      	cmp	r2, #9
 8004b18:	d903      	bls.n	8004b22 <_svfiprintf_r+0x1a6>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0c6      	beq.n	8004aac <_svfiprintf_r+0x130>
 8004b1e:	9105      	str	r1, [sp, #20]
 8004b20:	e7c4      	b.n	8004aac <_svfiprintf_r+0x130>
 8004b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b26:	4604      	mov	r4, r0
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e7f0      	b.n	8004b0e <_svfiprintf_r+0x192>
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <_svfiprintf_r+0x1f0>)
 8004b34:	a904      	add	r1, sp, #16
 8004b36:	4638      	mov	r0, r7
 8004b38:	f3af 8000 	nop.w
 8004b3c:	1c42      	adds	r2, r0, #1
 8004b3e:	4606      	mov	r6, r0
 8004b40:	d1d6      	bne.n	8004af0 <_svfiprintf_r+0x174>
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	065b      	lsls	r3, r3, #25
 8004b46:	f53f af2d 	bmi.w	80049a4 <_svfiprintf_r+0x28>
 8004b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b4c:	e72c      	b.n	80049a8 <_svfiprintf_r+0x2c>
 8004b4e:	ab03      	add	r3, sp, #12
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	462a      	mov	r2, r5
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <_svfiprintf_r+0x1f0>)
 8004b56:	a904      	add	r1, sp, #16
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f000 f879 	bl	8004c50 <_printf_i>
 8004b5e:	e7ed      	b.n	8004b3c <_svfiprintf_r+0x1c0>
 8004b60:	080050b8 	.word	0x080050b8
 8004b64:	080050c2 	.word	0x080050c2
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048c5 	.word	0x080048c5
 8004b70:	080050be 	.word	0x080050be

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4698      	mov	r8, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfb8      	it	lt
 8004b88:	4613      	movlt	r3, r2
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b90:	4607      	mov	r7, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc26      	bgt.n	8004c0a <_printf_common+0x96>
 8004bbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	3b00      	subs	r3, #0
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42b      	bmi.n	8004c24 <_printf_common+0xb0>
 8004bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c8      	blx	r9
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d01e      	beq.n	8004c18 <_printf_common+0xa4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	6922      	ldr	r2, [r4, #16]
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf02      	ittt	eq
 8004be6:	68e5      	ldreq	r5, [r4, #12]
 8004be8:	6833      	ldreq	r3, [r6, #0]
 8004bea:	1aed      	subeq	r5, r5, r3
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	bf0c      	ite	eq
 8004bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf4:	2500      	movne	r5, #0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfc4      	itt	gt
 8004bfa:	1a9b      	subgt	r3, r3, r2
 8004bfc:	18ed      	addgt	r5, r5, r3
 8004bfe:	2600      	movs	r6, #0
 8004c00:	341a      	adds	r4, #26
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xa8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4641      	mov	r1, r8
 8004c10:	4638      	mov	r0, r7
 8004c12:	47c8      	blx	r9
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xac>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c6      	b.n	8004bb2 <_printf_common+0x3e>
 8004c24:	18e1      	adds	r1, r4, r3
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	2030      	movs	r0, #48	@ 0x30
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c2e:	4422      	add	r2, r4
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c38:	3302      	adds	r3, #2
 8004c3a:	e7c7      	b.n	8004bcc <_printf_common+0x58>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4641      	mov	r1, r8
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c8      	blx	r9
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xa4>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7d9      	b.n	8004c02 <_printf_common+0x8e>
	...

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	7e0f      	ldrb	r7, [r1, #24]
 8004c56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c58:	2f78      	cmp	r7, #120	@ 0x78
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	469a      	mov	sl, r3
 8004c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	@ 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d1 	beq.w	8004e14 <_printf_i+0x1c4>
 8004c72:	2f58      	cmp	r7, #88	@ 0x58
 8004c74:	f000 80b8 	beq.w	8004de8 <_printf_i+0x198>
 8004c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c90 <_printf_i+0x40>)
 8004c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004dfb 	.word	0x08004dfb
 8004cc0:	08004d27 	.word	0x08004d27
 8004cc4:	08004db5 	.word	0x08004db5
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e1d 	.word	0x08004e1d
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d27 	.word	0x08004d27
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004dbd 	.word	0x08004dbd
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6032      	str	r2, [r6, #0]
 8004cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e09c      	b.n	8004e36 <_printf_i+0x1e6>
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1d19      	adds	r1, r3, #4
 8004d02:	6031      	str	r1, [r6, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0xbc>
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <_printf_i+0xc4>
 8004d0c:	0645      	lsls	r5, r0, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0xb8>
 8004d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	da03      	bge.n	8004d20 <_printf_i+0xd0>
 8004d18:	232d      	movs	r3, #45	@ 0x2d
 8004d1a:	426d      	negs	r5, r5
 8004d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d20:	4858      	ldr	r0, [pc, #352]	@ (8004e84 <_printf_i+0x234>)
 8004d22:	230a      	movs	r3, #10
 8004d24:	e011      	b.n	8004d4a <_printf_i+0xfa>
 8004d26:	6821      	ldr	r1, [r4, #0]
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	0608      	lsls	r0, r1, #24
 8004d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d30:	d402      	bmi.n	8004d38 <_printf_i+0xe8>
 8004d32:	0649      	lsls	r1, r1, #25
 8004d34:	bf48      	it	mi
 8004d36:	b2ad      	uxthmi	r5, r5
 8004d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d3a:	4852      	ldr	r0, [pc, #328]	@ (8004e84 <_printf_i+0x234>)
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	bf14      	ite	ne
 8004d40:	230a      	movne	r3, #10
 8004d42:	2308      	moveq	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d4a:	6866      	ldr	r6, [r4, #4]
 8004d4c:	60a6      	str	r6, [r4, #8]
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	db05      	blt.n	8004d5e <_printf_i+0x10e>
 8004d52:	6821      	ldr	r1, [r4, #0]
 8004d54:	432e      	orrs	r6, r5
 8004d56:	f021 0104 	bic.w	r1, r1, #4
 8004d5a:	6021      	str	r1, [r4, #0]
 8004d5c:	d04b      	beq.n	8004df6 <_printf_i+0x1a6>
 8004d5e:	4616      	mov	r6, r2
 8004d60:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d64:	fb03 5711 	mls	r7, r3, r1, r5
 8004d68:	5dc7      	ldrb	r7, [r0, r7]
 8004d6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d6e:	462f      	mov	r7, r5
 8004d70:	42bb      	cmp	r3, r7
 8004d72:	460d      	mov	r5, r1
 8004d74:	d9f4      	bls.n	8004d60 <_printf_i+0x110>
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d10b      	bne.n	8004d92 <_printf_i+0x142>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	07df      	lsls	r7, r3, #31
 8004d7e:	d508      	bpl.n	8004d92 <_printf_i+0x142>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	6861      	ldr	r1, [r4, #4]
 8004d84:	4299      	cmp	r1, r3
 8004d86:	bfde      	ittt	le
 8004d88:	2330      	movle	r3, #48	@ 0x30
 8004d8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d92:	1b92      	subs	r2, r2, r6
 8004d94:	6122      	str	r2, [r4, #16]
 8004d96:	f8cd a000 	str.w	sl, [sp]
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	aa03      	add	r2, sp, #12
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4640      	mov	r0, r8
 8004da2:	f7ff fee7 	bl	8004b74 <_printf_common>
 8004da6:	3001      	adds	r0, #1
 8004da8:	d14a      	bne.n	8004e40 <_printf_i+0x1f0>
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	b004      	add	sp, #16
 8004db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	f043 0320 	orr.w	r3, r3, #32
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	4832      	ldr	r0, [pc, #200]	@ (8004e88 <_printf_i+0x238>)
 8004dbe:	2778      	movs	r7, #120	@ 0x78
 8004dc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	061f      	lsls	r7, r3, #24
 8004dca:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dce:	d402      	bmi.n	8004dd6 <_printf_i+0x186>
 8004dd0:	065f      	lsls	r7, r3, #25
 8004dd2:	bf48      	it	mi
 8004dd4:	b2ad      	uxthmi	r5, r5
 8004dd6:	6031      	str	r1, [r6, #0]
 8004dd8:	07d9      	lsls	r1, r3, #31
 8004dda:	bf44      	itt	mi
 8004ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8004de0:	6023      	strmi	r3, [r4, #0]
 8004de2:	b11d      	cbz	r5, 8004dec <_printf_i+0x19c>
 8004de4:	2310      	movs	r3, #16
 8004de6:	e7ad      	b.n	8004d44 <_printf_i+0xf4>
 8004de8:	4826      	ldr	r0, [pc, #152]	@ (8004e84 <_printf_i+0x234>)
 8004dea:	e7e9      	b.n	8004dc0 <_printf_i+0x170>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	f023 0320 	bic.w	r3, r3, #32
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	e7f6      	b.n	8004de4 <_printf_i+0x194>
 8004df6:	4616      	mov	r6, r2
 8004df8:	e7bd      	b.n	8004d76 <_printf_i+0x126>
 8004dfa:	6833      	ldr	r3, [r6, #0]
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	6961      	ldr	r1, [r4, #20]
 8004e00:	1d18      	adds	r0, r3, #4
 8004e02:	6030      	str	r0, [r6, #0]
 8004e04:	062e      	lsls	r6, r5, #24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	d501      	bpl.n	8004e0e <_printf_i+0x1be>
 8004e0a:	6019      	str	r1, [r3, #0]
 8004e0c:	e002      	b.n	8004e14 <_printf_i+0x1c4>
 8004e0e:	0668      	lsls	r0, r5, #25
 8004e10:	d5fb      	bpl.n	8004e0a <_printf_i+0x1ba>
 8004e12:	8019      	strh	r1, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	4616      	mov	r6, r2
 8004e1a:	e7bc      	b.n	8004d96 <_printf_i+0x146>
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	6032      	str	r2, [r6, #0]
 8004e22:	681e      	ldr	r6, [r3, #0]
 8004e24:	6862      	ldr	r2, [r4, #4]
 8004e26:	2100      	movs	r1, #0
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7fb f9a9 	bl	8000180 <memchr>
 8004e2e:	b108      	cbz	r0, 8004e34 <_printf_i+0x1e4>
 8004e30:	1b80      	subs	r0, r0, r6
 8004e32:	6060      	str	r0, [r4, #4]
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e3e:	e7aa      	b.n	8004d96 <_printf_i+0x146>
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	4632      	mov	r2, r6
 8004e44:	4649      	mov	r1, r9
 8004e46:	4640      	mov	r0, r8
 8004e48:	47d0      	blx	sl
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0ad      	beq.n	8004daa <_printf_i+0x15a>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	079b      	lsls	r3, r3, #30
 8004e52:	d413      	bmi.n	8004e7c <_printf_i+0x22c>
 8004e54:	68e0      	ldr	r0, [r4, #12]
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	4298      	cmp	r0, r3
 8004e5a:	bfb8      	it	lt
 8004e5c:	4618      	movlt	r0, r3
 8004e5e:	e7a6      	b.n	8004dae <_printf_i+0x15e>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4632      	mov	r2, r6
 8004e64:	4649      	mov	r1, r9
 8004e66:	4640      	mov	r0, r8
 8004e68:	47d0      	blx	sl
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d09d      	beq.n	8004daa <_printf_i+0x15a>
 8004e6e:	3501      	adds	r5, #1
 8004e70:	68e3      	ldr	r3, [r4, #12]
 8004e72:	9903      	ldr	r1, [sp, #12]
 8004e74:	1a5b      	subs	r3, r3, r1
 8004e76:	42ab      	cmp	r3, r5
 8004e78:	dcf2      	bgt.n	8004e60 <_printf_i+0x210>
 8004e7a:	e7eb      	b.n	8004e54 <_printf_i+0x204>
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	f104 0619 	add.w	r6, r4, #25
 8004e82:	e7f5      	b.n	8004e70 <_printf_i+0x220>
 8004e84:	080050c9 	.word	0x080050c9
 8004e88:	080050da 	.word	0x080050da

08004e8c <memmove>:
 8004e8c:	4288      	cmp	r0, r1
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	eb01 0402 	add.w	r4, r1, r2
 8004e94:	d902      	bls.n	8004e9c <memmove+0x10>
 8004e96:	4284      	cmp	r4, r0
 8004e98:	4623      	mov	r3, r4
 8004e9a:	d807      	bhi.n	8004eac <memmove+0x20>
 8004e9c:	1e43      	subs	r3, r0, #1
 8004e9e:	42a1      	cmp	r1, r4
 8004ea0:	d008      	beq.n	8004eb4 <memmove+0x28>
 8004ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eaa:	e7f8      	b.n	8004e9e <memmove+0x12>
 8004eac:	4402      	add	r2, r0
 8004eae:	4601      	mov	r1, r0
 8004eb0:	428a      	cmp	r2, r1
 8004eb2:	d100      	bne.n	8004eb6 <memmove+0x2a>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ebe:	e7f7      	b.n	8004eb0 <memmove+0x24>

08004ec0 <_sbrk_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d06      	ldr	r5, [pc, #24]	@ (8004edc <_sbrk_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	f7fc f806 	bl	8000edc <_sbrk>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_sbrk_r+0x1a>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_sbrk_r+0x1a>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20000370 	.word	0x20000370

08004ee0 <memcpy>:
 8004ee0:	440a      	add	r2, r1
 8004ee2:	4291      	cmp	r1, r2
 8004ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ee8:	d100      	bne.n	8004eec <memcpy+0xc>
 8004eea:	4770      	bx	lr
 8004eec:	b510      	push	{r4, lr}
 8004eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	d1f9      	bne.n	8004eee <memcpy+0xe>
 8004efa:	bd10      	pop	{r4, pc}

08004efc <_realloc_r>:
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	4607      	mov	r7, r0
 8004f02:	4614      	mov	r4, r2
 8004f04:	460d      	mov	r5, r1
 8004f06:	b921      	cbnz	r1, 8004f12 <_realloc_r+0x16>
 8004f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	f7ff bc4d 	b.w	80047ac <_malloc_r>
 8004f12:	b92a      	cbnz	r2, 8004f20 <_realloc_r+0x24>
 8004f14:	f7ff fbde 	bl	80046d4 <_free_r>
 8004f18:	4625      	mov	r5, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	f000 f81a 	bl	8004f58 <_malloc_usable_size_r>
 8004f24:	4284      	cmp	r4, r0
 8004f26:	4606      	mov	r6, r0
 8004f28:	d802      	bhi.n	8004f30 <_realloc_r+0x34>
 8004f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f2e:	d8f4      	bhi.n	8004f1a <_realloc_r+0x1e>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff fc3a 	bl	80047ac <_malloc_r>
 8004f38:	4680      	mov	r8, r0
 8004f3a:	b908      	cbnz	r0, 8004f40 <_realloc_r+0x44>
 8004f3c:	4645      	mov	r5, r8
 8004f3e:	e7ec      	b.n	8004f1a <_realloc_r+0x1e>
 8004f40:	42b4      	cmp	r4, r6
 8004f42:	4622      	mov	r2, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	bf28      	it	cs
 8004f48:	4632      	movcs	r2, r6
 8004f4a:	f7ff ffc9 	bl	8004ee0 <memcpy>
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff fbbf 	bl	80046d4 <_free_r>
 8004f56:	e7f1      	b.n	8004f3c <_realloc_r+0x40>

08004f58 <_malloc_usable_size_r>:
 8004f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5c:	1f18      	subs	r0, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbc      	itt	lt
 8004f62:	580b      	ldrlt	r3, [r1, r0]
 8004f64:	18c0      	addlt	r0, r0, r3
 8004f66:	4770      	bx	lr

08004f68 <_init>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr

08004f74 <_fini>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr
