
TRNG_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004628  08004628  00005628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080047a0  080047a0  000057a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000008  080047a4  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b8  20000068  08004804  00006068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000320  08004804  00006320  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ef01  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002100  00000000  00000000  00014f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d8  00000000  00000000  000170a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d8c  00000000  00000000  00018278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002142b  00000000  00000000  00019004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ed44  00000000  00000000  0003a42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5f49  00000000  00000000  00049173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011f0bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f30  00000000  00000000  0011f100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000048  00000000  00000000  00124030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08004610 	.word	0x08004610

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08004610 	.word	0x08004610

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <now_ms>:
static void force_set_mode(uint8_t m);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
static inline uint32_t now_ms(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000592:	f000 fd4d 	bl	8001030 <HAL_GetTick>
 8000596:	4603      	mov	r3, r0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}

0800059c <button_pressed_event>:

static bool button_pressed_event(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 80005a2:	f7ff fff4 	bl	800058e <now_ms>
 80005a6:	6078      	str	r0, [r7, #4]
    uint8_t reading = (uint8_t)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <button_pressed_event+0x64>)
 80005ac:	f000 ffac 	bl	8001508 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	70fb      	strb	r3, [r7, #3]

    if(reading != lastButtonReading)
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <button_pressed_event+0x68>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	78fa      	ldrb	r2, [r7, #3]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d005      	beq.n	80005ca <button_pressed_event+0x2e>
    {
        lastButtonReading = reading;
 80005be:	4a11      	ldr	r2, [pc, #68]	@ (8000604 <button_pressed_event+0x68>)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	7013      	strb	r3, [r2, #0]
        lastButtonChangeTime = t;
 80005c4:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <button_pressed_event+0x6c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
    }

    if((t - lastButtonChangeTime) > BUTTON_DEBOUNCE_MS)
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <button_pressed_event+0x6c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b32      	cmp	r3, #50	@ 0x32
 80005d4:	d90f      	bls.n	80005f6 <button_pressed_event+0x5a>
    {
        if(lastButtonStable != lastButtonReading)
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <button_pressed_event+0x70>)
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <button_pressed_event+0x68>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d009      	beq.n	80005f6 <button_pressed_event+0x5a>
        {
            lastButtonStable = lastButtonReading;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <button_pressed_event+0x68>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <button_pressed_event+0x70>)
 80005e8:	701a      	strb	r2, [r3, #0]
            if(lastButtonStable == GPIO_PIN_RESET)
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <button_pressed_event+0x70>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <button_pressed_event+0x5a>
                return true;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <button_pressed_event+0x5c>
        }
    }
    return false;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000c00 	.word	0x48000c00
 8000604:	20000009 	.word	0x20000009
 8000608:	20000130 	.word	0x20000130
 800060c:	2000000a 	.word	0x2000000a

08000610 <mode2_reset_state>:

static void mode2_reset_state(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    m2_state = M2_IDLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <mode2_reset_state+0x30>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
    m2_nextAction = 0;
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <mode2_reset_state+0x34>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
    m2_blinksRemain = 0;
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <mode2_reset_state+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
    m2_ledOn = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <mode2_reset_state+0x3c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
    m2_led3EndTime = 0;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <mode2_reset_state+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN | LED1_PIN | LED3_PIN, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2123      	movs	r1, #35	@ 0x23
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <mode2_reset_state+0x44>)
 8000638:	f000 ff7e 	bl	8001538 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000139 	.word	0x20000139
 8000644:	2000013c 	.word	0x2000013c
 8000648:	20000140 	.word	0x20000140
 800064c:	20000144 	.word	0x20000144
 8000650:	20000148 	.word	0x20000148
 8000654:	48000400 	.word	0x48000400

08000658 <toggle_mode>:

static void toggle_mode(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
    mode ^= 1u; // Toggle 0 <-> 1
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <toggle_mode+0x7c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f083 0301 	eor.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <toggle_mode+0x7c>)
 800066c:	701a      	strb	r2, [r3, #0]
    mode2_reset_state();
 800066e:	f7ff ffcf 	bl	8000610 <mode2_reset_state>
    m0_lastToggle = now_ms();
 8000672:	f7ff ff8c 	bl	800058e <now_ms>
 8000676:	4603      	mov	r3, r0
 8000678:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <toggle_mode+0x80>)
 800067a:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <toggle_mode+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <toggle_mode+0x88>)
 8000688:	f000 ff56 	bl	8001538 <HAL_GPIO_WritePin>

    // LED3 mod değişiminde yanıp sönsün
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2102      	movs	r1, #2
 8000690:	4813      	ldr	r0, [pc, #76]	@ (80006e0 <toggle_mode+0x88>)
 8000692:	f000 ff51 	bl	8001538 <HAL_GPIO_WritePin>
    m2_modeChangeEndTime = now_ms() + LED3_ON_MS;
 8000696:	f7ff ff7a 	bl	800058e <now_ms>
 800069a:	4603      	mov	r3, r0
 800069c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80006a0:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <toggle_mode+0x8c>)
 80006a2:	6013      	str	r3, [r2, #0]

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode toggled -> %u\r\n", (unsigned)mode);
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <toggle_mode+0x7c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <toggle_mode+0x90>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	480f      	ldr	r0, [pc, #60]	@ (80006ec <toggle_mode+0x94>)
 80006b0:	f003 fafa 	bl	8003ca8 <sniprintf>
 80006b4:	6078      	str	r0, [r7, #4]
    if(len>0) HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, (uint16_t)len, HAL_MAX_DELAY);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dd07      	ble.n	80006cc <toggle_mode+0x74>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	4909      	ldr	r1, [pc, #36]	@ (80006ec <toggle_mode+0x94>)
 80006c6:	480a      	ldr	r0, [pc, #40]	@ (80006f0 <toggle_mode+0x98>)
 80006c8:	f002 fe17 	bl	80032fa <HAL_UART_Transmit>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000012c 	.word	0x2000012c
 80006d8:	20000134 	.word	0x20000134
 80006dc:	20000138 	.word	0x20000138
 80006e0:	48000400 	.word	0x48000400
 80006e4:	2000014c 	.word	0x2000014c
 80006e8:	08004628 	.word	0x08004628
 80006ec:	20000150 	.word	0x20000150
 80006f0:	20000098 	.word	0x20000098

080006f4 <force_set_mode>:

static void force_set_mode(uint8_t m)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    if(m > 1) return;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d832      	bhi.n	800076a <force_set_mode+0x76>
    mode = m;
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <force_set_mode+0x80>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	7013      	strb	r3, [r2, #0]
    mode2_reset_state();
 800070a:	f7ff ff81 	bl	8000610 <mode2_reset_state>
    m0_lastToggle = now_ms();
 800070e:	f7ff ff3e 	bl	800058e <now_ms>
 8000712:	4603      	mov	r3, r0
 8000714:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <force_set_mode+0x84>)
 8000716:	6013      	str	r3, [r2, #0]
    m0_ledState = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <force_set_mode+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	4817      	ldr	r0, [pc, #92]	@ (8000780 <force_set_mode+0x8c>)
 8000724:	f000 ff08 	bl	8001538 <HAL_GPIO_WritePin>

    // LED3 mod değişiminde yanıp sönsün
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2102      	movs	r1, #2
 800072c:	4814      	ldr	r0, [pc, #80]	@ (8000780 <force_set_mode+0x8c>)
 800072e:	f000 ff03 	bl	8001538 <HAL_GPIO_WritePin>
    m2_modeChangeEndTime = now_ms() + LED3_ON_MS;
 8000732:	f7ff ff2c 	bl	800058e <now_ms>
 8000736:	4603      	mov	r3, r0
 8000738:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <force_set_mode+0x90>)
 800073e:	6013      	str	r3, [r2, #0]

    int len = snprintf(uartMsg, sizeof(uartMsg), "Mode forced -> %u\r\n", (unsigned)mode);
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <force_set_mode+0x80>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4a10      	ldr	r2, [pc, #64]	@ (8000788 <force_set_mode+0x94>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	4810      	ldr	r0, [pc, #64]	@ (800078c <force_set_mode+0x98>)
 800074c:	f003 faac 	bl	8003ca8 <sniprintf>
 8000750:	60f8      	str	r0, [r7, #12]
    if(len>0) HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, (uint16_t)len, HAL_MAX_DELAY);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd09      	ble.n	800076c <force_set_mode+0x78>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	b29a      	uxth	r2, r3
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	490a      	ldr	r1, [pc, #40]	@ (800078c <force_set_mode+0x98>)
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <force_set_mode+0x9c>)
 8000764:	f002 fdc9 	bl	80032fa <HAL_UART_Transmit>
 8000768:	e000      	b.n	800076c <force_set_mode+0x78>
    if(m > 1) return;
 800076a:	bf00      	nop
}
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000012c 	.word	0x2000012c
 8000778:	20000134 	.word	0x20000134
 800077c:	20000138 	.word	0x20000138
 8000780:	48000400 	.word	0x48000400
 8000784:	2000014c 	.word	0x2000014c
 8000788:	08004640 	.word	0x08004640
 800078c:	20000150 	.word	0x20000150
 8000790:	20000098 	.word	0x20000098

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af02      	add	r7, sp, #8
    HAL_Init();
 800079a:	f000 fbdb 	bl	8000f54 <HAL_Init>
    SystemClock_Config();
 800079e:	f000 f9c5 	bl	8000b2c <SystemClock_Config>

    MX_GPIO_Init();
 80007a2:	f000 f943 	bl	8000a2c <MX_GPIO_Init>
    MX_RNG_Init();
 80007a6:	f000 f981 	bl	8000aac <MX_RNG_Init>
    MX_USART1_UART_Init();
 80007aa:	f000 f995 	bl	8000ad8 <MX_USART1_UART_Init>

    while(1)
    {
        if(button_pressed_event() || debugToggle)
 80007ae:	f7ff fef5 	bl	800059c <button_pressed_event>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <main+0x2e>
 80007b8:	4b8b      	ldr	r3, [pc, #556]	@ (80009e8 <main+0x254>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <main+0x38>
        {
            toggle_mode();
 80007c2:	f7ff ff49 	bl	8000658 <toggle_mode>
            debugToggle = 0;
 80007c6:	4b88      	ldr	r3, [pc, #544]	@ (80009e8 <main+0x254>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
        }

        if(debugForceMode != -1)
 80007cc:	4b87      	ldr	r3, [pc, #540]	@ (80009ec <main+0x258>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d6:	d009      	beq.n	80007ec <main+0x58>
        {
            force_set_mode((uint8_t)debugForceMode);
 80007d8:	4b84      	ldr	r3, [pc, #528]	@ (80009ec <main+0x258>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff87 	bl	80006f4 <force_set_mode>
            debugForceMode = -1;
 80007e6:	4b81      	ldr	r3, [pc, #516]	@ (80009ec <main+0x258>)
 80007e8:	22ff      	movs	r2, #255	@ 0xff
 80007ea:	701a      	strb	r2, [r3, #0]
        }

        uint32_t t = now_ms();
 80007ec:	f7ff fecf 	bl	800058e <now_ms>
 80007f0:	6078      	str	r0, [r7, #4]

        // Mod değişimi LED3 kontrolü
        if(m2_modeChangeEndTime && t >= m2_modeChangeEndTime)
 80007f2:	4b7f      	ldr	r3, [pc, #508]	@ (80009f0 <main+0x25c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00c      	beq.n	8000814 <main+0x80>
 80007fa:	4b7d      	ldr	r3, [pc, #500]	@ (80009f0 <main+0x25c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d307      	bcc.n	8000814 <main+0x80>
        {
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	487a      	ldr	r0, [pc, #488]	@ (80009f4 <main+0x260>)
 800080a:	f000 fe95 	bl	8001538 <HAL_GPIO_WritePin>
            m2_modeChangeEndTime = 0;
 800080e:	4b78      	ldr	r3, [pc, #480]	@ (80009f0 <main+0x25c>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
        }

        if(mode == 0) // Mode 0: LED2 yanıp söner
 8000814:	4b78      	ldr	r3, [pc, #480]	@ (80009f8 <main+0x264>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d11d      	bne.n	800085a <main+0xc6>
        {
            if(t - m0_lastToggle >= MODE0_BLINK_MS)
 800081e:	4b77      	ldr	r3, [pc, #476]	@ (80009fc <main+0x268>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800082a:	d3c0      	bcc.n	80007ae <main+0x1a>
            {
                m0_lastToggle = t;
 800082c:	4a73      	ldr	r2, [pc, #460]	@ (80009fc <main+0x268>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
                m0_ledState ^= 1;
 8000832:	4b73      	ldr	r3, [pc, #460]	@ (8000a00 <main+0x26c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <main+0x26c>)
 800083e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m0_ledState?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000840:	4b6f      	ldr	r3, [pc, #444]	@ (8000a00 <main+0x26c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2101      	movs	r1, #1
 8000852:	4868      	ldr	r0, [pc, #416]	@ (80009f4 <main+0x260>)
 8000854:	f000 fe70 	bl	8001538 <HAL_GPIO_WritePin>
 8000858:	e7a9      	b.n	80007ae <main+0x1a>
            }
        }
        else // Mode 1: RNG blink
        {
            switch(m2_state)
 800085a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <main+0x270>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d8a5      	bhi.n	80007ae <main+0x1a>
 8000862:	a201      	add	r2, pc, #4	@ (adr r2, 8000868 <main+0xd4>)
 8000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000868:	0800087d 	.word	0x0800087d
 800086c:	08000899 	.word	0x08000899
 8000870:	0800092d 	.word	0x0800092d
 8000874:	0800099d 	.word	0x0800099d
 8000878:	080009c3 	.word	0x080009c3
            {
                case M2_IDLE:
                {
                    // LED3 Mode 1 başında yanacak
                    HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2102      	movs	r1, #2
 8000880:	485c      	ldr	r0, [pc, #368]	@ (80009f4 <main+0x260>)
 8000882:	f000 fe59 	bl	8001538 <HAL_GPIO_WritePin>
                    m2_led3EndTime = t + LED3_ON_MS;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800088c:	4a5e      	ldr	r2, [pc, #376]	@ (8000a08 <main+0x274>)
 800088e:	6013      	str	r3, [r2, #0]
                    m2_state = M2_LED3_ON;
 8000890:	4b5c      	ldr	r3, [pc, #368]	@ (8000a04 <main+0x270>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000896:	e0a5      	b.n	80009e4 <main+0x250>

                case M2_LED3_ON:
                    if(t >= m2_led3EndTime)
 8000898:	4b5b      	ldr	r3, [pc, #364]	@ (8000a08 <main+0x274>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	f0c0 8098 	bcc.w	80009d4 <main+0x240>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	4852      	ldr	r0, [pc, #328]	@ (80009f4 <main+0x260>)
 80008aa:	f000 fe45 	bl	8001538 <HAL_GPIO_WritePin>
                        uint32_t rnd;
                        if(HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4856      	ldr	r0, [pc, #344]	@ (8000a0c <main+0x278>)
 80008b4:	f002 fc5b 	bl	800316e <HAL_RNG_GenerateRandomNumber>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <main+0x140>
                        {
                            HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2102      	movs	r1, #2
 80008c2:	484c      	ldr	r0, [pc, #304]	@ (80009f4 <main+0x260>)
 80008c4:	f000 fe38 	bl	8001538 <HAL_GPIO_WritePin>
                            m2_led3EndTime = t + LED3_ON_MS;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80008ce:	4a4e      	ldr	r2, [pc, #312]	@ (8000a08 <main+0x274>)
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e76c      	b.n	80007ae <main+0x1a>
                            break;
                        }
                        m2_blinksRemain = (rnd % 10) + 1;
 80008d4:	6839      	ldr	r1, [r7, #0]
 80008d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a10 <main+0x27c>)
 80008d8:	fba3 2301 	umull	r2, r3, r3, r1
 80008dc:	08da      	lsrs	r2, r3, #3
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1aca      	subs	r2, r1, r3
 80008e8:	1c53      	adds	r3, r2, #1
 80008ea:	4a4a      	ldr	r2, [pc, #296]	@ (8000a14 <main+0x280>)
 80008ec:	6013      	str	r3, [r2, #0]
                        m2_state = M2_BLINKING;
 80008ee:	4b45      	ldr	r3, [pc, #276]	@ (8000a04 <main+0x270>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	701a      	strb	r2, [r3, #0]
                        m2_ledOn = 0;
 80008f4:	4b48      	ldr	r3, [pc, #288]	@ (8000a18 <main+0x284>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
                        m2_nextAction = t;
 80008fa:	4a48      	ldr	r2, [pc, #288]	@ (8000a1c <main+0x288>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]

                        snprintf(uartMsg, sizeof(uartMsg), "Random Number: %lu, LED2 blinks: %lu\r\n",
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4b44      	ldr	r3, [pc, #272]	@ (8000a14 <main+0x280>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	4a45      	ldr	r2, [pc, #276]	@ (8000a20 <main+0x28c>)
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4845      	ldr	r0, [pc, #276]	@ (8000a24 <main+0x290>)
 8000910:	f003 f9ca 	bl	8003ca8 <sniprintf>
                                 rnd, m2_blinksRemain);
                        HAL_UART_Transmit(&huart1, (uint8_t*)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8000914:	4843      	ldr	r0, [pc, #268]	@ (8000a24 <main+0x290>)
 8000916:	f7ff fc33 	bl	8000180 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	4940      	ldr	r1, [pc, #256]	@ (8000a24 <main+0x290>)
 8000924:	4840      	ldr	r0, [pc, #256]	@ (8000a28 <main+0x294>)
 8000926:	f002 fce8 	bl	80032fa <HAL_UART_Transmit>
                    }
                    break;
 800092a:	e053      	b.n	80009d4 <main+0x240>

                case M2_BLINKING:
                    if(t >= m2_nextAction)
 800092c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <main+0x288>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	d350      	bcc.n	80009d8 <main+0x244>
                    {
                        m2_ledOn ^= 1;
 8000936:	4b38      	ldr	r3, [pc, #224]	@ (8000a18 <main+0x284>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f083 0301 	eor.w	r3, r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b35      	ldr	r3, [pc, #212]	@ (8000a18 <main+0x284>)
 8000942:	701a      	strb	r2, [r3, #0]
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, m2_ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000944:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <main+0x284>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	2101      	movs	r1, #1
 8000956:	4827      	ldr	r0, [pc, #156]	@ (80009f4 <main+0x260>)
 8000958:	f000 fdee 	bl	8001538 <HAL_GPIO_WritePin>
                        if(!m2_ledOn)
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <main+0x284>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d116      	bne.n	8000992 <main+0x1fe>
                        {
                            m2_blinksRemain--;
 8000964:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <main+0x280>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a14 <main+0x280>)
 800096c:	6013      	str	r3, [r2, #0]
                            if(m2_blinksRemain == 0)
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <main+0x280>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10d      	bne.n	8000992 <main+0x1fe>
                            {
                                m2_state = M2_LED1_ON;
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <main+0x270>)
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
                                m2_nextAction = t + RNG_POST_WAIT_MS;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000982:	4a26      	ldr	r2, [pc, #152]	@ (8000a1c <main+0x288>)
 8000984:	6013      	str	r3, [r2, #0]
                                HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2120      	movs	r1, #32
 800098a:	481a      	ldr	r0, [pc, #104]	@ (80009f4 <main+0x260>)
 800098c:	f000 fdd4 	bl	8001538 <HAL_GPIO_WritePin>
                                break;
 8000990:	e028      	b.n	80009e4 <main+0x250>
                            }
                        }
                        m2_nextAction = t + (m2_ledOn?RNG_LED_ON_MS:RNG_LED_OFF_MS);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3332      	adds	r3, #50	@ 0x32
 8000996:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <main+0x288>)
 8000998:	6013      	str	r3, [r2, #0]
                    }
                    break;
 800099a:	e01d      	b.n	80009d8 <main+0x244>

                case M2_LED1_ON:
                    if(t >= m2_nextAction)
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <main+0x288>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d31a      	bcc.n	80009dc <main+0x248>
                    {
                        HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <main+0x260>)
 80009ac:	f000 fdc4 	bl	8001538 <HAL_GPIO_WritePin>
                        m2_state = M2_WAIT;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <main+0x270>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	701a      	strb	r2, [r3, #0]
                        m2_nextAction = t + RNG_POST_WAIT_MS;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <main+0x288>)
 80009be:	6013      	str	r3, [r2, #0]
                    }
                    break;
 80009c0:	e00c      	b.n	80009dc <main+0x248>

                case M2_WAIT:
                    if(t >= m2_nextAction)
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <main+0x288>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d309      	bcc.n	80009e0 <main+0x24c>
                        m2_state = M2_IDLE;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <main+0x270>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
                    break;
 80009d2:	e005      	b.n	80009e0 <main+0x24c>
                    break;
 80009d4:	bf00      	nop
 80009d6:	e6ea      	b.n	80007ae <main+0x1a>
                    break;
 80009d8:	bf00      	nop
 80009da:	e6e8      	b.n	80007ae <main+0x1a>
                    break;
 80009dc:	bf00      	nop
 80009de:	e6e6      	b.n	80007ae <main+0x1a>
                    break;
 80009e0:	bf00      	nop
 80009e2:	e6e4      	b.n	80007ae <main+0x1a>
    {
 80009e4:	e6e3      	b.n	80007ae <main+0x1a>
 80009e6:	bf00      	nop
 80009e8:	2000012d 	.word	0x2000012d
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000014c 	.word	0x2000014c
 80009f4:	48000400 	.word	0x48000400
 80009f8:	2000012c 	.word	0x2000012c
 80009fc:	20000134 	.word	0x20000134
 8000a00:	20000138 	.word	0x20000138
 8000a04:	20000139 	.word	0x20000139
 8000a08:	20000148 	.word	0x20000148
 8000a0c:	20000084 	.word	0x20000084
 8000a10:	cccccccd 	.word	0xcccccccd
 8000a14:	20000140 	.word	0x20000140
 8000a18:	20000144 	.word	0x20000144
 8000a1c:	2000013c 	.word	0x2000013c
 8000a20:	08004654 	.word	0x08004654
 8000a24:	20000150 	.word	0x20000150
 8000a28:	20000098 	.word	0x20000098

08000a2c <MX_GPIO_Init>:
}


/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

    /* GPIO port clock enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fd8b 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2008      	movs	r0, #8
 8000a48:	f7ff fd88 	bl	800055c <LL_AHB2_GRP1_EnableClock>

    /* LED pins */
    GPIO_InitStruct.Pin = LED1_PIN|LED2_PIN|LED3_PIN;
 8000a4c:	2323      	movs	r3, #35	@ 0x23
 8000a4e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <MX_GPIO_Init+0x78>)
 8000a62:	f000 fbe1 	bl	8001228 <HAL_GPIO_Init>

    /* Button pin */
    GPIO_InitStruct.Pin = BUTTON_PIN;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // <-- Pull-up ekledik
 8000a6e:	2301      	movs	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_GPIO_Init+0x7c>)
 8000a78:	f000 fbd6 	bl	8001228 <HAL_GPIO_Init>

    /* UART1 pins PB6/PB7 alternate function setup */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7c:	23c0      	movs	r3, #192	@ 0xc0
 8000a7e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_GPIO_Init+0x78>)
 8000a96:	f000 fbc7 	bl	8001228 <HAL_GPIO_Init>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48000c00 	.word	0x48000c00

08000aac <MX_RNG_Init>:

/* RNG Initialization Function */
static void MX_RNG_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    hrng.Instance = RNG;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_RNG_Init+0x24>)
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <MX_RNG_Init+0x28>)
 8000ab4:	601a      	str	r2, [r3, #0]
    hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_RNG_Init+0x24>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
    if(HAL_RNG_Init(&hrng) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_RNG_Init+0x24>)
 8000abe:	f002 fb21 	bl	8003104 <HAL_RNG_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RNG_Init+0x20>
    {
        Error_Handler();
 8000ac8:	f000 f88a 	bl	8000be0 <Error_Handler>
    }
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	58001000 	.word	0x58001000

08000ad8 <MX_USART1_UART_Init>:

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 1200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000ae8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f002 fba3 	bl	800325a <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000b1a:	f000 f861 	bl	8000be0 <Error_Handler>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000098 	.word	0x20000098
 8000b28:	40013800 	.word	0x40013800

08000b2c <SystemClock_Config>:

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09a      	sub	sp, #104	@ 0x68
 8000b30:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2248      	movs	r2, #72	@ 0x48
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 f8ea 	bl	8003d14 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <SystemClock_Config+0xb0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <SystemClock_Config+0xb0>)
 8000b5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <SystemClock_Config+0xb0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_MSI;
 8000b6e:	232a      	movs	r3, #42	@ 0x2a
 8000b70:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b84:	2360      	movs	r3, #96	@ 0x60
 8000b86:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 f87b 	bl	8001c90 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x78>
 8000ba0:	f000 f81e 	bl	8000be0 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000ba4:	236f      	movs	r3, #111	@ 0x6f
 8000ba6:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fbd7 	bl	8002378 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xa8>
 8000bd0:	f000 f806 	bl	8000be0 <Error_Handler>
}
 8000bd4:	bf00      	nop
 8000bd6:	3768      	adds	r7, #104	@ 0x68
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58000400 	.word	0x58000400

08000be0 <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
    __disable_irq();
    while(1) {}
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <LL_AHB2_GRP1_EnableClock>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c10:	68fb      	ldr	r3, [r7, #12]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c74:	68fb      	ldr	r3, [r7, #12]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b096      	sub	sp, #88	@ 0x58
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	2250      	movs	r2, #80	@ 0x50
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f837 	bl	8003d14 <memset>
  if(hrng->Instance==RNG)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_RNG_MspInit+0x50>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d113      	bne.n	8000cd8 <HAL_RNG_MspInit+0x48>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000cb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cba:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 ff98 	bl	8002bf6 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000ccc:	f7ff ff88 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000cd0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000cd4:	f7ff ffa3 	bl	8000c1e <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000cd8:	bf00      	nop
 8000cda:	3758      	adds	r7, #88	@ 0x58
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	58001000 	.word	0x58001000

08000ce4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09c      	sub	sp, #112	@ 0x70
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2250      	movs	r2, #80	@ 0x50
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 f805 	bl	8003d14 <memset>
  if(huart->Instance==USART1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a16      	ldr	r2, [pc, #88]	@ (8000d68 <HAL_UART_MspInit+0x84>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d124      	bne.n	8000d5e <HAL_UART_MspInit+0x7a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 ff68 	bl	8002bf6 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d2c:	f7ff ff58 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d34:	f7ff ff8c 	bl	8000c50 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff ff57 	bl	8000bec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3e:	23c0      	movs	r3, #192	@ 0xc0
 8000d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <HAL_UART_MspInit+0x88>)
 8000d5a:	f000 fa65 	bl	8001228 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d5e:	bf00      	nop
 8000d60:	3770      	adds	r7, #112	@ 0x70
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	48000400 	.word	0x48000400

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f91f 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f002 ff90 	bl	8003d24 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20030000 	.word	0x20030000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001d0 	.word	0x200001d0
 8000e38:	20000320 	.word	0x20000320

08000e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <SystemInit+0x98>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a23      	ldr	r2, [pc, #140]	@ (8000ed4 <SystemInit+0x98>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e64:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000e68:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <SystemInit+0x9c>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e86:	f023 0305 	bic.w	r3, r3, #5
 8000e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <SystemInit+0xa0>)
 8000ea8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eae:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <SystemInit+0xa0>)
 8000eb0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	faf6fefb 	.word	0xfaf6fefb
 8000edc:	22041000 	.word	0x22041000

08000ee0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ee0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee4:	3304      	adds	r3, #4

08000ee6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000eea:	d3f9      	bcc.n	8000ee0 <CopyDataInit>
  bx lr
 8000eec:	4770      	bx	lr

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000eee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ef0:	3004      	adds	r0, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ef2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>
  bx lr
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000efc:	f7ff ff9e 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <LoopForever+0x6>)
 8000f02:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <LoopForever+0xa>)
 8000f04:	4a0c      	ldr	r2, [pc, #48]	@ (8000f38 <LoopForever+0xe>)
 8000f06:	2300      	movs	r3, #0
 8000f08:	f7ff ffed 	bl	8000ee6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f0c:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <LoopForever+0x12>)
 8000f0e:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <LoopForever+0x16>)
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <LoopForever+0x1a>)
 8000f12:	2300      	movs	r3, #0
 8000f14:	f7ff ffe7 	bl	8000ee6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <LoopForever+0x1e>)
 8000f1a:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <LoopForever+0x22>)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f7ff ffe8 	bl	8000ef2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f22:	f002 ff05 	bl	8003d30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f26:	f7ff fc35 	bl	8000794 <main>

08000f2a <LoopForever>:

LoopForever:
  b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000068 	.word	0x20000068
 8000f38:	080047a4 	.word	0x080047a4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f3c:	20030000 	.word	0x20030000
 8000f40:	20030000 	.word	0x20030000
 8000f44:	08004804 	.word	0x08004804
  INIT_BSS _sbss, _ebss
 8000f48:	20000068 	.word	0x20000068
 8000f4c:	20000320 	.word	0x20000320

08000f50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_Init+0x3c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <HAL_Init+0x3c>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f92a 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	200f      	movs	r0, #15
 8000f72:	f000 f80f 	bl	8000f94 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f7ff fe7e 	bl	8000c82 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58004000 	.word	0x58004000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d024      	beq.n	8000ff2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa8:	f001 fb94 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_InitTick+0x6c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f924 	bl	800120e <HAL_SYSTICK_Config>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10f      	bne.n	8000fec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d809      	bhi.n	8000fe6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	f000 f8fe 	bl	80011da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <HAL_InitTick+0x70>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e007      	b.n	8000ff6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e004      	b.n	8000ff6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000014 	.word	0x20000014
 8001004:	20000010 	.word	0x20000010

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000014 	.word	0x20000014
 800102c:	200001d4 	.word	0x200001d4

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200001d4 	.word	0x200001d4

08001048 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTickPrio+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000010 	.word	0x20000010

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff47 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb2 	bl	8001180 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e14c      	b.n	80014d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 813e 	beq.w	80014cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x40>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8098 	beq.w	80014cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800139c:	4a54      	ldr	r2, [pc, #336]	@ (80014f0 <HAL_GPIO_Init+0x2c8>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013c6:	d019      	beq.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4a      	ldr	r2, [pc, #296]	@ (80014f4 <HAL_GPIO_Init+0x2cc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x1d0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a49      	ldr	r2, [pc, #292]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1cc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <HAL_GPIO_Init+0x2d4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1c8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a47      	ldr	r2, [pc, #284]	@ (8001500 <HAL_GPIO_Init+0x2d8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1c4>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e008      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013ec:	2307      	movs	r3, #7
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140e:	4938      	ldr	r1, [pc, #224]	@ (80014f0 <HAL_GPIO_Init+0x2c8>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001440:	4a30      	ldr	r2, [pc, #192]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001446:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001496:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 80014a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f47f aeab 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	58000800 	.word	0x58000800

08001508 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001554:	e002      	b.n	800155c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	58000400 	.word	0x58000400

08001588 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	58000400 	.word	0x58000400

080015a4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015b6:	d101      	bne.n	80015bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001616:	d101      	bne.n	800161c <LL_RCC_HSE_IsReady+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_RCC_HSE_IsReady+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001676:	d101      	bne.n	800167c <LL_RCC_HSI_IsReady+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_RCC_HSI_IsReady+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d101      	bne.n	800170e <LL_RCC_HSI48_IsReady+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_RCC_HSI48_IsReady+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001748:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d101      	bne.n	80017ba <LL_RCC_LSE_IsReady+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_RCC_LSE_IsReady+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d101      	bne.n	8001822 <LL_RCC_LSI1_IsReady+0x18>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_RCC_LSI1_IsReady+0x1a>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d101      	bne.n	800188a <LL_RCC_LSI2_IsReady+0x18>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_RCC_LSI2_IsReady+0x1a>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d101      	bne.n	8001916 <LL_RCC_MSI_IsReady+0x16>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_RCC_MSI_IsReady+0x18>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800195a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001960:	d901      	bls.n	8001966 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001962:	23b0      	movs	r3, #176	@ 0xb0
 8001964:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 0203 	bic.w	r2, r3, #3
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b62:	d101      	bne.n	8001b68 <LL_RCC_PLL_IsReady+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_RCC_PLL_IsReady+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be8:	d101      	bne.n	8001bee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c0e:	d101      	bne.n	8001c14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c34:	d101      	bne.n	8001c3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c58:	d101      	bne.n	8001c5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c7c:	d101      	bne.n	8001c82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b08d      	sub	sp, #52	@ 0x34
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e363      	b.n	800236a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 808d 	beq.w	8001dca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb0:	f7ff fe89 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001cb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb6:	f7ff ff82 	bl	8001bbe <LL_RCC_PLL_GetMainSource>
 8001cba:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x3e>
 8001cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d147      	bne.n	8001d58 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d144      	bne.n	8001d58 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e347      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001cde:	f7ff fe34 	bl	800194a <LL_RCC_MSI_GetRange>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	d914      	bls.n	8001d12 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fd31 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e336      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe0e 	bl	8001922 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fe32 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>
 8001d10:	e013      	b.n	8001d3a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fe03 	bl	8001922 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fe27 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fd12 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e317      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d3a:	f000 fccb 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4aa4      	ldr	r2, [pc, #656]	@ (8001fd4 <HAL_RCC_OscConfig+0x344>)
 8001d42:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d44:	4ba4      	ldr	r3, [pc, #656]	@ (8001fd8 <HAL_RCC_OscConfig+0x348>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f923 	bl	8000f94 <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d039      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e308      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01e      	beq.n	8001d9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d60:	f7ff fdb0 	bl	80018c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f964 	bl	8001030 <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f960 	bl	8001030 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e2f5      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d7e:	f7ff fdbf 	bl	8001900 <LL_RCC_MSI_IsReady>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fdc8 	bl	8001922 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fdec 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d9e:	f7ff fda0 	bl	80018e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f945 	bl	8001030 <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001daa:	f7ff f941 	bl	8001030 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e2d6      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001dbc:	f7ff fda0 	bl	8001900 <LL_RCC_MSI_IsReady>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f1      	bne.n	8001daa <HAL_RCC_OscConfig+0x11a>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001dc8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d047      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	f7ff fdf6 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001dda:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ddc:	f7ff feef 	bl	8001bbe <LL_RCC_PLL_GetMainSource>
 8001de0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_OscConfig+0x164>
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d108      	bne.n	8001e00 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d134      	bne.n	8001e66 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e2b4      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x180>
 8001e0a:	f7ff fbdd 	bl	80015c8 <LL_RCC_HSE_Enable>
 8001e0e:	e001      	b.n	8001e14 <HAL_RCC_OscConfig+0x184>
 8001e10:	f7ff fbe9 	bl	80015e6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f908 	bl	8001030 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff f904 	bl	8001030 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	@ 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e299      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e36:	f7ff fbe5 	bl	8001604 <LL_RCC_HSE_IsReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x194>
 8001e40:	e011      	b.n	8001e66 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f8f5 	bl	8001030 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4a:	f7ff f8f1 	bl	8001030 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e286      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e5c:	f7ff fbd2 	bl	8001604 <LL_RCC_HSE_IsReady>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f1      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d04c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	f7ff fda8 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001e76:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	f7ff fea1 	bl	8001bbe <LL_RCC_PLL_GetMainSource>
 8001e7c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x200>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d10e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e266      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fbf1 	bl	8001688 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ea6:	e031      	b.n	8001f0c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d019      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	f7ff fbba 	bl	8001628 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f8bc 	bl	8001030 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff f8b8 	bl	8001030 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e24d      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ece:	f7ff fbc9 	bl	8001664 <LL_RCC_HSI_IsReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f1      	beq.n	8001ebc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fbd3 	bl	8001688 <LL_RCC_HSI_SetCalibTrimming>
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee4:	f7ff fbaf 	bl	8001646 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f8a2 	bl	8001030 <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f89e 	bl	8001030 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e233      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f02:	f7ff fbaf 	bl	8001664 <LL_RCC_HSI_IsReady>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f1      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a3 	beq.w	800206c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d076      	beq.n	800201c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d046      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f3a:	f7ff fc66 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f44:	f7ff fc3f 	bl	80017c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f48:	f7ff f872 	bl	8001030 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f50:	f7ff f86e 	bl	8001030 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e203      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f62:	f7ff fc52 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f6c:	f7ff fc5f 	bl	800182e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f85e 	bl	8001030 <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f78:	f7ff f85a 	bl	8001030 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1ef      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f8a:	f7ff fc72 	bl	8001872 <LL_RCC_LSI2_IsReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f1      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fc7c 	bl	8001896 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f9e:	f7ff fc23 	bl	80017e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f845 	bl	8001030 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001faa:	f7ff f841 	bl	8001030 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1d6      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001fbc:	f7ff fc25 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f1      	bne.n	8001faa <HAL_RCC_OscConfig+0x31a>
 8001fc6:	e051      	b.n	800206c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001fc8:	f7ff fbfd 	bl	80017c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f830 	bl	8001030 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fd2:	e00c      	b.n	8001fee <HAL_RCC_OscConfig+0x35e>
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fdc:	f7ff f828 	bl	8001030 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1bd      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fee:	f7ff fc0c 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f1      	beq.n	8001fdc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001ff8:	f7ff fc2a 	bl	8001850 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ffe:	f7ff f817 	bl	8001030 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1ac      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002010:	f7ff fc2f 	bl	8001872 <LL_RCC_LSI2_IsReady>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f1      	bne.n	8001ffe <HAL_RCC_OscConfig+0x36e>
 800201a:	e027      	b.n	800206c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800201c:	f7ff fc18 	bl	8001850 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f806 	bl	8001030 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002028:	f7ff f802 	bl	8001030 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b03      	cmp	r3, #3
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e197      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800203a:	f7ff fc1a 	bl	8001872 <LL_RCC_LSI2_IsReady>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f1      	bne.n	8002028 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002044:	f7ff fbd0 	bl	80017e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7fe fff2 	bl	8001030 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002050:	f7fe ffee 	bl	8001030 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e183      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002062:	f7ff fbd2 	bl	800180a <LL_RCC_LSI1_IsReady>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f1      	bne.n	8002050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	4ba7      	ldr	r3, [pc, #668]	@ (8002318 <HAL_RCC_OscConfig+0x688>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d114      	bne.n	80020ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002084:	f7ff fa70 	bl	8001568 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002088:	f7fe ffd2 	bl	8001030 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7fe ffce 	bl	8001030 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e163      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002318 <HAL_RCC_OscConfig+0x688>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x42c>
 80020b6:	f7ff fb30 	bl	800171a <LL_RCC_LSE_Enable>
 80020ba:	e00c      	b.n	80020d6 <HAL_RCC_OscConfig+0x446>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d104      	bne.n	80020ce <HAL_RCC_OscConfig+0x43e>
 80020c4:	f7ff fb4b 	bl	800175e <LL_RCC_LSE_EnableBypass>
 80020c8:	f7ff fb27 	bl	800171a <LL_RCC_LSE_Enable>
 80020cc:	e003      	b.n	80020d6 <HAL_RCC_OscConfig+0x446>
 80020ce:	f7ff fb35 	bl	800173c <LL_RCC_LSE_Disable>
 80020d2:	f7ff fb55 	bl	8001780 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d014      	beq.n	8002108 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe ffa7 	bl	8001030 <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe ffa3 	bl	8001030 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e136      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020fc:	f7ff fb51 	bl	80017a2 <LL_RCC_LSE_IsReady>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0ef      	beq.n	80020e6 <HAL_RCC_OscConfig+0x456>
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7fe ff92 	bl	8001030 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe ff8e 	bl	8001030 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e121      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002126:	f7ff fb3c 	bl	80017a2 <LL_RCC_LSE_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ef      	bne.n	8002110 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02c      	beq.n	8002196 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d014      	beq.n	800216e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002144:	f7ff fab5 	bl	80016b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe ff72 	bl	8001030 <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7fe ff6e 	bl	8001030 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e103      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002162:	f7ff fac8 	bl	80016f6 <LL_RCC_HSI48_IsReady>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f1      	beq.n	8002150 <HAL_RCC_OscConfig+0x4c0>
 800216c:	e013      	b.n	8002196 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216e:	f7ff fab1 	bl	80016d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe ff5d 	bl	8001030 <HAL_GetTick>
 8002176:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217a:	f7fe ff59 	bl	8001030 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0ee      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800218c:	f7ff fab3 	bl	80016f6 <LL_RCC_HSI48_IsReady>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f1      	bne.n	800217a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80e4 	beq.w	8002368 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a0:	f7ff fc11 	bl	80019c6 <LL_RCC_GetSysClkSource>
 80021a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 80b4 	bne.w	8002320 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0203 	and.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d123      	bne.n	800220e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d11c      	bne.n	800220e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d114      	bne.n	800220e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d05d      	beq.n	80022ca <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d058      	beq.n	80022c6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0a1      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002226:	f7ff fc84 	bl	8001b32 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800222a:	f7fe ff01 	bl	8001030 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fefd 	bl	8001030 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e092      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ef      	bne.n	8002232 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b30      	ldr	r3, [pc, #192]	@ (800231c <HAL_RCC_OscConfig+0x68c>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800226a:	0212      	lsls	r2, r2, #8
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800227e:	430a      	orrs	r2, r1
 8002280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002284:	4313      	orrs	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002288:	f7ff fc44 	bl	8001b14 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229c:	f7fe fec8 	bl	8001030 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fec4 	bl	8001030 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e059      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	e050      	b.n	8002368 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e04f      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d147      	bne.n	8002368 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d8:	f7ff fc1c 	bl	8001b14 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ec:	f7fe fea0 	bl	8001030 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe fe9c 	bl	8001030 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e031      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ef      	beq.n	80022f4 <HAL_RCC_OscConfig+0x664>
 8002314:	e028      	b.n	8002368 <HAL_RCC_OscConfig+0x6d8>
 8002316:	bf00      	nop
 8002318:	58000400 	.word	0x58000400
 800231c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d01e      	beq.n	8002364 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	f7ff fc04 	bl	8001b32 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fe81 	bl	8001030 <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fe7d 	bl	8001030 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e012      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_OscConfig+0x6e4>)
 800235e:	4013      	ands	r3, r2
 8002360:	60cb      	str	r3, [r1, #12]
 8002362:	e001      	b.n	8002368 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3734      	adds	r7, #52	@ 0x34
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	eefefffc 	.word	0xeefefffc

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e12d      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b98      	ldr	r3, [pc, #608]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d91b      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b95      	ldr	r3, [pc, #596]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4993      	ldr	r1, [pc, #588]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023aa:	f7fe fe41 	bl	8001030 <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023b2:	f7fe fe3d 	bl	8001030 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e111      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c4:	4b8a      	ldr	r3, [pc, #552]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d1ef      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fafb 	bl	80019de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e8:	f7fe fe22 	bl	8001030 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023f0:	f7fe fe1e 	bl	8001030 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0f2      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002402:	f7ff fbe8 	bl	8001bd6 <LL_RCC_IsActiveFlag_HPRE>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f1      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d016      	beq.n	8002446 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff faf2 	bl	8001a06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002422:	f7fe fe05 	bl	8001030 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800242a:	f7fe fe01 	bl	8001030 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0d5      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800243c:	f7ff fbdd 	bl	8001bfa <LL_RCC_IsActiveFlag_C2HPRE>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f1      	beq.n	800242a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff faeb 	bl	8001a32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800245c:	f7fe fde8 	bl	8001030 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002464:	f7fe fde4 	bl	8001030 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b8      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002476:	f7ff fbd3 	bl	8001c20 <LL_RCC_IsActiveFlag_SHDHPRE>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f1      	beq.n	8002464 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d016      	beq.n	80024ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fae5 	bl	8001a60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002496:	f7fe fdcb 	bl	8001030 <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800249e:	f7fe fdc7 	bl	8001030 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e09b      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024b0:	f7ff fbc9 	bl	8001c46 <LL_RCC_IsActiveFlag_PPRE1>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f1      	beq.n	800249e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d017      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fadb 	bl	8001a88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024d2:	f7fe fdad 	bl	8001030 <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024da:	f7fe fda9 	bl	8001030 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e07d      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024ec:	f7ff fbbd 	bl	8001c6a <LL_RCC_IsActiveFlag_PPRE2>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d043      	beq.n	800258a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d106      	bne.n	8002518 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800250a:	f7ff f87b 	bl	8001604 <LL_RCC_HSE_IsReady>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11e      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e067      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d106      	bne.n	800252e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002520:	f7ff fb16 	bl	8001b50 <LL_RCC_PLL_IsReady>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d113      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e05c      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002536:	f7ff f9e3 	bl	8001900 <LL_RCC_MSI_IsReady>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e051      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002544:	f7ff f88e 	bl	8001664 <LL_RCC_HSI_IsReady>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e04a      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa21 	bl	800199e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7fe fd68 	bl	8001030 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fd64 	bl	8001030 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e036      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	f7ff fa24 	bl	80019c6 <LL_RCC_GetSysClkSource>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	429a      	cmp	r2, r3
 8002588:	d1ec      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d21b      	bcs.n	80025d0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	4913      	ldr	r1, [pc, #76]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd42 	bl	8001030 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025b0:	f7fe fd3e 	bl	8001030 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e012      	b.n	80025e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_ClockConfig+0x278>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1ef      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025d0:	f000 f880 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a07      	ldr	r2, [pc, #28]	@ (80025f4 <HAL_RCC_ClockConfig+0x27c>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80025da:	f7fe fd35 	bl	8001048 <HAL_GetTickPrio>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fcd7 	bl	8000f94 <HAL_InitTick>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58004000 	.word	0x58004000
 80025f4:	2000000c 	.word	0x2000000c

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	f7ff f9e2 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8002602:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800260a:	f7ff f99e 	bl	800194a <LL_RCC_MSI_GetRange>
 800260e:	4603      	mov	r3, r0
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a2b      	ldr	r2, [pc, #172]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e04b      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d102      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e045      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d10a      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002632:	f7fe ffb7 	bl	80015a4 <LL_RCC_HSE_IsEnabledDiv2>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e03a      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e037      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002648:	f7ff fab9 	bl	8001bbe <LL_RCC_PLL_GetMainSource>
 800264c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d003      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x64>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x6a>
 800265a:	e00d      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800265e:	60bb      	str	r3, [r7, #8]
        break;
 8002660:	e015      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002662:	f7fe ff9f 	bl	80015a4 <LL_RCC_HSE_IsEnabledDiv2>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800266e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002670:	e00d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002672:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002674:	60bb      	str	r3, [r7, #8]
        break;
 8002676:	e00a      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002678:	f7ff f967 	bl	800194a <LL_RCC_MSI_GetRange>
 800267c:	4603      	mov	r3, r0
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	60bb      	str	r3, [r7, #8]
        break;
 800268c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800268e:	f7ff fa71 	bl	8001b74 <LL_RCC_PLL_GetN>
 8002692:	4602      	mov	r2, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	fb03 f402 	mul.w	r4, r3, r2
 800269a:	f7ff fa84 	bl	8001ba6 <LL_RCC_PLL_GetDivider>
 800269e:	4603      	mov	r3, r0
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	3301      	adds	r3, #1
 80026a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80026a8:	f7ff fa71 	bl	8001b8e <LL_RCC_PLL_GetR>
 80026ac:	4603      	mov	r3, r0
 80026ae:	0f5b      	lsrs	r3, r3, #29
 80026b0:	3301      	adds	r3, #1
 80026b2:	fbb4 f3f3 	udiv	r3, r4, r3
 80026b6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	08004708 	.word	0x08004708
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	003d0900 	.word	0x003d0900
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b598      	push	{r3, r4, r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026d8:	f7ff ff8e 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80026dc:	4604      	mov	r4, r0
 80026de:	f7ff f9e7 	bl	8001ab0 <LL_RCC_GetAHBPrescaler>
 80026e2:	4603      	mov	r3, r0
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a03      	ldr	r2, [pc, #12]	@ (80026f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd98      	pop	{r3, r4, r7, pc}
 80026f8:	080046a8 	.word	0x080046a8

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b598      	push	{r3, r4, r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002700:	f7ff ffe8 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8002704:	4604      	mov	r4, r0
 8002706:	f7ff f9ed 	bl	8001ae4 <LL_RCC_GetAPB1Prescaler>
 800270a:	4603      	mov	r3, r0
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd98      	pop	{r3, r4, r7, pc}
 8002724:	080046e8 	.word	0x080046e8

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b598      	push	{r3, r4, r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800272c:	f7ff ffd2 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8002730:	4604      	mov	r4, r0
 8002732:	f7ff f9e3 	bl	8001afc <LL_RCC_GetAPB2Prescaler>
 8002736:	4603      	mov	r3, r0
 8002738:	0adb      	lsrs	r3, r3, #11
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa24 f303 	lsr.w	r3, r4, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd98      	pop	{r3, r4, r7, pc}
 8002750:	080046e8 	.word	0x080046e8

08002754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002760:	d903      	bls.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e007      	b.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a11      	ldr	r2, [pc, #68]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800277a:	f7ff f9a5 	bl	8001ac8 <LL_RCC_GetAHB4Prescaler>
 800277e:	4603      	mov	r3, r0
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9c      	lsrs	r4, r3, #18
 800279e:	f7fe fef3 	bl	8001588 <HAL_PWREx_GetVoltageRange>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f000 f80c 	bl	80027c4 <RCC_SetFlashLatency>
 80027ac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	08004708 	.word	0x08004708
 80027bc:	080046a8 	.word	0x080046a8
 80027c0:	431bde83 	.word	0x431bde83

080027c4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b093      	sub	sp, #76	@ 0x4c
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <RCC_SetFlashLatency+0xe8>)
 80027d0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80027d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80027da:	4a35      	ldr	r2, [pc, #212]	@ (80028b0 <RCC_SetFlashLatency+0xec>)
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027e6:	4b33      	ldr	r3, [pc, #204]	@ (80028b4 <RCC_SetFlashLatency+0xf0>)
 80027e8:	f107 040c 	add.w	r4, r7, #12
 80027ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027f2:	2300      	movs	r3, #0
 80027f4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027fc:	d11a      	bne.n	8002834 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027fe:	2300      	movs	r3, #0
 8002800:	643b      	str	r3, [r7, #64]	@ 0x40
 8002802:	e013      	b.n	800282c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3348      	adds	r3, #72	@ 0x48
 800280a:	443b      	add	r3, r7
 800280c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d807      	bhi.n	8002826 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	3348      	adds	r3, #72	@ 0x48
 800281c:	443b      	add	r3, r7
 800281e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002822:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002824:	e020      	b.n	8002868 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002828:	3301      	adds	r3, #1
 800282a:	643b      	str	r3, [r7, #64]	@ 0x40
 800282c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282e:	2b03      	cmp	r3, #3
 8002830:	d9e8      	bls.n	8002804 <RCC_SetFlashLatency+0x40>
 8002832:	e019      	b.n	8002868 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002834:	2300      	movs	r3, #0
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002838:	e013      	b.n	8002862 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800283a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	3348      	adds	r3, #72	@ 0x48
 8002840:	443b      	add	r3, r7
 8002842:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d807      	bhi.n	800285c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800284c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	3348      	adds	r3, #72	@ 0x48
 8002852:	443b      	add	r3, r7
 8002854:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002858:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800285a:	e005      	b.n	8002868 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800285c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285e:	3301      	adds	r3, #1
 8002860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002864:	2b02      	cmp	r3, #2
 8002866:	d9e8      	bls.n	800283a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <RCC_SetFlashLatency+0xf4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 0207 	bic.w	r2, r3, #7
 8002870:	4911      	ldr	r1, [pc, #68]	@ (80028b8 <RCC_SetFlashLatency+0xf4>)
 8002872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002878:	f7fe fbda 	bl	8001030 <HAL_GetTick>
 800287c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800287e:	e008      	b.n	8002892 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002880:	f7fe fbd6 	bl	8001030 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e007      	b.n	80028a2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <RCC_SetFlashLatency+0xf4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800289c:	429a      	cmp	r2, r3
 800289e:	d1ef      	bne.n	8002880 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	374c      	adds	r7, #76	@ 0x4c
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	0800467c 	.word	0x0800467c
 80028b0:	0800468c 	.word	0x0800468c
 80028b4:	08004698 	.word	0x08004698
 80028b8:	58004000 	.word	0x58004000

080028bc <LL_RCC_LSE_IsEnabled>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <LL_RCC_LSE_IsEnabled+0x18>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_RCC_LSE_IsEnabled+0x1a>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_LSE_IsReady>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d101      	bne.n	80028f8 <LL_RCC_LSE_IsReady+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_RCC_LSE_IsReady+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_SetRFWKPClockSource>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_SetSMPSClockSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_RCC_SetSMPSPrescaler>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800296a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4313      	orrs	r3, r2
 8002972:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_RCC_SetUSARTClockSource>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f023 0203 	bic.w	r2, r3, #3
 8002994:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_RCC_SetLPUARTClockSource>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_SetI2CClockSource>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029f0:	43db      	mvns	r3, r3
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_SetLPTIMClockSource>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_SetSAIClockSource>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_SetRNGClockSource>:
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_SetCLK48ClockSource>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_RCC_SetUSBClockSource>:
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffe3 	bl	8002a9e <LL_RCC_SetCLK48ClockSource>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <LL_RCC_SetADCClockSource>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002af4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_SetRTCClockSource>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_GetRTCClockSource>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_ForceBackupDomainReset>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_RCC_PLLSAI1_Enable>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ba4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_PLLSAI1_Disable>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_PLLSAI1_IsReady>:
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002be4:	d101      	bne.n	8002bea <LL_RCC_PLLSAI1_IsReady+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bfe:	2300      	movs	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c02:	2300      	movs	r3, #0
 8002c04:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d034      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c1a:	d021      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c20:	d81b      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c26:	d01d      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c2c:	d815      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c36:	d110      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c46:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c48:	e00d      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f947 	bl	8002ee2 <RCCEx_PLLSAI1_ConfigNP>
 8002c54:	4603      	mov	r3, r0
 8002c56:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c58:	e005      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]
        break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fee8 	bl	8002a46 <LL_RCC_SetSAIClockSource>
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c88:	f7ff ff56 	bl	8002b38 <LL_RCC_GetRTCClockSource>
 8002c8c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d03c      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c98:	f7fe fc66 	bl	8001568 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff30 	bl	8002b0c <LL_RCC_SetRTCClockSource>
 8002cac:	e02e      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002cb8:	f7ff ff4b 	bl	8002b52 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002cbc:	f7ff ff5a 	bl	8002b74 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002cce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002cd8:	f7ff fdf0 	bl	80028bc <LL_RCC_LSE_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d114      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce2:	f7fe f9a5 	bl	8001030 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe f9a1 	bl	8001030 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d902      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	77fb      	strb	r3, [r7, #31]
              break;
 8002d00:	e004      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d02:	f7ff fded 	bl	80028e0 <LL_RCC_LSE_IsReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	77bb      	strb	r3, [r7, #30]
 8002d10:	e001      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fe2a 	bl	8002980 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fe35 	bl	80029ac <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe5d 	bl	8002a12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fe52 	bl	8002a12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fe2a 	bl	80029d8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe1f 	bl	80029d8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d022      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fe8d 	bl	8002aca <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db8:	d107      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f8dd 	bl	8002f98 <RCCEx_PLLSAI1_ConfigNQ>
 8002dde:	4603      	mov	r3, r0
 8002de0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fe2a 	bl	8002a72 <LL_RCC_SetRNGClockSource>
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7ff fe21 	bl	8002a72 <LL_RCC_SetRNGClockSource>
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7ff fe34 	bl	8002a9e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fe3d 	bl	8002ae0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f8dd 	bl	800304e <RCCEx_PLLSAI1_ConfigNR>
 8002e94:	4603      	mov	r3, r0
 8002e96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fd26 	bl	8002904 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fd45 	bl	8002958 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd2c 	bl	8002930 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ed8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002eee:	f7ff fe61 	bl	8002bb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ef2:	f7fe f89d 	bl	8001030 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ef8:	e009      	b.n	8002f0e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efa:	f7fe f899 	bl	8001030 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e004      	b.n	8002f18 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f0e:	f7ff fe60 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d137      	bne.n	8002f8e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f32:	4313      	orrs	r3, r2
 8002f34:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f4c:	f7ff fe23 	bl	8002b96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe f86e 	bl	8001030 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f58:	f7fe f86a 	bl	8001030 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6a:	e004      	b.n	8002f76 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f6c:	f7ff fe31 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d1f0      	bne.n	8002f58 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fa4:	f7ff fe06 	bl	8002bb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fa8:	f7fe f842 	bl	8001030 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fae:	e009      	b.n	8002fc4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb0:	f7fe f83e 	bl	8001030 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc2:	e004      	b.n	8002fce <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fc4:	f7ff fe05 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d137      	bne.n	8003044 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ffe:	4313      	orrs	r3, r2
 8003000:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003002:	f7ff fdc8 	bl	8002b96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe f813 	bl	8001030 <HAL_GetTick>
 800300a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800300c:	e009      	b.n	8003022 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800300e:	f7fe f80f 	bl	8001030 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	73fb      	strb	r3, [r7, #15]
        break;
 8003020:	e004      	b.n	800302c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003022:	f7ff fdd6 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 8003026:	4603      	mov	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d1f0      	bne.n	800300e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003040:	4313      	orrs	r3, r2
 8003042:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800305a:	f7ff fdab 	bl	8002bb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800305e:	f7fd ffe7 	bl	8001030 <HAL_GetTick>
 8003062:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003064:	e009      	b.n	800307a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003066:	f7fd ffe3 	bl	8001030 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e004      	b.n	8003084 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800307a:	f7ff fdaa 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d137      	bne.n	80030fa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b4:	4313      	orrs	r3, r2
 80030b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030b8:	f7ff fd6d 	bl	8002b96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030bc:	f7fd ffb8 	bl	8001030 <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030c2:	e009      	b.n	80030d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c4:	f7fd ffb4 	bl	8001030 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	73fb      	strb	r3, [r7, #15]
        break;
 80030d6:	e004      	b.n	80030e2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030d8:	f7ff fd7b 	bl	8002bd2 <LL_RCC_PLLSAI1_IsReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d1f0      	bne.n	80030c4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d108      	bne.n	80030fa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e027      	b.n	8003166 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7a5b      	ldrb	r3, [r3, #9]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fdb2 	bl	8000c90 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 0120 	bic.w	r1, r3, #32
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0204 	orr.w	r2, r2, #4
 8003156:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7a1b      	ldrb	r3, [r3, #8]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003184:	2302      	movs	r3, #2
 8003186:	e044      	b.n	8003212 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7a5b      	ldrb	r3, [r3, #9]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d133      	bne.n	8003200 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800319e:	f7fd ff47 	bl	8001030 <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80031a4:	e018      	b.n	80031d8 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80031a6:	f7fd ff43 	bl	8001030 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d911      	bls.n	80031d8 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00a      	beq.n	80031d8 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01c      	b.n	8003212 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d1df      	bne.n	80031a6 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	725a      	strb	r2, [r3, #9]
 80031fe:	e004      	b.n	800320a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	721a      	strb	r2, [r3, #8]

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <LL_RCC_GetUSARTClockSource>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003226:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4013      	ands	r3, r2
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_GetLPUARTClockSource>:
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003246:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4013      	ands	r3, r2
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e042      	b.n	80032f2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fd30 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	@ 0x24
 8003288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fadf 	bl	8003868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8b4 	bl	8003418 <UART_SetConfig>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e01b      	b.n	80032f2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fb5e 	bl	80039ac <UART_CheckIdleState>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	@ 0x28
 80032fe:	af02      	add	r7, sp, #8
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	2b20      	cmp	r3, #32
 8003312:	d17b      	bne.n	800340c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Transmit+0x26>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e074      	b.n	800340e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2221      	movs	r2, #33	@ 0x21
 8003330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003334:	f7fd fe7c 	bl	8001030 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003352:	d108      	bne.n	8003366 <HAL_UART_Transmit+0x6c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e003      	b.n	800336e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800336e:	e030      	b.n	80033d2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fbc0 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03d      	b.n	800340e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	3302      	adds	r3, #2
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e007      	b.n	80033c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1c8      	bne.n	8003370 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2140      	movs	r1, #64	@ 0x40
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fb89 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e006      	b.n	800340e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b08c      	sub	sp, #48	@ 0x30
 800341e:	af00      	add	r7, sp, #0
 8003420:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	431a      	orrs	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4313      	orrs	r3, r2
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4baf      	ldr	r3, [pc, #700]	@ (8003704 <UART_SetConfig+0x2ec>)
 8003448:	4013      	ands	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003450:	430b      	orrs	r3, r1
 8003452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4aa4      	ldr	r2, [pc, #656]	@ (8003708 <UART_SetConfig+0x2f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003480:	4313      	orrs	r3, r2
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800348e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003498:	430b      	orrs	r3, r1
 800349a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	f023 010f 	bic.w	r1, r3, #15
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a95      	ldr	r2, [pc, #596]	@ (800370c <UART_SetConfig+0x2f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d125      	bne.n	8003508 <UART_SetConfig+0xf0>
 80034bc:	2003      	movs	r0, #3
 80034be:	f7ff feac 	bl	800321a <LL_RCC_GetUSARTClockSource>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d81b      	bhi.n	8003500 <UART_SetConfig+0xe8>
 80034c8:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <UART_SetConfig+0xb8>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f1 	.word	0x080034f1
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e6:	e042      	b.n	800356e <UART_SetConfig+0x156>
 80034e8:	2302      	movs	r3, #2
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ee:	e03e      	b.n	800356e <UART_SetConfig+0x156>
 80034f0:	2304      	movs	r3, #4
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f6:	e03a      	b.n	800356e <UART_SetConfig+0x156>
 80034f8:	2308      	movs	r3, #8
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034fe:	e036      	b.n	800356e <UART_SetConfig+0x156>
 8003500:	2310      	movs	r3, #16
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003506:	e032      	b.n	800356e <UART_SetConfig+0x156>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7e      	ldr	r2, [pc, #504]	@ (8003708 <UART_SetConfig+0x2f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d12a      	bne.n	8003568 <UART_SetConfig+0x150>
 8003512:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003516:	f7ff fe90 	bl	800323a <LL_RCC_GetLPUARTClockSource>
 800351a:	4603      	mov	r3, r0
 800351c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003520:	d01a      	beq.n	8003558 <UART_SetConfig+0x140>
 8003522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003526:	d81b      	bhi.n	8003560 <UART_SetConfig+0x148>
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352c:	d00c      	beq.n	8003548 <UART_SetConfig+0x130>
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003532:	d815      	bhi.n	8003560 <UART_SetConfig+0x148>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <UART_SetConfig+0x128>
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353c:	d008      	beq.n	8003550 <UART_SetConfig+0x138>
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x148>
 8003540:	2300      	movs	r3, #0
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003546:	e012      	b.n	800356e <UART_SetConfig+0x156>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354e:	e00e      	b.n	800356e <UART_SetConfig+0x156>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003556:	e00a      	b.n	800356e <UART_SetConfig+0x156>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800355e:	e006      	b.n	800356e <UART_SetConfig+0x156>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003566:	e002      	b.n	800356e <UART_SetConfig+0x156>
 8003568:	2310      	movs	r3, #16
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a65      	ldr	r2, [pc, #404]	@ (8003708 <UART_SetConfig+0x2f0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	f040 8097 	bne.w	80036a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800357a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800357e:	2b08      	cmp	r3, #8
 8003580:	d823      	bhi.n	80035ca <UART_SetConfig+0x1b2>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <UART_SetConfig+0x170>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035bb 	.word	0x080035bb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035cb 	.word	0x080035cb
 80035a4:	080035cb 	.word	0x080035cb
 80035a8:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7ff f8a6 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035b2:	e010      	b.n	80035d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <UART_SetConfig+0x2f8>)
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035b8:	e00d      	b.n	80035d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7ff f81d 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80035be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035c0:	e009      	b.n	80035d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035c8:	e005      	b.n	80035d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 812b 	beq.w	8003834 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003714 <UART_SetConfig+0x2fc>)
 80035e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035e8:	461a      	mov	r2, r3
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d305      	bcc.n	800360e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	429a      	cmp	r2, r3
 800360c:	d903      	bls.n	8003616 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003614:	e10e      	b.n	8003834 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	2200      	movs	r2, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	60fa      	str	r2, [r7, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	4a3c      	ldr	r2, [pc, #240]	@ (8003714 <UART_SetConfig+0x2fc>)
 8003624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003628:	b29b      	uxth	r3, r3
 800362a:	2200      	movs	r2, #0
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003638:	f7fc fdfa 	bl	8000230 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	020b      	lsls	r3, r1, #8
 800364e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003652:	0202      	lsls	r2, r0, #8
 8003654:	6979      	ldr	r1, [r7, #20]
 8003656:	6849      	ldr	r1, [r1, #4]
 8003658:	0849      	lsrs	r1, r1, #1
 800365a:	2000      	movs	r0, #0
 800365c:	460c      	mov	r4, r1
 800365e:	4605      	mov	r5, r0
 8003660:	eb12 0804 	adds.w	r8, r2, r4
 8003664:	eb43 0905 	adc.w	r9, r3, r5
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	469a      	mov	sl, r3
 8003670:	4693      	mov	fp, r2
 8003672:	4652      	mov	r2, sl
 8003674:	465b      	mov	r3, fp
 8003676:	4640      	mov	r0, r8
 8003678:	4649      	mov	r1, r9
 800367a:	f7fc fdd9 	bl	8000230 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4613      	mov	r3, r2
 8003684:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800368c:	d308      	bcc.n	80036a0 <UART_SetConfig+0x288>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003694:	d204      	bcs.n	80036a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e0c9      	b.n	8003834 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036a6:	e0c5      	b.n	8003834 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b0:	d16d      	bne.n	800378e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80036b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	3b01      	subs	r3, #1
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d82d      	bhi.n	8003718 <UART_SetConfig+0x300>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0x2ac>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e5 	.word	0x080036e5
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	08003719 	.word	0x08003719
 80036d0:	080036f3 	.word	0x080036f3
 80036d4:	08003719 	.word	0x08003719
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003719 	.word	0x08003719
 80036e0:	080036fb 	.word	0x080036fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff f820 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80036e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036ea:	e01b      	b.n	8003724 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ec:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <UART_SetConfig+0x2f8>)
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036f0:	e018      	b.n	8003724 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f2:	f7fe ff81 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80036f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036f8:	e014      	b.n	8003724 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003700:	e010      	b.n	8003724 <UART_SetConfig+0x30c>
 8003702:	bf00      	nop
 8003704:	cfff69f3 	.word	0xcfff69f3
 8003708:	40008000 	.word	0x40008000
 800370c:	40013800 	.word	0x40013800
 8003710:	00f42400 	.word	0x00f42400
 8003714:	08004748 	.word	0x08004748
      default:
        pclk = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8084 	beq.w	8003834 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	4a4b      	ldr	r2, [pc, #300]	@ (8003860 <UART_SetConfig+0x448>)
 8003732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003736:	461a      	mov	r2, r3
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	fbb3 f3f2 	udiv	r3, r3, r2
 800373e:	005a      	lsls	r2, r3, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	441a      	add	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d916      	bls.n	8003786 <UART_SetConfig+0x36e>
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375e:	d212      	bcs.n	8003786 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f023 030f 	bic.w	r3, r3, #15
 8003768:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	b29b      	uxth	r3, r3
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	b29a      	uxth	r2, r3
 8003776:	8bfb      	ldrh	r3, [r7, #30]
 8003778:	4313      	orrs	r3, r2
 800377a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	8bfa      	ldrh	r2, [r7, #30]
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	e056      	b.n	8003834 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800378c:	e052      	b.n	8003834 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800378e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003792:	3b01      	subs	r3, #1
 8003794:	2b07      	cmp	r3, #7
 8003796:	d822      	bhi.n	80037de <UART_SetConfig+0x3c6>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <UART_SetConfig+0x388>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c1 	.word	0x080037c1
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037cf 	.word	0x080037cf
 80037b0:	080037df 	.word	0x080037df
 80037b4:	080037df 	.word	0x080037df
 80037b8:	080037df 	.word	0x080037df
 80037bc:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7fe ffb2 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 80037c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037c6:	e010      	b.n	80037ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <UART_SetConfig+0x44c>)
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037cc:	e00d      	b.n	80037ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7fe ff13 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80037d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d4:	e009      	b.n	80037ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037dc:	e005      	b.n	80037ea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037e8:	bf00      	nop
    }

    if (pclk != 0U)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d021      	beq.n	8003834 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <UART_SetConfig+0x448>)
 80037f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	441a      	add	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	d909      	bls.n	800382e <UART_SetConfig+0x416>
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d205      	bcs.n	800382e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	b29a      	uxth	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	e002      	b.n	8003834 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2201      	movs	r2, #1
 8003838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2201      	movs	r2, #1
 8003840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003850:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	@ 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	08004748 	.word	0x08004748
 8003864:	00f42400 	.word	0x00f42400

08003868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01a      	beq.n	800397e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003966:	d10a      	bne.n	800397e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b098      	sub	sp, #96	@ 0x60
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039bc:	f7fd fb38 	bl	8001030 <HAL_GetTick>
 80039c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d12f      	bne.n	8003a30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f88e 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e063      	b.n	8003af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d149      	bne.n	8003ad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f857 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d03c      	beq.n	8003ad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	623b      	str	r3, [r7, #32]
   return(result);
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aaa:	61fa      	str	r2, [r7, #28]
 8003aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e012      	b.n	8003af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3758      	adds	r7, #88	@ 0x58
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e04f      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d04b      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fd fa89 	bl	8001030 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e04e      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d037      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b80      	cmp	r3, #128	@ 0x80
 8003b46:	d034      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d031      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d110      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f838 	bl	8003bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e029      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b8c:	d111      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f81e 	bl	8003bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0a0      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b095      	sub	sp, #84	@ 0x54
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3308      	adds	r3, #8
 8003c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e3      	bne.n	8003c14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d118      	bne.n	8003c86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c9a:	bf00      	nop
 8003c9c:	3754      	adds	r7, #84	@ 0x54
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <sniprintf>:
 8003ca8:	b40c      	push	{r2, r3}
 8003caa:	b530      	push	{r4, r5, lr}
 8003cac:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <sniprintf+0x68>)
 8003cae:	1e0c      	subs	r4, r1, #0
 8003cb0:	681d      	ldr	r5, [r3, #0]
 8003cb2:	b09d      	sub	sp, #116	@ 0x74
 8003cb4:	da08      	bge.n	8003cc8 <sniprintf+0x20>
 8003cb6:	238b      	movs	r3, #139	@ 0x8b
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbe:	b01d      	add	sp, #116	@ 0x74
 8003cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cc4:	b002      	add	sp, #8
 8003cc6:	4770      	bx	lr
 8003cc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003cd6:	bf14      	ite	ne
 8003cd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cdc:	4623      	moveq	r3, r4
 8003cde:	9304      	str	r3, [sp, #16]
 8003ce0:	9307      	str	r3, [sp, #28]
 8003ce2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ce6:	9002      	str	r0, [sp, #8]
 8003ce8:	9006      	str	r0, [sp, #24]
 8003cea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cf0:	ab21      	add	r3, sp, #132	@ 0x84
 8003cf2:	a902      	add	r1, sp, #8
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	f000 f994 	bl	8004024 <_svfiprintf_r>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	bfbc      	itt	lt
 8003d00:	238b      	movlt	r3, #139	@ 0x8b
 8003d02:	602b      	strlt	r3, [r5, #0]
 8003d04:	2c00      	cmp	r4, #0
 8003d06:	d0da      	beq.n	8003cbe <sniprintf+0x16>
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e7d6      	b.n	8003cbe <sniprintf+0x16>
 8003d10:	20000018 	.word	0x20000018

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <__errno>:
 8003d24:	4b01      	ldr	r3, [pc, #4]	@ (8003d2c <__errno+0x8>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000018 	.word	0x20000018

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4d0d      	ldr	r5, [pc, #52]	@ (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	@ (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4d0b      	ldr	r5, [pc, #44]	@ (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	@ (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 fc64 	bl	8004610 <_init>
 8003d48:	1b64      	subs	r4, r4, r5
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	42a6      	cmp	r6, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d58:	4798      	blx	r3
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d62:	4798      	blx	r3
 8003d64:	3601      	adds	r6, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	0800479c 	.word	0x0800479c
 8003d6c:	0800479c 	.word	0x0800479c
 8003d70:	0800479c 	.word	0x0800479c
 8003d74:	080047a0 	.word	0x080047a0

08003d78 <__retarget_lock_acquire_recursive>:
 8003d78:	4770      	bx	lr

08003d7a <__retarget_lock_release_recursive>:
 8003d7a:	4770      	bx	lr

08003d7c <_free_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4605      	mov	r5, r0
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d041      	beq.n	8003e08 <_free_r+0x8c>
 8003d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d88:	1f0c      	subs	r4, r1, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfb8      	it	lt
 8003d8e:	18e4      	addlt	r4, r4, r3
 8003d90:	f000 f8e0 	bl	8003f54 <__malloc_lock>
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <_free_r+0x90>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	b933      	cbnz	r3, 8003da8 <_free_r+0x2c>
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	6014      	str	r4, [r2, #0]
 8003d9e:	4628      	mov	r0, r5
 8003da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da4:	f000 b8dc 	b.w	8003f60 <__malloc_unlock>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d908      	bls.n	8003dbe <_free_r+0x42>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf01      	itttt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	1809      	addeq	r1, r1, r0
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	e7ed      	b.n	8003d9a <_free_r+0x1e>
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b10b      	cbz	r3, 8003dc8 <_free_r+0x4c>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d9fa      	bls.n	8003dbe <_free_r+0x42>
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	1850      	adds	r0, r2, r1
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d10b      	bne.n	8003de8 <_free_r+0x6c>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	4401      	add	r1, r0
 8003dd4:	1850      	adds	r0, r2, r1
 8003dd6:	4283      	cmp	r3, r0
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	d1e0      	bne.n	8003d9e <_free_r+0x22>
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	6053      	str	r3, [r2, #4]
 8003de2:	4408      	add	r0, r1
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	e7da      	b.n	8003d9e <_free_r+0x22>
 8003de8:	d902      	bls.n	8003df0 <_free_r+0x74>
 8003dea:	230c      	movs	r3, #12
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	e7d6      	b.n	8003d9e <_free_r+0x22>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	1821      	adds	r1, r4, r0
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf04      	itt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	bf04      	itt	eq
 8003e00:	1809      	addeq	r1, r1, r0
 8003e02:	6021      	streq	r1, [r4, #0]
 8003e04:	6054      	str	r4, [r2, #4]
 8003e06:	e7ca      	b.n	8003d9e <_free_r+0x22>
 8003e08:	bd38      	pop	{r3, r4, r5, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000031c 	.word	0x2000031c

08003e10 <sbrk_aligned>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4e0f      	ldr	r6, [pc, #60]	@ (8003e50 <sbrk_aligned+0x40>)
 8003e14:	460c      	mov	r4, r1
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b911      	cbnz	r1, 8003e22 <sbrk_aligned+0x12>
 8003e1c:	f000 fba4 	bl	8004568 <_sbrk_r>
 8003e20:	6030      	str	r0, [r6, #0]
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 fb9f 	bl	8004568 <_sbrk_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d103      	bne.n	8003e36 <sbrk_aligned+0x26>
 8003e2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e32:	4620      	mov	r0, r4
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d0f8      	beq.n	8003e32 <sbrk_aligned+0x22>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 fb90 	bl	8004568 <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d1f2      	bne.n	8003e32 <sbrk_aligned+0x22>
 8003e4c:	e7ef      	b.n	8003e2e <sbrk_aligned+0x1e>
 8003e4e:	bf00      	nop
 8003e50:	20000318 	.word	0x20000318

08003e54 <_malloc_r>:
 8003e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e58:	1ccd      	adds	r5, r1, #3
 8003e5a:	f025 0503 	bic.w	r5, r5, #3
 8003e5e:	3508      	adds	r5, #8
 8003e60:	2d0c      	cmp	r5, #12
 8003e62:	bf38      	it	cc
 8003e64:	250c      	movcc	r5, #12
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	4606      	mov	r6, r0
 8003e6a:	db01      	blt.n	8003e70 <_malloc_r+0x1c>
 8003e6c:	42a9      	cmp	r1, r5
 8003e6e:	d904      	bls.n	8003e7a <_malloc_r+0x26>
 8003e70:	230c      	movs	r3, #12
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	2000      	movs	r0, #0
 8003e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f50 <_malloc_r+0xfc>
 8003e7e:	f000 f869 	bl	8003f54 <__malloc_lock>
 8003e82:	f8d8 3000 	ldr.w	r3, [r8]
 8003e86:	461c      	mov	r4, r3
 8003e88:	bb44      	cbnz	r4, 8003edc <_malloc_r+0x88>
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7ff ffbf 	bl	8003e10 <sbrk_aligned>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	4604      	mov	r4, r0
 8003e96:	d158      	bne.n	8003f4a <_malloc_r+0xf6>
 8003e98:	f8d8 4000 	ldr.w	r4, [r8]
 8003e9c:	4627      	mov	r7, r4
 8003e9e:	2f00      	cmp	r7, #0
 8003ea0:	d143      	bne.n	8003f2a <_malloc_r+0xd6>
 8003ea2:	2c00      	cmp	r4, #0
 8003ea4:	d04b      	beq.n	8003f3e <_malloc_r+0xea>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	4630      	mov	r0, r6
 8003eac:	eb04 0903 	add.w	r9, r4, r3
 8003eb0:	f000 fb5a 	bl	8004568 <_sbrk_r>
 8003eb4:	4581      	cmp	r9, r0
 8003eb6:	d142      	bne.n	8003f3e <_malloc_r+0xea>
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	1a6d      	subs	r5, r5, r1
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7ff ffa6 	bl	8003e10 <sbrk_aligned>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d03a      	beq.n	8003f3e <_malloc_r+0xea>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	442b      	add	r3, r5
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	bb62      	cbnz	r2, 8003f30 <_malloc_r+0xdc>
 8003ed6:	f8c8 7000 	str.w	r7, [r8]
 8003eda:	e00f      	b.n	8003efc <_malloc_r+0xa8>
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	1b52      	subs	r2, r2, r5
 8003ee0:	d420      	bmi.n	8003f24 <_malloc_r+0xd0>
 8003ee2:	2a0b      	cmp	r2, #11
 8003ee4:	d917      	bls.n	8003f16 <_malloc_r+0xc2>
 8003ee6:	1961      	adds	r1, r4, r5
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	6025      	str	r5, [r4, #0]
 8003eec:	bf18      	it	ne
 8003eee:	6059      	strne	r1, [r3, #4]
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	bf08      	it	eq
 8003ef4:	f8c8 1000 	streq.w	r1, [r8]
 8003ef8:	5162      	str	r2, [r4, r5]
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 f82f 	bl	8003f60 <__malloc_unlock>
 8003f02:	f104 000b 	add.w	r0, r4, #11
 8003f06:	1d23      	adds	r3, r4, #4
 8003f08:	f020 0007 	bic.w	r0, r0, #7
 8003f0c:	1ac2      	subs	r2, r0, r3
 8003f0e:	bf1c      	itt	ne
 8003f10:	1a1b      	subne	r3, r3, r0
 8003f12:	50a3      	strne	r3, [r4, r2]
 8003f14:	e7af      	b.n	8003e76 <_malloc_r+0x22>
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	bf0c      	ite	eq
 8003f1c:	f8c8 2000 	streq.w	r2, [r8]
 8003f20:	605a      	strne	r2, [r3, #4]
 8003f22:	e7eb      	b.n	8003efc <_malloc_r+0xa8>
 8003f24:	4623      	mov	r3, r4
 8003f26:	6864      	ldr	r4, [r4, #4]
 8003f28:	e7ae      	b.n	8003e88 <_malloc_r+0x34>
 8003f2a:	463c      	mov	r4, r7
 8003f2c:	687f      	ldr	r7, [r7, #4]
 8003f2e:	e7b6      	b.n	8003e9e <_malloc_r+0x4a>
 8003f30:	461a      	mov	r2, r3
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	d1fb      	bne.n	8003f30 <_malloc_r+0xdc>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6053      	str	r3, [r2, #4]
 8003f3c:	e7de      	b.n	8003efc <_malloc_r+0xa8>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	4630      	mov	r0, r6
 8003f44:	f000 f80c 	bl	8003f60 <__malloc_unlock>
 8003f48:	e794      	b.n	8003e74 <_malloc_r+0x20>
 8003f4a:	6005      	str	r5, [r0, #0]
 8003f4c:	e7d6      	b.n	8003efc <_malloc_r+0xa8>
 8003f4e:	bf00      	nop
 8003f50:	2000031c 	.word	0x2000031c

08003f54 <__malloc_lock>:
 8003f54:	4801      	ldr	r0, [pc, #4]	@ (8003f5c <__malloc_lock+0x8>)
 8003f56:	f7ff bf0f 	b.w	8003d78 <__retarget_lock_acquire_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	20000314 	.word	0x20000314

08003f60 <__malloc_unlock>:
 8003f60:	4801      	ldr	r0, [pc, #4]	@ (8003f68 <__malloc_unlock+0x8>)
 8003f62:	f7ff bf0a 	b.w	8003d7a <__retarget_lock_release_recursive>
 8003f66:	bf00      	nop
 8003f68:	20000314 	.word	0x20000314

08003f6c <__ssputs_r>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	688e      	ldr	r6, [r1, #8]
 8003f72:	461f      	mov	r7, r3
 8003f74:	42be      	cmp	r6, r7
 8003f76:	680b      	ldr	r3, [r1, #0]
 8003f78:	4682      	mov	sl, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	4690      	mov	r8, r2
 8003f7e:	d82d      	bhi.n	8003fdc <__ssputs_r+0x70>
 8003f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f88:	d026      	beq.n	8003fd8 <__ssputs_r+0x6c>
 8003f8a:	6965      	ldr	r5, [r4, #20]
 8003f8c:	6909      	ldr	r1, [r1, #16]
 8003f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f92:	eba3 0901 	sub.w	r9, r3, r1
 8003f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f9a:	1c7b      	adds	r3, r7, #1
 8003f9c:	444b      	add	r3, r9
 8003f9e:	106d      	asrs	r5, r5, #1
 8003fa0:	429d      	cmp	r5, r3
 8003fa2:	bf38      	it	cc
 8003fa4:	461d      	movcc	r5, r3
 8003fa6:	0553      	lsls	r3, r2, #21
 8003fa8:	d527      	bpl.n	8003ffa <__ssputs_r+0x8e>
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7ff ff52 	bl	8003e54 <_malloc_r>
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	b360      	cbz	r0, 800400e <__ssputs_r+0xa2>
 8003fb4:	6921      	ldr	r1, [r4, #16]
 8003fb6:	464a      	mov	r2, r9
 8003fb8:	f000 fae6 	bl	8004588 <memcpy>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	6126      	str	r6, [r4, #16]
 8003fca:	6165      	str	r5, [r4, #20]
 8003fcc:	444e      	add	r6, r9
 8003fce:	eba5 0509 	sub.w	r5, r5, r9
 8003fd2:	6026      	str	r6, [r4, #0]
 8003fd4:	60a5      	str	r5, [r4, #8]
 8003fd6:	463e      	mov	r6, r7
 8003fd8:	42be      	cmp	r6, r7
 8003fda:	d900      	bls.n	8003fde <__ssputs_r+0x72>
 8003fdc:	463e      	mov	r6, r7
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	f000 faa6 	bl	8004534 <memmove>
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	1b9b      	subs	r3, r3, r6
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	4433      	add	r3, r6
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	f000 fad2 	bl	80045a4 <_realloc_r>
 8004000:	4606      	mov	r6, r0
 8004002:	2800      	cmp	r0, #0
 8004004:	d1e0      	bne.n	8003fc8 <__ssputs_r+0x5c>
 8004006:	6921      	ldr	r1, [r4, #16]
 8004008:	4650      	mov	r0, sl
 800400a:	f7ff feb7 	bl	8003d7c <_free_r>
 800400e:	230c      	movs	r3, #12
 8004010:	f8ca 3000 	str.w	r3, [sl]
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	e7e9      	b.n	8003ff6 <__ssputs_r+0x8a>
	...

08004024 <_svfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4698      	mov	r8, r3
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	b09d      	sub	sp, #116	@ 0x74
 8004030:	4607      	mov	r7, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4614      	mov	r4, r2
 8004036:	d510      	bpl.n	800405a <_svfiprintf_r+0x36>
 8004038:	690b      	ldr	r3, [r1, #16]
 800403a:	b973      	cbnz	r3, 800405a <_svfiprintf_r+0x36>
 800403c:	2140      	movs	r1, #64	@ 0x40
 800403e:	f7ff ff09 	bl	8003e54 <_malloc_r>
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6128      	str	r0, [r5, #16]
 8004046:	b930      	cbnz	r0, 8004056 <_svfiprintf_r+0x32>
 8004048:	230c      	movs	r3, #12
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	b01d      	add	sp, #116	@ 0x74
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	2340      	movs	r3, #64	@ 0x40
 8004058:	616b      	str	r3, [r5, #20]
 800405a:	2300      	movs	r3, #0
 800405c:	9309      	str	r3, [sp, #36]	@ 0x24
 800405e:	2320      	movs	r3, #32
 8004060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004064:	f8cd 800c 	str.w	r8, [sp, #12]
 8004068:	2330      	movs	r3, #48	@ 0x30
 800406a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004208 <_svfiprintf_r+0x1e4>
 800406e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004072:	f04f 0901 	mov.w	r9, #1
 8004076:	4623      	mov	r3, r4
 8004078:	469a      	mov	sl, r3
 800407a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800407e:	b10a      	cbz	r2, 8004084 <_svfiprintf_r+0x60>
 8004080:	2a25      	cmp	r2, #37	@ 0x25
 8004082:	d1f9      	bne.n	8004078 <_svfiprintf_r+0x54>
 8004084:	ebba 0b04 	subs.w	fp, sl, r4
 8004088:	d00b      	beq.n	80040a2 <_svfiprintf_r+0x7e>
 800408a:	465b      	mov	r3, fp
 800408c:	4622      	mov	r2, r4
 800408e:	4629      	mov	r1, r5
 8004090:	4638      	mov	r0, r7
 8004092:	f7ff ff6b 	bl	8003f6c <__ssputs_r>
 8004096:	3001      	adds	r0, #1
 8004098:	f000 80a7 	beq.w	80041ea <_svfiprintf_r+0x1c6>
 800409c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800409e:	445a      	add	r2, fp
 80040a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040a2:	f89a 3000 	ldrb.w	r3, [sl]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 809f 	beq.w	80041ea <_svfiprintf_r+0x1c6>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b6:	f10a 0a01 	add.w	sl, sl, #1
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	9307      	str	r3, [sp, #28]
 80040be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040c4:	4654      	mov	r4, sl
 80040c6:	2205      	movs	r2, #5
 80040c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040cc:	484e      	ldr	r0, [pc, #312]	@ (8004208 <_svfiprintf_r+0x1e4>)
 80040ce:	f7fc f85f 	bl	8000190 <memchr>
 80040d2:	9a04      	ldr	r2, [sp, #16]
 80040d4:	b9d8      	cbnz	r0, 800410e <_svfiprintf_r+0xea>
 80040d6:	06d0      	lsls	r0, r2, #27
 80040d8:	bf44      	itt	mi
 80040da:	2320      	movmi	r3, #32
 80040dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e0:	0711      	lsls	r1, r2, #28
 80040e2:	bf44      	itt	mi
 80040e4:	232b      	movmi	r3, #43	@ 0x2b
 80040e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ea:	f89a 3000 	ldrb.w	r3, [sl]
 80040ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f0:	d015      	beq.n	800411e <_svfiprintf_r+0xfa>
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	4654      	mov	r4, sl
 80040f6:	2000      	movs	r0, #0
 80040f8:	f04f 0c0a 	mov.w	ip, #10
 80040fc:	4621      	mov	r1, r4
 80040fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004102:	3b30      	subs	r3, #48	@ 0x30
 8004104:	2b09      	cmp	r3, #9
 8004106:	d94b      	bls.n	80041a0 <_svfiprintf_r+0x17c>
 8004108:	b1b0      	cbz	r0, 8004138 <_svfiprintf_r+0x114>
 800410a:	9207      	str	r2, [sp, #28]
 800410c:	e014      	b.n	8004138 <_svfiprintf_r+0x114>
 800410e:	eba0 0308 	sub.w	r3, r0, r8
 8004112:	fa09 f303 	lsl.w	r3, r9, r3
 8004116:	4313      	orrs	r3, r2
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	46a2      	mov	sl, r4
 800411c:	e7d2      	b.n	80040c4 <_svfiprintf_r+0xa0>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	1d19      	adds	r1, r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	9103      	str	r1, [sp, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfbb      	ittet	lt
 800412a:	425b      	neglt	r3, r3
 800412c:	f042 0202 	orrlt.w	r2, r2, #2
 8004130:	9307      	strge	r3, [sp, #28]
 8004132:	9307      	strlt	r3, [sp, #28]
 8004134:	bfb8      	it	lt
 8004136:	9204      	strlt	r2, [sp, #16]
 8004138:	7823      	ldrb	r3, [r4, #0]
 800413a:	2b2e      	cmp	r3, #46	@ 0x2e
 800413c:	d10a      	bne.n	8004154 <_svfiprintf_r+0x130>
 800413e:	7863      	ldrb	r3, [r4, #1]
 8004140:	2b2a      	cmp	r3, #42	@ 0x2a
 8004142:	d132      	bne.n	80041aa <_svfiprintf_r+0x186>
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	9203      	str	r2, [sp, #12]
 800414c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004150:	3402      	adds	r4, #2
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004218 <_svfiprintf_r+0x1f4>
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	2203      	movs	r2, #3
 800415c:	4650      	mov	r0, sl
 800415e:	f7fc f817 	bl	8000190 <memchr>
 8004162:	b138      	cbz	r0, 8004174 <_svfiprintf_r+0x150>
 8004164:	9b04      	ldr	r3, [sp, #16]
 8004166:	eba0 000a 	sub.w	r0, r0, sl
 800416a:	2240      	movs	r2, #64	@ 0x40
 800416c:	4082      	lsls	r2, r0
 800416e:	4313      	orrs	r3, r2
 8004170:	3401      	adds	r4, #1
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004178:	4824      	ldr	r0, [pc, #144]	@ (800420c <_svfiprintf_r+0x1e8>)
 800417a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800417e:	2206      	movs	r2, #6
 8004180:	f7fc f806 	bl	8000190 <memchr>
 8004184:	2800      	cmp	r0, #0
 8004186:	d036      	beq.n	80041f6 <_svfiprintf_r+0x1d2>
 8004188:	4b21      	ldr	r3, [pc, #132]	@ (8004210 <_svfiprintf_r+0x1ec>)
 800418a:	bb1b      	cbnz	r3, 80041d4 <_svfiprintf_r+0x1b0>
 800418c:	9b03      	ldr	r3, [sp, #12]
 800418e:	3307      	adds	r3, #7
 8004190:	f023 0307 	bic.w	r3, r3, #7
 8004194:	3308      	adds	r3, #8
 8004196:	9303      	str	r3, [sp, #12]
 8004198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800419a:	4433      	add	r3, r6
 800419c:	9309      	str	r3, [sp, #36]	@ 0x24
 800419e:	e76a      	b.n	8004076 <_svfiprintf_r+0x52>
 80041a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a4:	460c      	mov	r4, r1
 80041a6:	2001      	movs	r0, #1
 80041a8:	e7a8      	b.n	80040fc <_svfiprintf_r+0xd8>
 80041aa:	2300      	movs	r3, #0
 80041ac:	3401      	adds	r4, #1
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f04f 0c0a 	mov.w	ip, #10
 80041b6:	4620      	mov	r0, r4
 80041b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041bc:	3a30      	subs	r2, #48	@ 0x30
 80041be:	2a09      	cmp	r2, #9
 80041c0:	d903      	bls.n	80041ca <_svfiprintf_r+0x1a6>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0c6      	beq.n	8004154 <_svfiprintf_r+0x130>
 80041c6:	9105      	str	r1, [sp, #20]
 80041c8:	e7c4      	b.n	8004154 <_svfiprintf_r+0x130>
 80041ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ce:	4604      	mov	r4, r0
 80041d0:	2301      	movs	r3, #1
 80041d2:	e7f0      	b.n	80041b6 <_svfiprintf_r+0x192>
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462a      	mov	r2, r5
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <_svfiprintf_r+0x1f0>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	4638      	mov	r0, r7
 80041e0:	f3af 8000 	nop.w
 80041e4:	1c42      	adds	r2, r0, #1
 80041e6:	4606      	mov	r6, r0
 80041e8:	d1d6      	bne.n	8004198 <_svfiprintf_r+0x174>
 80041ea:	89ab      	ldrh	r3, [r5, #12]
 80041ec:	065b      	lsls	r3, r3, #25
 80041ee:	f53f af2d 	bmi.w	800404c <_svfiprintf_r+0x28>
 80041f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041f4:	e72c      	b.n	8004050 <_svfiprintf_r+0x2c>
 80041f6:	ab03      	add	r3, sp, #12
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	462a      	mov	r2, r5
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <_svfiprintf_r+0x1f0>)
 80041fe:	a904      	add	r1, sp, #16
 8004200:	4638      	mov	r0, r7
 8004202:	f000 f879 	bl	80042f8 <_printf_i>
 8004206:	e7ed      	b.n	80041e4 <_svfiprintf_r+0x1c0>
 8004208:	08004760 	.word	0x08004760
 800420c:	0800476a 	.word	0x0800476a
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f6d 	.word	0x08003f6d
 8004218:	08004766 	.word	0x08004766

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4698      	mov	r8, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	3b00      	subs	r3, #0
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004278:	4641      	mov	r1, r8
 800427a:	4638      	mov	r0, r7
 800427c:	47c8      	blx	r9
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf02      	ittt	eq
 800428e:	68e5      	ldreq	r5, [r4, #12]
 8004290:	6833      	ldreq	r3, [r6, #0]
 8004292:	1aed      	subeq	r5, r5, r3
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4641      	mov	r1, r8
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c8      	blx	r9
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	@ 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4641      	mov	r1, r8
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c8      	blx	r9
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	7e0f      	ldrb	r7, [r1, #24]
 80042fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004300:	2f78      	cmp	r7, #120	@ 0x78
 8004302:	4691      	mov	r9, r2
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	469a      	mov	sl, r3
 800430a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	@ 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d1 	beq.w	80044bc <_printf_i+0x1c4>
 800431a:	2f58      	cmp	r7, #88	@ 0x58
 800431c:	f000 80b8 	beq.w	8004490 <_printf_i+0x198>
 8004320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a101      	add	r1, pc, #4	@ (adr r1, 8004338 <_printf_i+0x40>)
 8004334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044a3 	.word	0x080044a3
 8004368:	080043cf 	.word	0x080043cf
 800436c:	0800445d 	.word	0x0800445d
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044c5 	.word	0x080044c5
 800437c:	08004321 	.word	0x08004321
 8004380:	080043cf 	.word	0x080043cf
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	08004465 	.word	0x08004465
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e09c      	b.n	80044de <_printf_i+0x1e6>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	1d19      	adds	r1, r3, #4
 80043aa:	6031      	str	r1, [r6, #0]
 80043ac:	0606      	lsls	r6, r0, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xbc>
 80043b0:	681d      	ldr	r5, [r3, #0]
 80043b2:	e003      	b.n	80043bc <_printf_i+0xc4>
 80043b4:	0645      	lsls	r5, r0, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xb8>
 80043b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043bc:	2d00      	cmp	r5, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xd0>
 80043c0:	232d      	movs	r3, #45	@ 0x2d
 80043c2:	426d      	negs	r5, r5
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c8:	4858      	ldr	r0, [pc, #352]	@ (800452c <_printf_i+0x234>)
 80043ca:	230a      	movs	r3, #10
 80043cc:	e011      	b.n	80043f2 <_printf_i+0xfa>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	0608      	lsls	r0, r1, #24
 80043d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d8:	d402      	bmi.n	80043e0 <_printf_i+0xe8>
 80043da:	0649      	lsls	r1, r1, #25
 80043dc:	bf48      	it	mi
 80043de:	b2ad      	uxthmi	r5, r5
 80043e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043e2:	4852      	ldr	r0, [pc, #328]	@ (800452c <_printf_i+0x234>)
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	bf14      	ite	ne
 80043e8:	230a      	movne	r3, #10
 80043ea:	2308      	moveq	r3, #8
 80043ec:	2100      	movs	r1, #0
 80043ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043f2:	6866      	ldr	r6, [r4, #4]
 80043f4:	60a6      	str	r6, [r4, #8]
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	db05      	blt.n	8004406 <_printf_i+0x10e>
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	432e      	orrs	r6, r5
 80043fe:	f021 0104 	bic.w	r1, r1, #4
 8004402:	6021      	str	r1, [r4, #0]
 8004404:	d04b      	beq.n	800449e <_printf_i+0x1a6>
 8004406:	4616      	mov	r6, r2
 8004408:	fbb5 f1f3 	udiv	r1, r5, r3
 800440c:	fb03 5711 	mls	r7, r3, r1, r5
 8004410:	5dc7      	ldrb	r7, [r0, r7]
 8004412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004416:	462f      	mov	r7, r5
 8004418:	42bb      	cmp	r3, r7
 800441a:	460d      	mov	r5, r1
 800441c:	d9f4      	bls.n	8004408 <_printf_i+0x110>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d10b      	bne.n	800443a <_printf_i+0x142>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	07df      	lsls	r7, r3, #31
 8004426:	d508      	bpl.n	800443a <_printf_i+0x142>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	6861      	ldr	r1, [r4, #4]
 800442c:	4299      	cmp	r1, r3
 800442e:	bfde      	ittt	le
 8004430:	2330      	movle	r3, #48	@ 0x30
 8004432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800443a:	1b92      	subs	r2, r2, r6
 800443c:	6122      	str	r2, [r4, #16]
 800443e:	f8cd a000 	str.w	sl, [sp]
 8004442:	464b      	mov	r3, r9
 8004444:	aa03      	add	r2, sp, #12
 8004446:	4621      	mov	r1, r4
 8004448:	4640      	mov	r0, r8
 800444a:	f7ff fee7 	bl	800421c <_printf_common>
 800444e:	3001      	adds	r0, #1
 8004450:	d14a      	bne.n	80044e8 <_printf_i+0x1f0>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	b004      	add	sp, #16
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	f043 0320 	orr.w	r3, r3, #32
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	4832      	ldr	r0, [pc, #200]	@ (8004530 <_printf_i+0x238>)
 8004466:	2778      	movs	r7, #120	@ 0x78
 8004468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	6831      	ldr	r1, [r6, #0]
 8004470:	061f      	lsls	r7, r3, #24
 8004472:	f851 5b04 	ldr.w	r5, [r1], #4
 8004476:	d402      	bmi.n	800447e <_printf_i+0x186>
 8004478:	065f      	lsls	r7, r3, #25
 800447a:	bf48      	it	mi
 800447c:	b2ad      	uxthmi	r5, r5
 800447e:	6031      	str	r1, [r6, #0]
 8004480:	07d9      	lsls	r1, r3, #31
 8004482:	bf44      	itt	mi
 8004484:	f043 0320 	orrmi.w	r3, r3, #32
 8004488:	6023      	strmi	r3, [r4, #0]
 800448a:	b11d      	cbz	r5, 8004494 <_printf_i+0x19c>
 800448c:	2310      	movs	r3, #16
 800448e:	e7ad      	b.n	80043ec <_printf_i+0xf4>
 8004490:	4826      	ldr	r0, [pc, #152]	@ (800452c <_printf_i+0x234>)
 8004492:	e7e9      	b.n	8004468 <_printf_i+0x170>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	f023 0320 	bic.w	r3, r3, #32
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	e7f6      	b.n	800448c <_printf_i+0x194>
 800449e:	4616      	mov	r6, r2
 80044a0:	e7bd      	b.n	800441e <_printf_i+0x126>
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	6825      	ldr	r5, [r4, #0]
 80044a6:	6961      	ldr	r1, [r4, #20]
 80044a8:	1d18      	adds	r0, r3, #4
 80044aa:	6030      	str	r0, [r6, #0]
 80044ac:	062e      	lsls	r6, r5, #24
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0x1be>
 80044b2:	6019      	str	r1, [r3, #0]
 80044b4:	e002      	b.n	80044bc <_printf_i+0x1c4>
 80044b6:	0668      	lsls	r0, r5, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0x1ba>
 80044ba:	8019      	strh	r1, [r3, #0]
 80044bc:	2300      	movs	r3, #0
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	4616      	mov	r6, r2
 80044c2:	e7bc      	b.n	800443e <_printf_i+0x146>
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	6032      	str	r2, [r6, #0]
 80044ca:	681e      	ldr	r6, [r3, #0]
 80044cc:	6862      	ldr	r2, [r4, #4]
 80044ce:	2100      	movs	r1, #0
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7fb fe5d 	bl	8000190 <memchr>
 80044d6:	b108      	cbz	r0, 80044dc <_printf_i+0x1e4>
 80044d8:	1b80      	subs	r0, r0, r6
 80044da:	6060      	str	r0, [r4, #4]
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	6123      	str	r3, [r4, #16]
 80044e0:	2300      	movs	r3, #0
 80044e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e6:	e7aa      	b.n	800443e <_printf_i+0x146>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d0ad      	beq.n	8004452 <_printf_i+0x15a>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	079b      	lsls	r3, r3, #30
 80044fa:	d413      	bmi.n	8004524 <_printf_i+0x22c>
 80044fc:	68e0      	ldr	r0, [r4, #12]
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	4298      	cmp	r0, r3
 8004502:	bfb8      	it	lt
 8004504:	4618      	movlt	r0, r3
 8004506:	e7a6      	b.n	8004456 <_printf_i+0x15e>
 8004508:	2301      	movs	r3, #1
 800450a:	4632      	mov	r2, r6
 800450c:	4649      	mov	r1, r9
 800450e:	4640      	mov	r0, r8
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d09d      	beq.n	8004452 <_printf_i+0x15a>
 8004516:	3501      	adds	r5, #1
 8004518:	68e3      	ldr	r3, [r4, #12]
 800451a:	9903      	ldr	r1, [sp, #12]
 800451c:	1a5b      	subs	r3, r3, r1
 800451e:	42ab      	cmp	r3, r5
 8004520:	dcf2      	bgt.n	8004508 <_printf_i+0x210>
 8004522:	e7eb      	b.n	80044fc <_printf_i+0x204>
 8004524:	2500      	movs	r5, #0
 8004526:	f104 0619 	add.w	r6, r4, #25
 800452a:	e7f5      	b.n	8004518 <_printf_i+0x220>
 800452c:	08004771 	.word	0x08004771
 8004530:	08004782 	.word	0x08004782

08004534 <memmove>:
 8004534:	4288      	cmp	r0, r1
 8004536:	b510      	push	{r4, lr}
 8004538:	eb01 0402 	add.w	r4, r1, r2
 800453c:	d902      	bls.n	8004544 <memmove+0x10>
 800453e:	4284      	cmp	r4, r0
 8004540:	4623      	mov	r3, r4
 8004542:	d807      	bhi.n	8004554 <memmove+0x20>
 8004544:	1e43      	subs	r3, r0, #1
 8004546:	42a1      	cmp	r1, r4
 8004548:	d008      	beq.n	800455c <memmove+0x28>
 800454a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800454e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004552:	e7f8      	b.n	8004546 <memmove+0x12>
 8004554:	4402      	add	r2, r0
 8004556:	4601      	mov	r1, r0
 8004558:	428a      	cmp	r2, r1
 800455a:	d100      	bne.n	800455e <memmove+0x2a>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004566:	e7f7      	b.n	8004558 <memmove+0x24>

08004568 <_sbrk_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d06      	ldr	r5, [pc, #24]	@ (8004584 <_sbrk_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fc2c 	bl	8000dd0 <_sbrk>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_sbrk_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_sbrk_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20000310 	.word	0x20000310

08004588 <memcpy>:
 8004588:	440a      	add	r2, r1
 800458a:	4291      	cmp	r1, r2
 800458c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004590:	d100      	bne.n	8004594 <memcpy+0xc>
 8004592:	4770      	bx	lr
 8004594:	b510      	push	{r4, lr}
 8004596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800459a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800459e:	4291      	cmp	r1, r2
 80045a0:	d1f9      	bne.n	8004596 <memcpy+0xe>
 80045a2:	bd10      	pop	{r4, pc}

080045a4 <_realloc_r>:
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	4607      	mov	r7, r0
 80045aa:	4614      	mov	r4, r2
 80045ac:	460d      	mov	r5, r1
 80045ae:	b921      	cbnz	r1, 80045ba <_realloc_r+0x16>
 80045b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b4:	4611      	mov	r1, r2
 80045b6:	f7ff bc4d 	b.w	8003e54 <_malloc_r>
 80045ba:	b92a      	cbnz	r2, 80045c8 <_realloc_r+0x24>
 80045bc:	f7ff fbde 	bl	8003d7c <_free_r>
 80045c0:	4625      	mov	r5, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c8:	f000 f81a 	bl	8004600 <_malloc_usable_size_r>
 80045cc:	4284      	cmp	r4, r0
 80045ce:	4606      	mov	r6, r0
 80045d0:	d802      	bhi.n	80045d8 <_realloc_r+0x34>
 80045d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045d6:	d8f4      	bhi.n	80045c2 <_realloc_r+0x1e>
 80045d8:	4621      	mov	r1, r4
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff fc3a 	bl	8003e54 <_malloc_r>
 80045e0:	4680      	mov	r8, r0
 80045e2:	b908      	cbnz	r0, 80045e8 <_realloc_r+0x44>
 80045e4:	4645      	mov	r5, r8
 80045e6:	e7ec      	b.n	80045c2 <_realloc_r+0x1e>
 80045e8:	42b4      	cmp	r4, r6
 80045ea:	4622      	mov	r2, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	bf28      	it	cs
 80045f0:	4632      	movcs	r2, r6
 80045f2:	f7ff ffc9 	bl	8004588 <memcpy>
 80045f6:	4629      	mov	r1, r5
 80045f8:	4638      	mov	r0, r7
 80045fa:	f7ff fbbf 	bl	8003d7c <_free_r>
 80045fe:	e7f1      	b.n	80045e4 <_realloc_r+0x40>

08004600 <_malloc_usable_size_r>:
 8004600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004604:	1f18      	subs	r0, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	bfbc      	itt	lt
 800460a:	580b      	ldrlt	r3, [r1, r0]
 800460c:	18c0      	addlt	r0, r0, r3
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
